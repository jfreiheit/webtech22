{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Web-Technologien \u00b6 Herzlich willkommen zur WebTech-Veranstaltung im Wintersemester 2022/23! Grober Inhalt \u00b6 In dieser Veranstaltung lernen Sie, was das World Wide Web ist und wie man eigene Webseiten und -anwendungen realisiert. Sie lernen die Protokolle und Sprachen http , HTML , CSS und JavaScript kennen und machen sich mit Angular , Node.js und REST vertraut. Zentrales Thema ist der sogenannte MEAN -Stack, d.h. Sie lernen die Entwicklung mithilfe von M ongoDB, E xpress.js, A ngular und N ode.js kennen. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Woche Themen (Vorlesung) \u00dcbung Aufgabe (Stand) Abgabe \u00dcbung bis 1. 10.-14.10.2022 Einf\u00fchrung und Organisatorisches \u00dcbung 0 - - 2. 17.-21.10.2022 HTML \u00dcbung 1 Idee 25.10.2022 3. 24.-28.10.2022 CSS (Eigenschaften und Selektoren \u00dcbung 2 - 01.11.2022 4. 31.-04.11.2022 CSS (Grid) \u00dcbung 3 Konzept 08.11.2022 5. 07.-11.11.2022 RWD (responsive Webdesign) \u00dcbung 4 - 15.11.2022 6. 14.-18.11.2022 JavaScript (DOM) \u00dcbung 5 Datenmodell 22.11.2022 7. 21.-25.11.2022 Angular (Einf\u00fchrung und Komponenten) \u00dcbung 6 Schnittstelle 29.11.2022 8. 28.-02.12.2022 Angular (Bindings und Direktiven) + JSON \u00dcbung 7 Frontend (c+r) 06.12.2022 9. 05.-09.12.2022 Angular (Routing und Services) \u00dcbung 8 Frontend (u+d) 13.12.2022 10. 12.-16.12.2022 Node.js + Express (REST-Server + MongoDB) \u00dcbung 9 Frontend fertig 20.12.2021 11. 19.-23.12.2022 Angular (Anbindung ans Backend) \u00dcbung 10 Backend ( c ) 10.01.2023 12. 02.-06.01.2023 Nutzerverwaltung und Material - Backend (r + u) 17.01.2023 13. 09.-13.01.2023 Dateiupload + Drag&Drop - Backend (d + fertig) 24.01.2023 14. 16.-20.01.2023 Wiederholung - fertig stellen 31.01.2023 15. 23.-27.01.2023 - Fragen - - 16. 30.-02.02.2023 - Fragen - 17. 06.-10.02.2023 - Fragen Abgabe 1.PZ 20.2.2023, Gespr\u00e4che 21.2.2023 Abgabe 2.PZ 27.3.2023, Gespr\u00e4che 28.3.2023 - Organisatorisches \u00b6 Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie die \u00dcbungen l\u00f6sen und zu den jeweiligen Fristen per Git auf einen Server (GitHub oder GitLab) laden. Am Ende des Semesters ist eine Aufgabe abzugeben. Diese Aufgabe wird bewertet. Die Bewertung entspricht dann der Modulnote. Hier sind die \u00dcbungen beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Code aus der Vorlesung \u00b6 HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Hello FIW </ title > </ head > < body > < h1 > \u00dcberschrift h1 </ h1 > < p > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed < br /> diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor < img src = \"./Logos/fiw.jpg\" alt = \"FIW_Logo\" /> sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > < h2 > \u00dcberschrift h2 </ h2 > < h3 > \u00dcberschrift h3 </ h3 > < h4 > \u00dcberschrift h4 </ h4 > < h5 > \u00dcberschrift h5 </ h5 > < h6 > \u00dcberschrift h6 </ h6 > < ul > < li > Erster Punkt </ li > < li > Zweiter Punkt < ul > < li > Unterpunkt </ li > < li > Unterpunkt </ li > < li > Unterpunkt </ li > </ ul > </ li > < li > Dritter Punkt </ li > </ ul > < table > < thead > < tr > < th > Spalte 1 </ th > < th > Spalte 2 </ th > < th > Spalte 2 </ th > </ tr > </ thead > < tbody > < tr > < td > 1 </ td > < td > 2 </ td > < td > 3 </ td > </ tr > < tr > < td > 4 </ td > < td > 5 </ td > < td > 6 </ td > </ tr > < tr > < td > 7 </ td > < td > 8 </ td > < td > 9 </ td > </ tr > </ tbody > </ table > < a href = \"./test.html\" > Test </ a > < header > vielleicht < nav > Men\u00fcpunkte wei\u00df nicht </ nav > lieber testen </ header > < main > lieber testen < section > < article > besser testen </ article > </ section > </ main > < footer > </ footer > < input action = \"/submit\" > < label for = \"name\" > Name </ label > < input type = \"text\" id = \"name\" name = \"name\" placeholder = \"Name\" > < br /> < label for = \"email\" > E-Mail </ label > < input type = \"email\" id = \"email\" name = \"email\" placeholder = \"E-Mail\" > < label for = \"message\" > Nachricht </ label > < textarea id = \"message\" name = \"message\" placeholder = \"Nachricht\" ></ textarea > < input type = \"submit\" value = \"Absenden\" > < input type = \"datetime-local\" name = \"\" id = \"\" > < input type = \"button\" value = \"OK\" > </ form > </ body > </ html > CSS Cascading <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Cascading </ title > < style > body { background-color : lightgoldenrodyellow ; font-family : verdana ; } section h2 { color : pink ; text-align : center ; text-transform : uppercase ; } header , footer { background-color : aqua ; } main { color : red ; } section > p { color : blue ; } ol > li { background-color : yellowgreen ; } . bgYellow { background-color : yellow ; } . fgBrown { color : brown ; } # firstH2 { font-weight : 400 ; } a { text-decoration : none ; } a : hover { font-weight : 800 ; } a : visited { font-weight : 800 ; color : red ; } </ style > </ head > < body > < header > < h1 style = \"padding: 30px; margin-bottom: 100px;\" > Cascading </ h1 > </ header > < main > < section > < h2 id = \"firstH2\" > Section 1 </ h2 > < article > < p class = \"bgYellow fgBrown\" > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > < p class = \"bgYellow fgBrown\" > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > </ article > < article > < p class = \"bgYellow\" > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > < p class = \"fgBrown\" > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > </ article > < p > direktes Kind einer section </ p > </ section > < section > < h2 > Section 2 </ h2 > < article > < p > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > hallo ballo < p > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > </ article > < article > < p > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > < p > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > </ article > </ section > < ol > < li > item 1 < ul > < li > subitem </ li > < li > subitem </ li > < li > subitem </ li > </ ul > </ li > < li > item 2 </ li > < li > item 3 </ li > < li > item 4 </ li > < li > item 5 </ li > </ ol > </ main > < aside > < h2 > Aside </ h2 > < p > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > < p > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > </ aside > < footer > < p >< a href = \"./index.html\" > Zur\u00fcck </ a ></ p > </ footer > </ body > </ html > CSS Boxmodel <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Box-Model </ title > < style > div { width : 320 px ; padding : 10 px ; border : 5 px solid gray ; margin : 0 ; } </ style > </ head > < body > < header > < h1 > Box-Model </ h1 > </ header > < main > < img src = \"./Logos/fiw.jpg\" alt = \"fiw logo\" style = \"width:350px\" /> < div > Das FIW-Logo hat eine Breite von 350px (width:350px). Der Inhalt dieser Box hat eine Breite von 320px. Dazu kommt padding von 10px (auf beiden Seiten) und ein Rahmen mit der Breite von 5px. Macht zusammen 350px. </ div > </ main > < footer > < p >< a href = \"./index.html\" > Zur\u00fcck </ a ></ p > </ footer > </ body > </ html > CSS Rangfolge <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Reihenfolge Selektoren </ title > < style > a : link { color : blue ; } . link { color : green ; } # navigation a . link { color : red ; } li a { color : magenta ; } # navigation li a { color : black ; } </ style > </ head > < body > < header > < h1 > Reihenfolge Wirkung Selektoren </ h1 > </ header > < main > < ul id = \"navigation\" > < li >< a href = \"./index.html\" class = \"link\" > Startseite </ a ></ li > < li >< a href = \"./grid.html\" class = \"link\" > Grid </ a ></ li > </ ul > < h2 > Prinzip </ h2 > < dl > < dt > Kategorie A </ dt > < dd > erh\u00e4lt den Wert 1, wenn CSS-Definitionen direkt im style-Attribut eines HTML-Elementes notiert sind </ dd > < dt > Kategorie B </ dt > < dd > erh\u00e4lt den Wert 1 bei Selektoren f\u00fcr Elemente mit id-Attributen </ dd > < dt > Kategorie C </ dt > < dd > Anzahl der von einem Selektor betroffenen Klassen und Pseudoklassen </ dd > < dt > Kategorie D </ dt > < dd > Anzahl der von einem Selektor betroffenen Elementnamen und Pseudo-Elemente </ dd > </ dl > < ol > < li > Bei der Reihenfolge der Sortierung gilt: A > B > C > D, also z.B. 1 0 0 0 vor (gr\u00f6\u00dfer als) 0 1 2 2. </ li > < li > Bei Gleichheit gilt die letzte Definition </ li > </ ol > </ main > < footer > < p >< a href = \"./index.html\" > Zur\u00fcck </ a ></ p > </ footer > </ body > </ html > display <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > display </ title > < style > p { color : red ; } p . ex1 { display : none ; } p . ex2 { display : inline ; } p . ex3 { display : block ; } p . ex4 { display : inline-block ; } nav { background-color : darkgray ; color : white ; text-align : center ; } nav li { display : inline-block ; padding : 3 % ; } nav ul li a { color : white ; text-decoration : none ; } </ style > </ head > < body > < header > < nav > < ul > < li >< a href = \"./boxmodel.html\" > Boxmodel </ a ></ li > < li >< a href = \"./cascading.html\" > Cascading </ a ></ li > < li >< a href = \"#\" > Display </ a ></ li > < li >< a href = \"./grid\" > Grid </ a ></ li > </ ul > </ nav > </ header > < main > < h1 > The display Property </ h1 > < h2 > display: none: </ h2 > < div > Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam semper diam at erat pulvinar, at pulvinar felis blandit. < p class = \"ex1\" > none! </ p > Vestibulum volutpat tellus diam, consequat gravida libero rhoncus ut. </ div > < h2 > display: inline: </ h2 > < div > Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam semper diam at erat pulvinar, at pulvinar felis blandit. < p class = \"ex2\" > inline! </ p > Vestibulum volutpat tellus diam, consequat gravida libero rhoncus ut. </ div > < h2 > display: block: </ h2 > < div > Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam semper diam at erat pulvinar, at pulvinar felis blandit. < p class = \"ex3\" > block! </ p > Vestibulum volutpat tellus diam, consequat gravida libero rhoncus ut. </ div > < h2 > display: inline-block: </ h2 > < div > Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam semper diam at erat pulvinar, at pulvinar felis blandit. < p class = \"ex4\" > neue Zeile und dann inline! </ p > Vestibulum volutpat tellus diam, consequat gravida libero rhoncus ut. </ div > < ul > < li >< a href = \"https://developer.mozilla.org/en-US/docs/Web/CSS/display?retiredLocale=de\" > Gibt noch sehr viele andere </ a ></ li > < li >< a href = \"./index.html\" > Zur\u00fcck </ a ></ li > </ ul > </ main > < footer > </ footer > </ body > </ html > grid <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > CSS-Grid </ title > < style > . orange { background-color : orange ; opacity : 0.5 ; border : 2 px solid gray ; border-radius : 5 px ; padding : 30 px ; } . wrapper { display : grid ; grid-template-columns : repeat ( 3 , 1 fr ); grid-gap : 10 px ; grid-auto-rows : minmax ( 100 px , auto ); } . one { grid-column : 1 / 3 ; grid-row : 1 ; } . two { grid-column : 2 / 4 ; grid-row : 1 / 3 ; } . three { grid-column : 1 ; grid-row : 2 / 5 ; } . four { grid-column : 3 ; grid-row : 3 ; } </ style > </ head > < body > < header > < h1 > CSS-Grid </ h1 > </ header > < main class = \"wrapper\" > < div class = \"one orange\" > One </ div > < div class = \"two orange\" > Two </ div > < div class = \"three orange\" > Three </ div > < div class = \"four orange\" > Four </ div > < div class = \"five orange\" > Five </ div > < div class = \"six orange\" > Six </ div > </ main > < footer > < p >< a href = \"https://www.w3schools.com/cssref/pr_grid.php\" > grid </ a ></ p > < p >< a href = \"https://www.w3schools.com/cssref/pr_grid-template-columns.php\" > grid-template-columns </ a ></ p > < p >< a href = \"https://css-tricks.com/introduction-fr-css-unit/\" > fr - fraction </ a ></ p > < p >< a href = \"./index.html\" > Zur\u00fcck </ a ></ p > </ footer > </ body > </ html > rwd - 1 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < style > div { margin : auto ; width : 100 % ; height : 100 % ; text-align : center ; background-color : red ; padding-top : 20 % ; padding-bottom : 20 % ; font-size : medium ; } @ media screen and ( min-width : 800px ) { div { background-color : blue ; color : white ; font-size : large ; } } @ media ( min-width : 1200px ) { div { background-color : darkgreen ; color : white ; font-size : xx-large ; } } @ media ( orientation : portrait ) { div { background-color : yellow ; color : brown ; writing-mode : vertical - rl ; } } </ style > </ head > < body > < div > \u00c4ndern Sie die Breite des Browsers, um den Effekt zu sehen. </ div > </ body > </ body > </ html > rwd - 2 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > Responsive Webdesign </ title > < style > . small { float : left ; width : 98 % ; padding : 1 % ; } @ media screen and ( min-width : 800px ) { . medium { float : left ; width : 48 % ; padding : 1 % ; } } @ media screen and ( min-width : 1200px ) { . large { float : left ; width : 23 % ; padding : 1 % ; } } </ style > </ head > < body > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > </ body > </ html > bootstrap <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > <!-- <link href=\"../bootstrap.min.css\" rel=\"stylesheet\"> --> < link href = \"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\" rel = \"stylesheet\" integrity = \"sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi\" crossorigin = \"anonymous\" > < title > Bootstrap </ title > </ head > < body > < main role = \"main\" > < div class = \"p-5 mb-4 bg-warning rounded-3\" > < div class = \"container-fluid py-5\" > < h1 class = \"display-5 fw-bold\" > Jetzt mit Bootstrap! </ h1 > < p class = \"col-md-8 fs-4\" > Wir verwenden jetzt Bootstrap und schauen uns mal die Anwendung ein wenig genauer an. Das Grundprinzip besteht darin, HTML-Elementen Klassen zuzuordnen. </ p > < p >< a class = \"btn btn-primary btn-lg\" href = \"https://getbootstrap.com/docs/5.1/examples/\" role = \"button\" > Bootstrap Beispiele &raquo; </ a ></ p > </ div > </ div > < div class = \"container\" > < h2 > Formular mit Validierung, ob Eingabe erfolgte (nur mit CSS - kein JavaScript!) </ h2 > < p > Hier wird z.B. die Klasse < code > .was-validated </ code > verwendet, um zu \u00fcberpr\u00fcfen, ob in den Textfeldern und der Checkbox eine Eingabe erfolgt ist. </ p > < form class = \"was-validated\" > < div class = \"form-group\" > < label for = \"uname\" > Username: </ label > < input type = \"text\" class = \"form-control\" id = \"uname\" placeholder = \"Enter username\" name = \"uname\" required > < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Feld bitte ausf\u00fcllen! </ div > </ div > < div class = \"form-group\" > < label for = \"pwd\" > Password: </ label > < input type = \"password\" class = \"form-control\" id = \"pwd\" placeholder = \"Enter password\" name = \"pswd\" required > < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Feld bitte ausf\u00fcllen! </ div > </ div > < div class = \"form-group form-check\" > < label class = \"form-check-label\" > < input class = \"form-check-input\" type = \"checkbox\" name = \"remember\" required > Ich habe die Datenschutzerkl\u00e4rung gelesen und stimme ihr zu. < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Hier bitte best\u00e4tigen! </ div > </ label > </ div > < button type = \"submit\" class = \"btn btn-primary\" > Login </ button > </ form > </ div > </ main > </ body > </ html > bootstrap grid <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Grid </ title > < style > div div { padding : 10 px ; } </ style > </ head > < body > < main class = \"container pt-5 \" > < h2 > Wichtig ist, dass die Spaltenanzahl in einer Zeile 12 ergibt </ h2 > < div class = \"row\" > < div class = \"col-3\" style = \"background-color: lightgrey;\" > < h3 > col-3 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-3 </ code > zugewiesen </ p > </ div > < div class = \"col-4\" style = \"background-color: darkgrey;\" > < h3 > col-4 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-4 </ code > zugewiesen </ p > </ div > < div class = \"col-5\" style = \"background-color: grey;\" > < h3 > col-5 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-5 </ code > zugewiesen </ p > </ div > </ div > </ main > </ body > </ html > bootstrap responsive <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Grid </ title > < style > div div { padding : 10 px ; margin-top : 5 px ; margin-bottom : 5 px ; } . row div : nth-child ( odd ) { background-color : lightgrey ; color : black ; } . row div : nth-child ( even ) { background-color : grey ; color : white ; } </ style > </ head > < body > < main class = \"container pt-5 \" > < h2 > Jetzt resonsiv - \u00e4ndern Sie die Monitorbreite </ h2 > < div class = \"row\" > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 1/3 </ li > < li > lg: < code > col-lg-3 </ code > 1/4 </ li > < li > xl: < code > col-xl-2 </ code > 1/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 2/3 </ li > < li > lg: < code > col-lg-3 </ code > 2/4 </ li > < li > xl: < code > col-xl-2 </ code > 2/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 3/3 </ li > < li > lg: < code > col-lg-3 </ code > 3/4 </ li > < li > xl: < code > col-xl-2 </ code > 3/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 1/3 </ li > < li > lg: < code > col-lg-3 </ code > 4/4 </ li > < li > xl: < code > col-xl-2 </ code > 4/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 2/3 </ li > < li > lg: < code > col-lg-6 </ code > 1/2 </ li > < li > xl: < code > col-xl-2 </ code > 5/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 3/3 </ li > < li > lg: < code > col-lg-6 </ code > 2/2 </ li > < li > xl: < code > col-xl-2 </ code > 6/6 </ li > </ ul > </ div > </ div > </ main > </ body > </ html > Links zu Bootstrap CDN Download Semesteraufgabe \u00b6 Am Ende des Kurses geben Sie eine Webanwendung ab. Diese wird bewertet und bildet die Modulnote f\u00fcr \"WebTech\" (es gibt also keine Klausur o.\u00e4.). \u00dcberlegen Sie sich fr\u00fch, was Sie implementieren wollen. Ihrer Kreativit\u00e4t sind keine Grenzen gesetzt. Es k\u00f6nnen 2 Studentinnen gemeinsam ein Projekt durchf\u00fchren und abgeben. Sie erhalten dann (h\u00f6chstwahrscheinlich) die gleiche Note. Es muss an den Commits erkennbar sein, welchen Anteil am Ergebnis jede der beiden Studentinnen hatte. Mindestanforderungen Folgende Anforderungen werden an Ihr Projekt gestellt: das Frontend soll mit Angular entwickelt werden, das Backend mit Node.js, es soll eine Datenbank (MongoDB, kann aber auch MySQL oder PostgreSQL oder MariaDB - aber nicht Firebase) verwendet werden, es soll CRUD implementiert sein, d.h. Sie ben\u00f6tigen eine Komponente zur Erstellung und Speicherung eines Datenbankeintrages ( C reate), eine Komponente zur \u00c4nderung eines Datenbankeintrages ( U pdate), eine Komponente zur Anzeige aller Datenbankeintr\u00e4ge ( R ead), eine Komponente zum L\u00f6schen eines Datenbankeintrages ( D elete). wenn Sie die Anwendung alleine umsetzen, dann gen\u00fcgen 3 der 4 CRUD-Funktionalit\u00e4ten wenn Sie die Anwendung zu zweit entwickeln, dann sollen alle 4 CRUD-Funktionalit\u00e4ten umgesetzt werden und Login (Username + Passwort) und ich schaue mir die Commit-Hiostorie im Git genauer an, um sicherzugehen, dass beide Studentinnen gleich viel an der Anwendung mitentwickelt haben Datenbankeintr\u00e4ge k\u00f6nnen B\u00fccher, CDs, ToDos, Einkaufslisten, Vorlesungen, K\u00fchlschrankinhalte usw. sein - wie gesagt, Ihrer Kreativit\u00e4t sind keine Grenzen gesetzt. Die Anwendung soll in einem Git-Dienst (GitHub, GitLab, ...) verf\u00fcgbar sein. Verwenden Sie ein CSS-Framework, wie z.B. Materialize, Bootstrap o.\u00e4.! Ihre Anwendung soll \"modern\" aussehen und responsive sein. Erstellen Sie eine informative (ausf\u00fchrliche) README -Datei ( README.md ). Diese Datei sollte beinhalten: Eine Beschreibung Ihrer Anwendung. Am besten mit Screenshots, so dass sie Ihren Kommilitoninnen aus den n\u00e4chsten Jahren hilft, ein Verst\u00e4ndnis daf\u00fcr zu entwickeln, was m\u00f6gliche Semesteraufgaben sein k\u00f6nnen. Eine Anleitung zur Installation Ihrer Anwendung. Super w\u00e4re es, wenn Sie die Datenbank, die Sie verwenden, per Skript vorausf\u00fcllen, d.h. es w\u00e4re sch\u00f6n, wenn zum Testen der Anwendung nur das Frontend und das Backend gestartet werden m\u00fcssten und alles andere automatisch passieren w\u00fcrde. Super w\u00e4re es auch, wenn Sie Ihre Anwendung deployen w\u00fcrden. Nach Abgabe vereinbaren wir ein Online-Meeting, in dem Sie mir Ihre Anwendung nochmal zeigen k\u00f6nnen und ich Ihnen Fragen zu Ihrem Code stellen werde. Ist keine Pr\u00fcfung, sondern eher ein fachliches Gespr\u00e4ch. Abgabe- und Gespr\u00e4chstermine \u00b6 Die L\u00f6sung f\u00fcr die Semesteraufgabe pushen Sie in Ihr Respository. In einem Gespr\u00e4ch f\u00fchren Sie die L\u00f6sung vor und wir unterhalten uns \u00fcber Ihre L\u00f6sung. Daf\u00fcr stehen verschiedene Termine zur Verf\u00fcgung. Pr\u00fcfungszeitraum: 20.2. Abgabe und 21.2. Gespr\u00e4ch P\u00fcfungszeitraum: 27.3. Abgabe und 28.3. Gespr\u00e4ch Bitte tragen Sie sich in Moodle in den von Ihnen gew\u00fcnschten Gespr\u00e4chstermin ein! Wenn Sie im 1.PZ abgeben, tragen Sie sich im LSF zum ersten PZ zur Pr\u00fcfung ein, ansonsten im 2.PZ. Einige Beispiele \u00b6 Mieter- und Zahlungsinformationen verwalten \u00b6 ToDo-Liste \u00b6 Dog-O-Mat \u00b6 Reiseplaner \u00b6","title":"Home"},{"location":"#web-technologien","text":"Herzlich willkommen zur WebTech-Veranstaltung im Wintersemester 2022/23!","title":"Web-Technologien"},{"location":"#grober-inhalt","text":"In dieser Veranstaltung lernen Sie, was das World Wide Web ist und wie man eigene Webseiten und -anwendungen realisiert. Sie lernen die Protokolle und Sprachen http , HTML , CSS und JavaScript kennen und machen sich mit Angular , Node.js und REST vertraut. Zentrales Thema ist der sogenannte MEAN -Stack, d.h. Sie lernen die Entwicklung mithilfe von M ongoDB, E xpress.js, A ngular und N ode.js kennen. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Woche Themen (Vorlesung) \u00dcbung Aufgabe (Stand) Abgabe \u00dcbung bis 1. 10.-14.10.2022 Einf\u00fchrung und Organisatorisches \u00dcbung 0 - - 2. 17.-21.10.2022 HTML \u00dcbung 1 Idee 25.10.2022 3. 24.-28.10.2022 CSS (Eigenschaften und Selektoren \u00dcbung 2 - 01.11.2022 4. 31.-04.11.2022 CSS (Grid) \u00dcbung 3 Konzept 08.11.2022 5. 07.-11.11.2022 RWD (responsive Webdesign) \u00dcbung 4 - 15.11.2022 6. 14.-18.11.2022 JavaScript (DOM) \u00dcbung 5 Datenmodell 22.11.2022 7. 21.-25.11.2022 Angular (Einf\u00fchrung und Komponenten) \u00dcbung 6 Schnittstelle 29.11.2022 8. 28.-02.12.2022 Angular (Bindings und Direktiven) + JSON \u00dcbung 7 Frontend (c+r) 06.12.2022 9. 05.-09.12.2022 Angular (Routing und Services) \u00dcbung 8 Frontend (u+d) 13.12.2022 10. 12.-16.12.2022 Node.js + Express (REST-Server + MongoDB) \u00dcbung 9 Frontend fertig 20.12.2021 11. 19.-23.12.2022 Angular (Anbindung ans Backend) \u00dcbung 10 Backend ( c ) 10.01.2023 12. 02.-06.01.2023 Nutzerverwaltung und Material - Backend (r + u) 17.01.2023 13. 09.-13.01.2023 Dateiupload + Drag&Drop - Backend (d + fertig) 24.01.2023 14. 16.-20.01.2023 Wiederholung - fertig stellen 31.01.2023 15. 23.-27.01.2023 - Fragen - - 16. 30.-02.02.2023 - Fragen - 17. 06.-10.02.2023 - Fragen Abgabe 1.PZ 20.2.2023, Gespr\u00e4che 21.2.2023 Abgabe 2.PZ 27.3.2023, Gespr\u00e4che 28.3.2023 -","title":"Grober Inhalt"},{"location":"#organisatorisches","text":"Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen Sie die \u00dcbungen l\u00f6sen und zu den jeweiligen Fristen per Git auf einen Server (GitHub oder GitLab) laden. Am Ende des Semesters ist eine Aufgabe abzugeben. Diese Aufgabe wird bewertet. Die Bewertung entspricht dann der Modulnote. Hier sind die \u00dcbungen beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht.","title":"Organisatorisches"},{"location":"#code-aus-der-vorlesung","text":"HTML <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Hello FIW </ title > </ head > < body > < h1 > \u00dcberschrift h1 </ h1 > < p > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed < br /> diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor < img src = \"./Logos/fiw.jpg\" alt = \"FIW_Logo\" /> sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > < h2 > \u00dcberschrift h2 </ h2 > < h3 > \u00dcberschrift h3 </ h3 > < h4 > \u00dcberschrift h4 </ h4 > < h5 > \u00dcberschrift h5 </ h5 > < h6 > \u00dcberschrift h6 </ h6 > < ul > < li > Erster Punkt </ li > < li > Zweiter Punkt < ul > < li > Unterpunkt </ li > < li > Unterpunkt </ li > < li > Unterpunkt </ li > </ ul > </ li > < li > Dritter Punkt </ li > </ ul > < table > < thead > < tr > < th > Spalte 1 </ th > < th > Spalte 2 </ th > < th > Spalte 2 </ th > </ tr > </ thead > < tbody > < tr > < td > 1 </ td > < td > 2 </ td > < td > 3 </ td > </ tr > < tr > < td > 4 </ td > < td > 5 </ td > < td > 6 </ td > </ tr > < tr > < td > 7 </ td > < td > 8 </ td > < td > 9 </ td > </ tr > </ tbody > </ table > < a href = \"./test.html\" > Test </ a > < header > vielleicht < nav > Men\u00fcpunkte wei\u00df nicht </ nav > lieber testen </ header > < main > lieber testen < section > < article > besser testen </ article > </ section > </ main > < footer > </ footer > < input action = \"/submit\" > < label for = \"name\" > Name </ label > < input type = \"text\" id = \"name\" name = \"name\" placeholder = \"Name\" > < br /> < label for = \"email\" > E-Mail </ label > < input type = \"email\" id = \"email\" name = \"email\" placeholder = \"E-Mail\" > < label for = \"message\" > Nachricht </ label > < textarea id = \"message\" name = \"message\" placeholder = \"Nachricht\" ></ textarea > < input type = \"submit\" value = \"Absenden\" > < input type = \"datetime-local\" name = \"\" id = \"\" > < input type = \"button\" value = \"OK\" > </ form > </ body > </ html > CSS Cascading <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Cascading </ title > < style > body { background-color : lightgoldenrodyellow ; font-family : verdana ; } section h2 { color : pink ; text-align : center ; text-transform : uppercase ; } header , footer { background-color : aqua ; } main { color : red ; } section > p { color : blue ; } ol > li { background-color : yellowgreen ; } . bgYellow { background-color : yellow ; } . fgBrown { color : brown ; } # firstH2 { font-weight : 400 ; } a { text-decoration : none ; } a : hover { font-weight : 800 ; } a : visited { font-weight : 800 ; color : red ; } </ style > </ head > < body > < header > < h1 style = \"padding: 30px; margin-bottom: 100px;\" > Cascading </ h1 > </ header > < main > < section > < h2 id = \"firstH2\" > Section 1 </ h2 > < article > < p class = \"bgYellow fgBrown\" > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > < p class = \"bgYellow fgBrown\" > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > </ article > < article > < p class = \"bgYellow\" > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > < p class = \"fgBrown\" > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > </ article > < p > direktes Kind einer section </ p > </ section > < section > < h2 > Section 2 </ h2 > < article > < p > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > hallo ballo < p > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > </ article > < article > < p > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > < p > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > </ article > </ section > < ol > < li > item 1 < ul > < li > subitem </ li > < li > subitem </ li > < li > subitem </ li > </ ul > </ li > < li > item 2 </ li > < li > item 3 </ li > < li > item 4 </ li > < li > item 5 </ li > </ ol > </ main > < aside > < h2 > Aside </ h2 > < p > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > < p > Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam, quae. </ p > </ aside > < footer > < p >< a href = \"./index.html\" > Zur\u00fcck </ a ></ p > </ footer > </ body > </ html > CSS Boxmodel <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Box-Model </ title > < style > div { width : 320 px ; padding : 10 px ; border : 5 px solid gray ; margin : 0 ; } </ style > </ head > < body > < header > < h1 > Box-Model </ h1 > </ header > < main > < img src = \"./Logos/fiw.jpg\" alt = \"fiw logo\" style = \"width:350px\" /> < div > Das FIW-Logo hat eine Breite von 350px (width:350px). Der Inhalt dieser Box hat eine Breite von 320px. Dazu kommt padding von 10px (auf beiden Seiten) und ein Rahmen mit der Breite von 5px. Macht zusammen 350px. </ div > </ main > < footer > < p >< a href = \"./index.html\" > Zur\u00fcck </ a ></ p > </ footer > </ body > </ html > CSS Rangfolge <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Reihenfolge Selektoren </ title > < style > a : link { color : blue ; } . link { color : green ; } # navigation a . link { color : red ; } li a { color : magenta ; } # navigation li a { color : black ; } </ style > </ head > < body > < header > < h1 > Reihenfolge Wirkung Selektoren </ h1 > </ header > < main > < ul id = \"navigation\" > < li >< a href = \"./index.html\" class = \"link\" > Startseite </ a ></ li > < li >< a href = \"./grid.html\" class = \"link\" > Grid </ a ></ li > </ ul > < h2 > Prinzip </ h2 > < dl > < dt > Kategorie A </ dt > < dd > erh\u00e4lt den Wert 1, wenn CSS-Definitionen direkt im style-Attribut eines HTML-Elementes notiert sind </ dd > < dt > Kategorie B </ dt > < dd > erh\u00e4lt den Wert 1 bei Selektoren f\u00fcr Elemente mit id-Attributen </ dd > < dt > Kategorie C </ dt > < dd > Anzahl der von einem Selektor betroffenen Klassen und Pseudoklassen </ dd > < dt > Kategorie D </ dt > < dd > Anzahl der von einem Selektor betroffenen Elementnamen und Pseudo-Elemente </ dd > </ dl > < ol > < li > Bei der Reihenfolge der Sortierung gilt: A > B > C > D, also z.B. 1 0 0 0 vor (gr\u00f6\u00dfer als) 0 1 2 2. </ li > < li > Bei Gleichheit gilt die letzte Definition </ li > </ ol > </ main > < footer > < p >< a href = \"./index.html\" > Zur\u00fcck </ a ></ p > </ footer > </ body > </ html > display <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > display </ title > < style > p { color : red ; } p . ex1 { display : none ; } p . ex2 { display : inline ; } p . ex3 { display : block ; } p . ex4 { display : inline-block ; } nav { background-color : darkgray ; color : white ; text-align : center ; } nav li { display : inline-block ; padding : 3 % ; } nav ul li a { color : white ; text-decoration : none ; } </ style > </ head > < body > < header > < nav > < ul > < li >< a href = \"./boxmodel.html\" > Boxmodel </ a ></ li > < li >< a href = \"./cascading.html\" > Cascading </ a ></ li > < li >< a href = \"#\" > Display </ a ></ li > < li >< a href = \"./grid\" > Grid </ a ></ li > </ ul > </ nav > </ header > < main > < h1 > The display Property </ h1 > < h2 > display: none: </ h2 > < div > Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam semper diam at erat pulvinar, at pulvinar felis blandit. < p class = \"ex1\" > none! </ p > Vestibulum volutpat tellus diam, consequat gravida libero rhoncus ut. </ div > < h2 > display: inline: </ h2 > < div > Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam semper diam at erat pulvinar, at pulvinar felis blandit. < p class = \"ex2\" > inline! </ p > Vestibulum volutpat tellus diam, consequat gravida libero rhoncus ut. </ div > < h2 > display: block: </ h2 > < div > Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam semper diam at erat pulvinar, at pulvinar felis blandit. < p class = \"ex3\" > block! </ p > Vestibulum volutpat tellus diam, consequat gravida libero rhoncus ut. </ div > < h2 > display: inline-block: </ h2 > < div > Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam semper diam at erat pulvinar, at pulvinar felis blandit. < p class = \"ex4\" > neue Zeile und dann inline! </ p > Vestibulum volutpat tellus diam, consequat gravida libero rhoncus ut. </ div > < ul > < li >< a href = \"https://developer.mozilla.org/en-US/docs/Web/CSS/display?retiredLocale=de\" > Gibt noch sehr viele andere </ a ></ li > < li >< a href = \"./index.html\" > Zur\u00fcck </ a ></ li > </ ul > </ main > < footer > </ footer > </ body > </ html > grid <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > CSS-Grid </ title > < style > . orange { background-color : orange ; opacity : 0.5 ; border : 2 px solid gray ; border-radius : 5 px ; padding : 30 px ; } . wrapper { display : grid ; grid-template-columns : repeat ( 3 , 1 fr ); grid-gap : 10 px ; grid-auto-rows : minmax ( 100 px , auto ); } . one { grid-column : 1 / 3 ; grid-row : 1 ; } . two { grid-column : 2 / 4 ; grid-row : 1 / 3 ; } . three { grid-column : 1 ; grid-row : 2 / 5 ; } . four { grid-column : 3 ; grid-row : 3 ; } </ style > </ head > < body > < header > < h1 > CSS-Grid </ h1 > </ header > < main class = \"wrapper\" > < div class = \"one orange\" > One </ div > < div class = \"two orange\" > Two </ div > < div class = \"three orange\" > Three </ div > < div class = \"four orange\" > Four </ div > < div class = \"five orange\" > Five </ div > < div class = \"six orange\" > Six </ div > </ main > < footer > < p >< a href = \"https://www.w3schools.com/cssref/pr_grid.php\" > grid </ a ></ p > < p >< a href = \"https://www.w3schools.com/cssref/pr_grid-template-columns.php\" > grid-template-columns </ a ></ p > < p >< a href = \"https://css-tricks.com/introduction-fr-css-unit/\" > fr - fraction </ a ></ p > < p >< a href = \"./index.html\" > Zur\u00fcck </ a ></ p > </ footer > </ body > </ html > rwd - 1 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < style > div { margin : auto ; width : 100 % ; height : 100 % ; text-align : center ; background-color : red ; padding-top : 20 % ; padding-bottom : 20 % ; font-size : medium ; } @ media screen and ( min-width : 800px ) { div { background-color : blue ; color : white ; font-size : large ; } } @ media ( min-width : 1200px ) { div { background-color : darkgreen ; color : white ; font-size : xx-large ; } } @ media ( orientation : portrait ) { div { background-color : yellow ; color : brown ; writing-mode : vertical - rl ; } } </ style > </ head > < body > < div > \u00c4ndern Sie die Breite des Browsers, um den Effekt zu sehen. </ div > </ body > </ body > </ html > rwd - 2 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > Responsive Webdesign </ title > < style > . small { float : left ; width : 98 % ; padding : 1 % ; } @ media screen and ( min-width : 800px ) { . medium { float : left ; width : 48 % ; padding : 1 % ; } } @ media screen and ( min-width : 1200px ) { . large { float : left ; width : 23 % ; padding : 1 % ; } } </ style > </ head > < body > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > </ body > </ html > bootstrap <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > <!-- <link href=\"../bootstrap.min.css\" rel=\"stylesheet\"> --> < link href = \"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\" rel = \"stylesheet\" integrity = \"sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi\" crossorigin = \"anonymous\" > < title > Bootstrap </ title > </ head > < body > < main role = \"main\" > < div class = \"p-5 mb-4 bg-warning rounded-3\" > < div class = \"container-fluid py-5\" > < h1 class = \"display-5 fw-bold\" > Jetzt mit Bootstrap! </ h1 > < p class = \"col-md-8 fs-4\" > Wir verwenden jetzt Bootstrap und schauen uns mal die Anwendung ein wenig genauer an. Das Grundprinzip besteht darin, HTML-Elementen Klassen zuzuordnen. </ p > < p >< a class = \"btn btn-primary btn-lg\" href = \"https://getbootstrap.com/docs/5.1/examples/\" role = \"button\" > Bootstrap Beispiele &raquo; </ a ></ p > </ div > </ div > < div class = \"container\" > < h2 > Formular mit Validierung, ob Eingabe erfolgte (nur mit CSS - kein JavaScript!) </ h2 > < p > Hier wird z.B. die Klasse < code > .was-validated </ code > verwendet, um zu \u00fcberpr\u00fcfen, ob in den Textfeldern und der Checkbox eine Eingabe erfolgt ist. </ p > < form class = \"was-validated\" > < div class = \"form-group\" > < label for = \"uname\" > Username: </ label > < input type = \"text\" class = \"form-control\" id = \"uname\" placeholder = \"Enter username\" name = \"uname\" required > < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Feld bitte ausf\u00fcllen! </ div > </ div > < div class = \"form-group\" > < label for = \"pwd\" > Password: </ label > < input type = \"password\" class = \"form-control\" id = \"pwd\" placeholder = \"Enter password\" name = \"pswd\" required > < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Feld bitte ausf\u00fcllen! </ div > </ div > < div class = \"form-group form-check\" > < label class = \"form-check-label\" > < input class = \"form-check-input\" type = \"checkbox\" name = \"remember\" required > Ich habe die Datenschutzerkl\u00e4rung gelesen und stimme ihr zu. < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Hier bitte best\u00e4tigen! </ div > </ label > </ div > < button type = \"submit\" class = \"btn btn-primary\" > Login </ button > </ form > </ div > </ main > </ body > </ html > bootstrap grid <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Grid </ title > < style > div div { padding : 10 px ; } </ style > </ head > < body > < main class = \"container pt-5 \" > < h2 > Wichtig ist, dass die Spaltenanzahl in einer Zeile 12 ergibt </ h2 > < div class = \"row\" > < div class = \"col-3\" style = \"background-color: lightgrey;\" > < h3 > col-3 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-3 </ code > zugewiesen </ p > </ div > < div class = \"col-4\" style = \"background-color: darkgrey;\" > < h3 > col-4 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-4 </ code > zugewiesen </ p > </ div > < div class = \"col-5\" style = \"background-color: grey;\" > < h3 > col-5 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-5 </ code > zugewiesen </ p > </ div > </ div > </ main > </ body > </ html > bootstrap responsive <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Grid </ title > < style > div div { padding : 10 px ; margin-top : 5 px ; margin-bottom : 5 px ; } . row div : nth-child ( odd ) { background-color : lightgrey ; color : black ; } . row div : nth-child ( even ) { background-color : grey ; color : white ; } </ style > </ head > < body > < main class = \"container pt-5 \" > < h2 > Jetzt resonsiv - \u00e4ndern Sie die Monitorbreite </ h2 > < div class = \"row\" > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 1/3 </ li > < li > lg: < code > col-lg-3 </ code > 1/4 </ li > < li > xl: < code > col-xl-2 </ code > 1/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 2/3 </ li > < li > lg: < code > col-lg-3 </ code > 2/4 </ li > < li > xl: < code > col-xl-2 </ code > 2/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 3/3 </ li > < li > lg: < code > col-lg-3 </ code > 3/4 </ li > < li > xl: < code > col-xl-2 </ code > 3/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 1/3 </ li > < li > lg: < code > col-lg-3 </ code > 4/4 </ li > < li > xl: < code > col-xl-2 </ code > 4/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 2/3 </ li > < li > lg: < code > col-lg-6 </ code > 1/2 </ li > < li > xl: < code > col-xl-2 </ code > 5/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 3/3 </ li > < li > lg: < code > col-lg-6 </ code > 2/2 </ li > < li > xl: < code > col-xl-2 </ code > 6/6 </ li > </ ul > </ div > </ div > </ main > </ body > </ html > Links zu Bootstrap CDN Download","title":"Code aus der Vorlesung"},{"location":"#semesteraufgabe","text":"Am Ende des Kurses geben Sie eine Webanwendung ab. Diese wird bewertet und bildet die Modulnote f\u00fcr \"WebTech\" (es gibt also keine Klausur o.\u00e4.). \u00dcberlegen Sie sich fr\u00fch, was Sie implementieren wollen. Ihrer Kreativit\u00e4t sind keine Grenzen gesetzt. Es k\u00f6nnen 2 Studentinnen gemeinsam ein Projekt durchf\u00fchren und abgeben. Sie erhalten dann (h\u00f6chstwahrscheinlich) die gleiche Note. Es muss an den Commits erkennbar sein, welchen Anteil am Ergebnis jede der beiden Studentinnen hatte. Mindestanforderungen Folgende Anforderungen werden an Ihr Projekt gestellt: das Frontend soll mit Angular entwickelt werden, das Backend mit Node.js, es soll eine Datenbank (MongoDB, kann aber auch MySQL oder PostgreSQL oder MariaDB - aber nicht Firebase) verwendet werden, es soll CRUD implementiert sein, d.h. Sie ben\u00f6tigen eine Komponente zur Erstellung und Speicherung eines Datenbankeintrages ( C reate), eine Komponente zur \u00c4nderung eines Datenbankeintrages ( U pdate), eine Komponente zur Anzeige aller Datenbankeintr\u00e4ge ( R ead), eine Komponente zum L\u00f6schen eines Datenbankeintrages ( D elete). wenn Sie die Anwendung alleine umsetzen, dann gen\u00fcgen 3 der 4 CRUD-Funktionalit\u00e4ten wenn Sie die Anwendung zu zweit entwickeln, dann sollen alle 4 CRUD-Funktionalit\u00e4ten umgesetzt werden und Login (Username + Passwort) und ich schaue mir die Commit-Hiostorie im Git genauer an, um sicherzugehen, dass beide Studentinnen gleich viel an der Anwendung mitentwickelt haben Datenbankeintr\u00e4ge k\u00f6nnen B\u00fccher, CDs, ToDos, Einkaufslisten, Vorlesungen, K\u00fchlschrankinhalte usw. sein - wie gesagt, Ihrer Kreativit\u00e4t sind keine Grenzen gesetzt. Die Anwendung soll in einem Git-Dienst (GitHub, GitLab, ...) verf\u00fcgbar sein. Verwenden Sie ein CSS-Framework, wie z.B. Materialize, Bootstrap o.\u00e4.! Ihre Anwendung soll \"modern\" aussehen und responsive sein. Erstellen Sie eine informative (ausf\u00fchrliche) README -Datei ( README.md ). Diese Datei sollte beinhalten: Eine Beschreibung Ihrer Anwendung. Am besten mit Screenshots, so dass sie Ihren Kommilitoninnen aus den n\u00e4chsten Jahren hilft, ein Verst\u00e4ndnis daf\u00fcr zu entwickeln, was m\u00f6gliche Semesteraufgaben sein k\u00f6nnen. Eine Anleitung zur Installation Ihrer Anwendung. Super w\u00e4re es, wenn Sie die Datenbank, die Sie verwenden, per Skript vorausf\u00fcllen, d.h. es w\u00e4re sch\u00f6n, wenn zum Testen der Anwendung nur das Frontend und das Backend gestartet werden m\u00fcssten und alles andere automatisch passieren w\u00fcrde. Super w\u00e4re es auch, wenn Sie Ihre Anwendung deployen w\u00fcrden. Nach Abgabe vereinbaren wir ein Online-Meeting, in dem Sie mir Ihre Anwendung nochmal zeigen k\u00f6nnen und ich Ihnen Fragen zu Ihrem Code stellen werde. Ist keine Pr\u00fcfung, sondern eher ein fachliches Gespr\u00e4ch.","title":"Semesteraufgabe"},{"location":"#abgabe-und-gesprachstermine","text":"Die L\u00f6sung f\u00fcr die Semesteraufgabe pushen Sie in Ihr Respository. In einem Gespr\u00e4ch f\u00fchren Sie die L\u00f6sung vor und wir unterhalten uns \u00fcber Ihre L\u00f6sung. Daf\u00fcr stehen verschiedene Termine zur Verf\u00fcgung. Pr\u00fcfungszeitraum: 20.2. Abgabe und 21.2. Gespr\u00e4ch P\u00fcfungszeitraum: 27.3. Abgabe und 28.3. Gespr\u00e4ch Bitte tragen Sie sich in Moodle in den von Ihnen gew\u00fcnschten Gespr\u00e4chstermin ein! Wenn Sie im 1.PZ abgeben, tragen Sie sich im LSF zum ersten PZ zur Pr\u00fcfung ein, ansonsten im 2.PZ.","title":"Abgabe- und Gespr\u00e4chstermine"},{"location":"#einige-beispiele","text":"","title":"Einige Beispiele"},{"location":"#mieter-und-zahlungsinformationen-verwalten","text":"","title":"Mieter- und Zahlungsinformationen verwalten"},{"location":"#todo-liste","text":"","title":"ToDo-Liste"},{"location":"#dog-o-mat","text":"","title":"Dog-O-Mat"},{"location":"#reiseplaner","text":"","title":"Reiseplaner"},{"location":"angular/","text":"Angular \u00b6 Angular geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . In einer Single-Page-Applikation wird eine Seite vom Webserver geladen und diese Seite durch unterschiedliche Inhalte bef\u00fcllt, je nach Nutzerinteraktion. Diese Inhalte werden in Angular durch sogenannte Komponenten bereitgestellt. Komponenten sind die Grundbausteine einer Angular-Anwendung. Das erste Release von Angular erschien 2010 (damals noch unter dem Namen AngularJS, ab Version 2 nur noch Angular). React und Vue kamen 2013 bzw. 2014 erstmalig heraus. Angular wird haupts\u00e4chlich von Google, React haupts\u00e4chlich von Facebook und Vue als Community-Version entwickelt. Alle drei Frameworks stehen unter MIT-Lizent . Neben HTML und CSS verwendet Angular TypeScript . TypeScript ist eine Obermenge von JavaScript. Das bedeutet, dass jeder JavaScript-Code auch TypeScript ist, aber nicht umgekehrt. TypeScript-Code wird compiliert und erzeugt JavaScript-Code, der vom Browser ausgef\u00fchrt werden kann. Im Gegensatz zu JavaScript ist TypeScript typsicher und klar objektorientiert. Erstes Projekt erstellen \u00b6 Eine Angularanwendung besteht haupts\u00e4chlich aus Komponenten und Services. Um die Anwendung selbst sowie Komponenten und Services zu erstellen, wird am besten das Command Line Interface for Angular (Angular CLI) verwendet. \u00d6ffnen Sie ein Terminal (Windows-Nutzerinnen sollten die Git-Bash verwenden, die Sie bereits mit Git installiert haben). Wechseln Sie im Terminal in das Verzeichnis, das Ihre Projekte enthalten soll. F\u00fcr das Wechseln in andere Verzeichnisse nutzen Sie den cd Befehl (change directory). Um die Anwendung \"first\" zu erzeugen, geben Sie folgenden Befehl in das Terminal ein: ng new first ng steht f\u00fcr Angular. Mit dem Attribut new geben Sie an, dass Sie ein neues Projekt erzeugen wollen. first ist der Name des Projektes. Wenn Sie gefragt werden, ob Sie Angular routing verwenden m\u00f6chten, geben Sie ein y ein. Wenn Sie nach dem stylesheet format gefragt werden, k\u00f6nnen Sie CSS einfach mit Enter best\u00e4tigen. Wenn alles geklappt hat, erhalten Sie im Terminal eine Ausgabe in der Form: Es entsteht ein Ordner first in Ihrem Projekte-Verzeichnis. Wechseln Sie in dieses Verzeichnis: cd first F\u00fchren Sie darin den Befehl: npm install aus. Damit werden alle Abh\u00e4ngigkeiten, die in der Datei package.json definiert sind, geladen und das node_modules -Verzeichnis erstellt. Siehe z.B. hier . Wenn Sie Ihr Projekt mit git verwalten, dann ist es ratsam, das node_modules -Verzeichnis von der git -Verwaltung auszuschlie\u00dfen. Es wird ja immer durch npm install erstellt. F\u00fcgen Sie dazu in Ihre .gitignore die Zeile node_modules/** ein. Dann werden alle Inhalte aller node_modules -Verzeichnisse in Ihrem Repository ignoriert. Danach geben Sie ng serve ein. Es werden die entsprechenden TypeScript-Dateien compiliert und es erscheint am Ende eine Ausgabe, wie z.B. \u2714 Browser application bundle generation complete. Initial Chunk Files | Names | Size vendor.js | vendor | 2 .10 MB polyfills.js | polyfills | 339 .54 kB styles.css, styles.js | styles | 212 .38 kB main.js | main | 55 .22 kB runtime.js | runtime | 6 .85 kB | Initial Total | 2 .70 MB Build at: 2021 -11-15T09:35:55.434Z - Hash: 05483fb355731569 - Time: 10730ms ** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ ** \u2714 Compiled successfully. Sie m\u00fcssen jetzt immer compileren! Wenn Sie aber einmal ng serve ausgef\u00fchrt haben, wird im Browser automatisch auf die \u00c4nderungen reagiert. Sie m\u00fcssen also nicht jedes Mal neu ng serve eingeben, bzw. nicht jedes Mal neu auf das gr\u00fcne Dreieck in Ihrer IDE klicken: \u00d6ffnen Sie Ihren Browser und geben Sie als URL http://localhost:4200 ein. Folgende Seite sollte erscheinen: Success Fertig! Sie haben Ihr erstes Angular-Projekt erstellt. Angular-Projektstruktur \u00b6 \u00d6ffnen Sie die IDE Ihrer Wahl (Screenshots hier mit [PhpStorm] ( https://www.jetbrains.com/de-de/phpstorm/ ). W\u00e4hlen Sie unter Open Project den Projektordner first . Klappen Sie das Projekt first auf, klappen Sie den Ordner src und dann den Ordner app auf. Der Projektexplorer zeigt folgendes Bild: Die meiste Arbeit wird im src -Ordner erledigt. Darin befindet sich (wird sich befinden) der Code unserer Anwendung. Darin der wichtigste Ordner ist der app -Ordner. Hier werden wir unsere Module, Komponenten und Services hinzuf\u00fcgen. In dem assets -Ordner werden Bilder, Icons und Daten abgelegt. Der node_modules -Ordner enth\u00e4lt alle ben\u00f6tigten 3 rd -party-libraries. Welche das sind, wird in der Datei package.json als dependencies definiert. Mithilfe des Befehls npm install werden alle ben\u00f6tigten Module dem Ordner node_modules hinzugef\u00fcgt. Der Ordner environments enth\u00e4lt die notwendigen Konfigurationsinformationen f\u00fcr den development - und den production -Modus. Wir entwickeln zun\u00e4chst im development -Modus. favicon.ico ist das Favicon - ein kleines Icon, das im Reiter erscheint. W\u00e4hlen Sie am besten ein eigenes. index.html ist die Hauptseite. Mithilfe von Angular entwickeln wir eine Single Page Application , d.h. es wird eine einzige HTML-Seite geladen ( index.html ) und jeder weitere Inhalt wird asynchron hinzugef\u00fcgt. styles.css enth\u00e4lt die globalen Stylesheets, d.h. die CSS-Eigenschaften, die f\u00fcr das gesamte Projekt gelten sollen. Die app.component.* -Dateien beschreiben die app-Komponente. Eine Komponente besteht aus einer HTML -, einer CSS - und einer TypeScript -Datei (auch noch eine *.spec.ts , aber die interessiert zun\u00e4chst nicht). \u00d6ffnen Sie in Ihrer IDE die Datei app.component.html . L\u00f6schen Sie den kompletten Inhalt und lassen nur noch <router-outlet></router-outlet> . F\u00fcgen Sie oberhalb von <router-outlet></router-outlet> die Zeile <h1>This is app</h1> ein. Gehen Sie wieder zum Browser und schauen sich den ge\u00f6ffneten Tab mit der URL localhost:4200 an. Es erscheint der folgende Inhalt: \u00d6ffnen Sie die app.component.css -Datei und geben Sie dort h1 { color : red ; } Nach den \u00c4nderungen in app.component.css erscheint der Text der \u00dcberschrift in rot: Zusammenfassung Wir haben die die app.component.html ge\u00e4ndert, um den Inhalt der dargestellten Seite anzupassen und die app.component.css , um \u00c4nderungen an der Darstellung (dem Stil) des Inhalts durchzuf\u00fchren. Single Page Application \u00b6 Wenn wir eine Anwendung mit Angular erstellen, dann handelt es sich dabei um eine sogenannte Single Page Application (SPA) , d.h. es wird genau eine Seite vom Webserver geladen und alle Inhalte werden in diese Seite (nach-)geladen, je nach Nutzerinteraktion. Die hier geladene Seite ist die index.html , die in unserem Projekte-Ordner frontend liegt. Sie sieht so aus: index.html <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Frontend </ title > < base href = \"/\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" type = \"image/x-icon\" href = \"favicon.ico\" > </ head > < body > < app-root ></ app-root > </ body > </ html > Das Element <app-root> ist dabei ein sogenannter Tag-Selektor (auch Element-Selektor oder Komponenten-Selektor ). Prefix \u00e4ndern - optional \u00b6 app ist dabei ein Prefix, der f\u00fcr die gesamte Anwendung gilt. Diesen Prefix k\u00f6nnen Sie \u00e4ndern. Im folgenden ist beschrieben, wie Sie ihn von app auf htw \u00e4ndern. \u00d6ffnen Sie dazu die Datei angular.json , die sich im Projekt-Ordner frontend befindet. Diese Datei enth\u00e4lt die zentrale Konfiguration Ihres Projektes. Sie sieht wie folgt aus (Ausschnitt): angular.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"$schema\" : \"./node_modules/@angular/cli/lib/config/schema.json\" , \"version\" : 1 , \"newProjectRoot\" : \"projects\" , \"projects\" : { \"frontend\" : { \"projectType\" : \"application\" , \"schematics\" : {}, \"root\" : \"\" , \"sourceRoot\" : \"src\" , \"prefix\" : \"app\" , \"architect\" : { \"build\" : { \"builder\" : \"@angular-devkit/build-angular:browser\" , \"options\" : { \"outputPath\" : \"dist/frontend\" , \"index\" : \"src/index.html\" , \u00c4ndern Sie den Prefix in der hell markierten Zeile auf z.B. \"htw\" (oder Ihre Initialen vielleicht). In der index.html und in der app.component.ts auch noch \u00e4ndern. Ab dann ist die Verwendung von \"htw\" als Prefix einegrichtet. Sie k\u00f6nnen es aber auch bei \"app\" belassen. Es soll an dieser Stelle einem besseren Verst\u00e4ndnis des Prinzips dienen. index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Frontend </ title > < base href = \"/\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" type = \"image/x-icon\" href = \"favicon.ico\" > </ head > < body > < htw-root ></ htw-root > </ body > </ html > app/app.component.ts 1 2 3 4 5 6 7 8 9 import { Component } from '@angular/core' ; @ Component ({ selector : 'htw-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { title = 'frontend' ; } Komponenten-Selektoren \u00b6 Nochmal zur\u00fcck zu unserer index.html - der single page, die vom Webserver geladen wird und in die alle weiteren Komponenten eingebunden werden. Wir haben dort nun also den Komponenten-Selektor <htw-root></htw-root> . In diesen Selektor wird nun dir root -Komponente ( app.component ) geladen. Dieser Selektor wird durch die root -Komponente ersetzt. Das ist unsere app/app.component.* . Eine solche Komponente besteht immer aus einer css -, einer html - und einer ts -Datei. Es wird also in diesen Komponenten-Selektor der HTML-Code der app.component.html eingebunden. Das sehen Sie auch, wenn Sie die Developer-Tools an Ihrem Browser \u00f6ffnen und sich den Quellcode der aktuellen Anwendung anschauen: Komponenten \u00b6 Eine Angular-Anwendung besteht haupts\u00e4chlich aus Komponenten . Jede Anwendung hat eine Hauptkomponente - die sogenannte Root Component. Diese Hauptkomponente ist meistens die AppComponent . Eine Komponente hat eine in sich geschlossene Bedeutung, z.B. ein Formular f\u00fcr Dateneingabe, eine Liste aller Daten oder auch nur ein bestimmtes Element. Eine Komponente besteht aus einer View ( Template ) und einer TypeScript-Klasse. Die AppComponent besteht z.B. aus der app.component.html (der View) und der app.component.ts (der TypeScript-Klasse). Die TypeScript-Klasse k\u00fcmmert sich um die Verwaltung der Daten, die in der View dargestellt und/oder durch Eingaben erzeugt werden. Die TypeScript-Klasse beschreibt die Logik der Komponente. Die View ist der dargestellte Bereich der Komponente, also das, was man im Browser von der Komponente sieht. Neben der *.html - und der *.ts -Datei einer Komponente gibt es auch noch die *.css -Datei (also z.B. app.component.css ). Diese enth\u00e4lt CSS-Eigenschaften, die speziell f\u00fcr die Komponente gelten sollen. Um eine Komponente der gesamten Anwendung als Komponente bekannt zu machen, wird der Decorator @Component verwendet. Decoratoren erkennt man am f\u00fchrenden @ -Zeichen. Sie werden verwendet, um Metadaten der Anwendung zu verwalten. Der typische Aufbau einer Komponente (hier AppComponent - app.component.ts ): import { Component } from '@angular/core' ; @ Component ({ selector : 'htw-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { title = 'first' ; } Der Selektor gibt an, dass \u00fcberall dort, wo htw-root als Elementselektor <htw-root> </htw-root> verwendet wird, das in app.component.html definerte Template eingesetzt wird. Angenommen, in app.component.html ist der HTML-Code: < h1 > This is app </ h1 > definiert. Dann wird dieser Code als Inhalt in das HTML-Element <htw-root> </htw-root> eingesetzt: < htw-root > < h1 > This is app </ h1 > </ htw-root > Wir schauen uns ein ausf\u00fchrlicheres Beispiel im Folgenden an, in dem wir eine neue Komponente erzeugen. Eine neue Komponente erzeugen \u00b6 Mithilfe von Angular-CLI erzeugen wir in unserer App first eine neue Komponente header . Wir wechseln dazu im Terminal in den Ordner von first und geben dann ng generate component header ein. Sp\u00e4ter k\u00fcrzen wir solche Eingaben ab. Anstelle von generate brauchen wir auch nur g zu schreiben. Und anstelle von component gen\u00fcgt c . Das hei\u00dft, wir h\u00e4tten stattdessen auch ng g c header schreiben k\u00f6nnen. In unserer first App gibt es nun die Komponente header : Jede Angular-Komponente besteht aus vier Teilen: der TypeScript-Klasse (die *.component.ts -Datei) dem Template (die *.component.html -Datei) den Styles (die *.component.css -Datei) einer Testspezifikation (die *.component.spec.ts -Datei) Jede Komponente wird in der app.module.ts der gesamten Anwendung bekannt gemacht. Das erfolgt mithilfe der Eigenschaft declarations im Decorator @NgModule() : import { NgModule } from '@angular/core' ; import { BrowserModule } from '@angular/platform-browser' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { HeaderComponent } from './header/header.component' ; @ NgModule ({ declarations : [ AppComponent , HeaderComponent ], imports : [ BrowserModule , AppRoutingModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Das obige Listing zeigt, dass die neue Komponente header registriert wurde. Um dieses Eintragen in die app.module.ts m\u00fcssen wir uns aber nicht k\u00fcmmern, das erledigt die Angular-CLI mit der Anweisung zur Erstellung einer neuen Komponente ng generate component newComponent . Doppelklicken Sie im Projektexplorer Ihrer IDE auf die Datei header.component.ts , um sie zu \u00f6ffnen. Sie enth\u00e4lt den folgenden Quelltext: import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'htw-header' , templateUrl : './header.component.html' , styleUrls : [ './header.component.css' ] }) export class HeaderComponent implements OnInit { constructor () { } ngOnInit () : void { } } Wir \u00e4ndern diese Datei zun\u00e4chst nicht und \u00f6ffnen auch noch die header.component.html . Diese enth\u00e4lt nur ein HTML-Element, einen Absatz: < p > header works! </ p > Wir \u00e4ndern auch diese Datei zun\u00e4chst nicht und \u00f6ffnen die app.component.html - die HTML-Datei unserer Root-Komponente. Diese sieht derzeit so aus: < h1 > This is app </ h1 > < router-outlet ></ router-outlet > Wir f\u00fcgen in die Datei den Selektor htw-header unserer neuen header -Komponente als HTML-Element ein: < htw-header ></ htw-header > < h1 > This is app </ h1 > < router-outlet ></ router-outlet > Dieses Element dient als \"Platzhalter\" f\u00fcr das Template unserer neuen Komponente. Das bedeutet, dass in dieses Element der HTML-Code aus header.component.html eingef\u00fcgt wird. Wechseln Sie in den Browser auf den Tab mit Ihrer Anwendung ( http://localhost:4200/ ). Sie sehen folgendes Bild: Oberhalb der \u00dcberschrift ( <h1>This is app</h1> ) wurde also der Absatz <p>header works!</p> eingef\u00fcgt. Wenn Sie sich den Quelltext Ihrer Seite anschauen, z.B. \u00fcber die Entwicklertools Ihres Browsers ( z.B. f\u00fcr Chrome ), dann wird folgender Code sichtbar: Wir k\u00f6nnen hier die Attribute der HTML-Elemente vernachl\u00e4ssigen (also z.B. _nghost-aiq-c17 oder ng-version=\"13.0.1\" ). Aber es wird folgende HTML-Struktur sichtbar: < htw-root > < htw-header > < p > header works! </ p > </ htw-header > < h1 > This is app </ h1 > < router-outlet ></ router-outlet > </ htw-root > Das Element <htw-root> fungiert als Platzhalter f\u00fcr die gesamte App. In dieses Element wird der gesamte Inhalt der Anwendung eingebunden (siehe app.component.html ). Dies ist hier zun\u00e4chst eine \u00dcberschrift <h1> , die von dem Element f\u00fcr die header -Komponente gefolgt wird. Das bedeutet, dass in das Element <htw-header> der Inhalt der Komponente header eingebunden wird. Das ist hier nur ein Absatz <p> (siehe dazu header.component.html ). Das Element <router-outlet> soll uns an dieser Stelle noch nicht interessieren. Das wird erst interessant, wenn wir \u00fcber das Routing in einer Angular-Anwendung sprechen. Zur weiteren \u00dcbung erzeugen wir uns noch weitere Komponenten. Zun\u00e4chst eine Komponenten zur Navigation nav : ng g c nav UM deutlich zu machen, dass sich die CSS-Definitionen f\u00fcr eine Komponente stets nur auf die Komponente beziehen, \u00e4ndern wir die nav.component.css : nav.component.css p { background-color : grey ; color : white ; padding : 1 % ; padding-left : 2 % ; } Wir binden die nav -Komponente in die app.component.html ein: app.component.html < htw-header ></ htw-header > < htw-nav ></ htw-nav > < h1 > This is app </ h1 > < router-outlet > </ router-outlet > und erhalten folgende Seite: Durch das Einbinden von Komponenten in andere Komponenten ensteht eine Hierarchie der Komponenten, z.B. ist die app -Komponent in unserem bisherigen Beispiel die Elternkomponente der header - und nav -Komponenten. Das hei\u00dft, header und nav sind Kindkomponenten von app . Um dies zu verdeutlichen, erstellen wir noch eine weitere Komponente main und daf\u00fcr explizit zwei Kindkomponenten left und right : ng g c main ng g c main/left ng g c main/right Beachten Sie, dass die left - und die right -Komponente hier explizit als Kindkomponenten von main erstellt werden. Wir binden die main -Komponente in die app -Komponente ein und die Komponenten left und right in die main -Komponente: app.component.html main.component.html main.component.css < htw-header ></ htw-header > < htw-nav ></ htw-nav > < h1 > This is app </ h1 > < htw-main ></ htw-main > < router-outlet ></ router-outlet > < div id = \"main\" > < h3 > main works! </ h3 > < div id = \"row\" > < div id = \"left\" > < htw-left > </ htw-left > </ div > < div id = \"right\" > < htw-right > </ htw-right > </ div > </ div > </ div > # main { background-color : rgb ( 226 , 243 , 188 ); height : 200 px ; padding : 1 % ; } # row { display : flex ; } # left { float : left ; background-color : rgb ( 235 , 235 , 240 ); } # right { background-color : rgb ( 191 , 191 , 243 ); } Deployment des Projektes \u00b6 Wir werden uns im weiteren Verlauf immer wieder anschauen, was zu beachten ist, damit ein Angular-Projekt deployed , d.h. ausgeliefert werden kann. Derzeit m\u00fcssen wir ein Projekt stets mit ng serve starten und schauen uns dabei jeweils den gegenw\u00e4rtigen Entwicklungsstatus des Projektes an. Irgendwann ist das Projekt aber \"fertig\" und soll ausgeliefert werden. Das prinzipielle Vorgehen daf\u00fcr besteht aus zwei Schritten. Der erste Schritt wird als Vorbereitung des Deployments ausgef\u00fchrt. Er besteht darin, das Projekt zu deployen , dabei auf eventuelle Fehler zu achten und gleichzeitig das deployed Projekt auszuf\u00fchren und zu \"beobachten\". Dazu werden zwei Terminals verwendet. Im ersten Terminal geben Sie im Projektordner (hier first ) ng build --watch ein. Damit wird das Projekt deployed, wird aber gleichzeitig \u00fcberwacht, d.h. alle Aktionen auf der Webanwendung werden angezeigt und auch eventuell auftretende Fehler. Dieses Terminal muss w\u00e4hrend der Anwendung der Webanwendung also gut \u00fcberwacht werden. Im zeiten Terminal starten Sie die Anwendung, indem Sie einen Webserver aufrufen, z.B. lite-server : lite-server --baseDir=\"dist/first\" Es \u00f6ffnet sich die Webenawendung (oder Sie m\u00fcssen Sie auf localhost:3000 \u00f6ffnen) und Sie k\u00f6nnen die Webanwendung ausprobieren. Eventuelle Fehler werden im ersten Terminal angezeigt. Grunds\u00e4tzlich ist es so, dass die Webanwendung durch das Deployment in einen dist -Ordner ausgeliefert wird. Der dist -Ordner des first -Projektes sieht nach dem Deployment ungef\u00e4hr so aus: Die Nummern in den Dateinamen werden bei Ihnen anders sein. Dieser Ordner kann auf Ihren Webserver kopiert werden und dann ist die Webanwendung dort ausf\u00fchrbar. Wenn Sie alle Fehler behoben haben und sich die Webanwendung korrekt verh\u00e4lt, dann k\u00f6nnen Sie den zweiten Schritt ausf\u00fchren: ng build Diese Anwendung erzeugt (genau wie ng build --watch ) den dist -Ordner. Den darin befindlichen Ordner (hier: first ) k\u00f6nnen Sie z.B. auf den Webserver kopieren und von dort die first/index.html aufrufen (bzw. Sie benennen den first -Ordner dort um). Beachten Sie, dass Sie in der index.html die Basis-Refereferenz-URL anpassen m\u00fcssen, also den Eintrag <base href=\"/\"> anpassen. In meinem Fall ist es z.B. so, dass in meinem DocumentRoot folgende Ordnerstruktur existiert: /WT21/Angular/first/dist/first/ . Das hei\u00dft, mein Eintrag in der index.html muss dann lauten: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > First </ title > < base href = \"/WT21/Angular/first/dist/first/\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" type = \"image/x-icon\" href = \"favicon.ico\" > < link rel = \"stylesheet\" href = \"styles.ef46db3751d8e999.css\" > </ head > < body > < htw-root ></ htw-root > < script src = \"runtime.efa9df03510e8bc1.js\" type = \"module\" ></ script > < script src = \"polyfills.e477a8328a76bdd4.js\" type = \"module\" ></ script > < script src = \"main.22d2c12b99bb6467.js\" type = \"module\" ></ script > </ body > </ html > Um die Basis-Refereferenz-URL nicht nachtr\u00e4glich anpassen zu m\u00fcssen, k\u00f6nnen Sie auch gleich ng build --base-href=/WT21/Angular/first/dist/first/ angeben. Lifecycle-Hooks \u00b6 Komponenten durchlaufen einen festen Lebenszyklus ( lifecycle ). Die verschiedenen Status rufen dabei jeweils eine Methode auf, die wir jeweils implementieren k\u00f6nnen, um in den jeweiligen Status des Lebenszyklus eingreifen zu k\u00f6nnen. Man spricht dabei von sogenannten Lifecycle-Hooks . Der wohl bekannteste Lifecycle-Hook ist ngOnInit() . Damit greift man in die Initialisierung der Komponente ein. Typischerweise werden z.B. Eingabewerte initialisiert, die im Template dargestellt werden. Noch vor ngOnInit wird jedoch ngOnChange() aufgerufen. N\u00e4mlich genau dann, wenn die Eingabewerte gesetzt bzw. ge\u00e4ndert werden. F\u00fcr weiterf\u00fchrende Informationen sei https://angular.io/guide/lifecycle-hooks empfohlen. Services \u00b6 Ein Service ist eine Klasse f\u00fcr einen konkreten Zweck. Services unterscheiden sich von Komponenten dahingehend, dass eine Komponente f\u00fcr die Nutzerinteraktion zust\u00e4ndig ist, eine Komponente Eigenschaften (Daten) pr\u00e4sentiert, eine Komponente Methoden zur Datenbindung ( data binding ) zur Verf\u00fcgung stellt, um zwischen View und Anwendungslogik zu vermitteln. Ein Service erf\u00fcllt eine konkrete Aufgabe, typischerweise mit Daten, ohne sich um die Darstellung der Daten zu k\u00fcmmern. Typische Aufgaben eines Services sind: Daten vom Server holen oder auf den Server laden, Nutzereingaben zu validieren. Ein Service steht typischerweise allen Komponenten zur Verf\u00fcgung (aber nicht jede Komponente muss einen Service nutzen). Ein Service ist eine Klasse mit dem Decorator @Injectable() . Services enthalten Anwendungslogik, die aus Komponenten ausgelagert werden kann. Ein Service my kann mittels CLI so erzeugt werden: ng generate service shared/my Es entsteht im src/app/shared -Ordner eine Datei my.service.ts . Services sollten am besten in dem shared -Ordner erstellt werden, da ein Service von allen Komponenten genutzt werden kann (eine andere M\u00f6glichkeit w\u00e4re, einen eigenen Ordner services zu erstellen). In dem Decorator @Injectable() wird mittels providedIn: root angegeben, dass der Service von allen Komponenten innerhalb des Root-Moduls genutzt werden kann. Ist der Service von anderen Services oder Komponenten abh\u00e4ngig, k\u00f6nnen diese Services oder Komponenten mittels dependency injection als Parameter des Service-Konstruktor eingebunden werden. Hier ein allgemeines Beispiel eines Services MyService : my.service.ts 1 2 3 4 5 6 7 8 9 10 import { Injectable } from '@angular/core' ; @ Injectable ({ providedIn : 'root' }) export class MyService { constructor ( private myDependency : MyDependency ) { } } Der Service kann dann mittels dependency injection von einer Komponente verwendet werden. Beispiel: example.component.ts import { Component , OnInit } from '@angular/core' ; import { MyService } from './shared/my.service' ; @ Component ({ selector : 'app-example' , templateUrl : './example.component.html' , styleUrls : [ './example.component.css' ] }) export class ExampleComponent implements OnInit { constructor ( private myService : MyService ) { } ngOnInit () : void { this . example . methodOfMyService (); } } F\u00fcr ein Beispiel einer Service-Definition und der Verwendung eines Services siehe BookStoreService . F\u00fcr weiterf\u00fchrende Informationen siehe https://angular.io/guide/architecture-services . Routing \u00b6 Routing ist ein wesentliches Konzept f\u00fcr die Entwicklung von Single-Page-Applikationen (SPA). Bei Single-Page-Applikationen wird genau eine Seite vom Webserver geladen (typischerweise die index.html und alle weiteren, sich \u00e4ndernden, Inhalte und Sichten werden in diese Seite nachgeladen). Das f\u00fchrt zun\u00e4chst auch dazu, dass es f\u00fcr die Seite genau eine URL gibt, um auf sie zuzugreifen (z.B. http://www.mydomain.de bzw. http://www.mydomain.de/index.html ). M\u00f6chte man aber Komponenten direkt in der URL ansprechen, z.B. http://www.mydomain.de/login f\u00fcr die Login-Komponente, so ben\u00f6tigen wir das Routing von Angular. Wir betrachten hier ein Beispiel, das https://angular.io/guide/router entnommen ist und nur leicht abgewandelt wurde. Wir erstellen dazu zun\u00e4chst ein neues Projekt routing-lesson . ng new routing-lesson In der obigen Anweisung h\u00e4tte man auch bereits den Parameter --routing verwenden k\u00f6nnen, also: ng new routing-lesson --routing Macht man das nicht, werden Sie gefragt, ob Sie Routing verwenden wollen: ? Would you like to add Angular routing? [y|N] Antworten Sie mit y . Zur Demonstration des Routings werden wir zun\u00e4chst 2 weitere Komponenten erstellen: first und second . cd routing-lesson ng g c first ng g c second Wird ein Angular-Projekt mit Routing erstellt, so existiert die Datei app-routing.module.ts im src/app/ -Ordner. Diese Datei sieht urspr\u00fcnglich so aus: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; const routes : Routes = []; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } Bei dieser Klasse handelt es sich um ein eigenes Angular-Modul (als @NgModule dekoriert). Es wird deshalb auch in die app.module.ts integriert (dies geschieht automatisch, wenn wir Routing ausgew\u00e4hlt haben) - siehe Zeilen 4 und 17 im folgenden Listing: app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import { BrowserModule } from '@angular/platform-browser' ; import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; @ NgModule ({ declarations : [ AppComponent , FirstComponent , SecondComponent ], imports : [ BrowserModule , AppRoutingModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Das Array routes aus der Datei app-routing.module.ts enth\u00e4lt sp\u00e4ter die Pfadangaben zu den Komponenten - sogenannte Routen . Routen sind Objekte und wie folgt notiert: { path : 'mypath' , component : MyComponent } Diese Angabe bewirkt, dass unter der URL http://www.mydomain.de/mypath die Komponente MyComponent aufgerufen wird. Angenommen, wir wollen, dass unsere Komponente FirstComponent unter dem Pfad /first aufgerufen wird und SecondComponent unter dem Pfad /second , dann sieht unsere Datei app-routing.module.ts wie folgt aus: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; const routes : Routes = [ { path : 'first' , component : FirstComponent }, { path : 'second' , component : SecondComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } In den Zeilen 8 und 9 sind die beiden Routen definiert. Beachten Sie, dass die Pfadangaben ohne vorangestelltes Slash / erfolgen! Unter Verwendung der Selektoren <app-first> bzw. <app-second> k\u00f6nnten wir unsere Komponenten nun (statisch) in unsere Anwendung einbinden. Wollen wir das jedoch dem Routing \u00fcberlassen, die Komponenten also dynamisch - abh\u00e4ngig von dem jeweils gew\u00e4hlten Pfad - einbinden lassen, verwenden wir stattdessen den Selektor <router-outlet> . Auch dieser ist bei gew\u00e4hltem Routing bereits Teil des AppComponent -Templates: app.component.html <!-- hier wurde viel vom urspr\u00fcnglichen --> <!-- Template gel\u00f6scht --> < h1 > Hier ist AppComponent </ h1 > < router-outlet ></ router-outlet > Obiges Listing zeigt, dass das Template von AppComponent zun\u00e4chst eine <h1> -\u00dcberschrift vorsieht und dann folgt das <router-outlet> , welches als Platzhalter f\u00fcr die durch das Routing ausgew\u00e4hlten Komponenten agiert. Angenommen, wir definieren die Templates f+r FirstComponent und SecondComponent wie folgt: first.component.html second.component.html < h3 > Hier ist FirstComponent </ h3 > < h3 > Hier ist SecondComponent </ h3 > Starten wir nun unsere Anwendung, dann sehen wir zun\u00e4chst (URL: http://localhost:4200/ ) nur die View der AppComponent , n\u00e4mlich die <h1> -\u00dcberschrift. Der Platzhalter <router-outlet> bleibt leer, da keine der angegebenen Pfade aus der app-routing.module.ts angegeben wurde. Geben wir jedoch als URL http://localhost:4200/first ein, so wird das Template der FirstComponent in diesen Platzhalter geladen, n\u00e4mlich die <h3 -\u00dcberschrift Hier ist FirstComponent . Geben wir als URL stattdessen http://localhost:4200/second ein, so wird das Template der SecondComponent in den Platzhalter <router-outlet> geladen, n\u00e4mlich die <h3 -\u00dcberschrift Hier ist SecondComponent . Die folgende Abbildung zeigt die Views der drei F\u00e4lle: Wir haben nun Pfade erzeugt, mit denen man Komponenten direkt ansprechen kann. Im folgenden Abschnitt wird gezeigt, wie man diese Pfade in Hyperlinks nutzt. Routen verlinken \u00b6 Wir kennen nun die m\u00f6glichen Pfade unserer Anwendung http://localhost:4200/ , http://localhost:4200/first und http://localhost:4200/second und w\u00fcrden diese Adressen z.B. gerne in Hyperlinks verwenden, um direkt zu den Views der jeweiligen Komponente zu springen, z.B. so: app.component.html < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a href = \"/\" > home </ a > </ li > < li > < a href = \"/first\" > first </ a > </ li > < li > < a href = \"/second\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Das funktioniert auch, hat aber einen von uns nicht gewollten Effekt: Die Seite wird durch jeden Klick auf einen Hyperlink neu geladen. Das ist ja auch das gew\u00fcnschte Verhalten eines Hyperlinks. Die Idee einer Single-Page-Applikation ist aber jedoch die, dass die Seite nur genau einmal geladen wird und dann dynamisch alle weiteren Inhalte. Das Nachladen wird vermieden, wenn wir als Attribut f\u00fcr unsere Pfade nicht href verwenden, sondern die Angular-Direktive routerLink . Dies gilt nur f\u00fcr interne Links! Aber es verhindert bei internen Links ein Neuladen der Seite. app.component.html < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a routerLink = \"/\" > home </ a > </ li > < li > < a routerLink = \"/first\" > first </ a > </ li > < li > < a routerLink = \"/second\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Die obige Attributschreibweise kann auch durch property binding ersetzt werden. Dann \u00fcbergeben Sie als Wert aber keinen String sondern ein 1-elementiges Array: app.component.html < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a [ routerLink ]=\"['/']\" > home </ a > </ li > < li > < a [ routerLink ]=\"['/ first ']\" > first </ a > </ li > < li > < a [ routerLink ]=\"['/ second ']\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Die zweite Variante wird meistens dann verwendet, wenn an den Pfad noch dynamisch Werte \u00fcbergeben werden, sogenannte Parameter an den Routen. Parameter an Routen \u00b6 H\u00e4ufig sind die Pfadangaben nicht nur so statisch wie bisher, also /first bzw. /second , sondern es werden auch noch Werte, z.B. Session-IDs, Nutzer-IDs, B\u00fccher-ISBN usw. \u00fcbergeben. Dazu werden die Routen durch Parameter erweitert. Diese Parameter werden dann mit einem konkreten Wert bei Aufruf ersetzt. Die allgemeine Syntax f\u00fcr einen parametrisierten Pfad ist: { path : 'mypath/:id' , component : MyComponent } Der Doppelpunkt : ist zwingend, der Name des Parameters id ist frei w\u00e4hlbar. Die Werte f\u00fcr den Routenparameter k\u00f6nnen als routerLink wieder entweder als String \u00fcbergeben werden (Zeile 1 im folgenden Listing) oder per property binding als weiteres Array-Element (Zeile 2 im folgenden Listing). 1 2 < a routerLink = \"/mypath/4711\" > statischer Wert f\u00fcr id </ a > < a [ routerLink ]=\"['/ mypath ', myData . id ]\" > dynamischer Wert f\u00fcr id (aus JSON myData) </ a > Wir haben jetzt eine parametrisierten Pfad konfiguriert und wir haben auch betrachtet, wie der Aufruf einer solch parametrisierten Route erfolgen kann. Nun betrachten wir, wie der Wert eines Parameters in einer Komponentenklasse ausgelesen und verarbeitet werden kann. Wir f\u00fchren dazu zun\u00e4chst kleinere \u00c4nderungen an unserem obigen Beispiel der routing-lesson -App durch: app-routing.module.ts first.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; const routes : Routes = [ { path : 'first' , component : FirstComponent }, { path : 'first/:id' , component : FirstComponent }, { path : 'second' , component : SecondComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } 1 2 < h3 > Hier ist FirstComponent </ h3 > < p * ngIf = \"id\" > {{ id }} </ p > In app-routing.module.ts haben wir einen weiteren Pfad hinzugef\u00fcgt (Zeilennummer 8). Beachten Sie, dass ohne die Pfadkonfiguration in Zeilennummer 7 die Route http://localhost:4200/first (also ohne Parameterwert) nicht mehr existieren w\u00fcrde. Wenn ein Parameter erforderlich ist, dann muss er auch angegeben werden. Nur in Kombination der beiden Pfadkonfigurationen aus Zeilennummern 7 und 8 ist der Pfad sowohl mit als auch ohne Parameterwert m\u00f6glich. Im Template der FirstComponent haben wir einen Absatz eingef\u00fcgt, der als Inhalt den Wert der Eigenschaft id mittels Interpolation anzeigt. Der Absatz erscheint nur, wenn id auch einen Wert hat. Die Eigenschaft id muss allerdings noch in der first.component.ts angelegt werden: first.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { Component , OnInit } from '@angular/core' ; import { ActivatedRoute } from '@angular/router' ; @ Component ({ selector : 'app-first' , templateUrl : './first.component.html' , styleUrls : [ './first.component.css' ] }) export class FirstComponent implements OnInit { id : string ; constructor ( private route : ActivatedRoute ) { } ngOnInit () : void { this . id = this . route . snapshot . paramMap . get ( 'id' ); } } In der first.component.ts kommen verschiedene Sachen hinzu: es wird die Eigenschaft id deklariert (als string ) es wird der Service ActivatedRoute per dependency injection der Klasse FirstComponent injiziert \u2192 die Eigenschaft route ist vom Typ ActivatedRoute ActivatedRoute stellt uns Informationen \u00fcber den aktuellen Router (die aktuelle URL) zur Verf\u00fcgung \u2192 die Eigenschaft this.route.snapshot.paramMap enth\u00e4lt alle Parameter der aktuellen Route \u2192 mithilfe der Methode get() kann nach einem konkreten Parameter gefragt werden \u2192 wir fragen nach dem Parameter id , da wir so unseren Pfad konfiguriert haben (siehe oben app-routing.module.ts ) Wenn wir nun z.B. die URL http://localhost:4200/first/42 eingeben, dann erscheint im Browser der Wert des Parameters (als Inhalt des <p> -Elementes; siehe oben first.component.html ). Die aktuelle Implementierung von first.component.ts liest also w\u00e4hrend der Initialisierung der Komponente die Routenparameter aus. Finden jedoch am Parameterwert \u00c4nderungen statt, ohne dass die Komponente neu initialisiert wird, bekommt die Komponente von den \u00c4nderungen nichts mit. Die oben gezeigte Form der Implementierung ist deshalb nicht f\u00fcr alle F\u00e4lle geeignet. Vielmehr ist es besser auszunutzen, dass es sich bei this.route.paramMap (ohne snapshot ) um ein Observable handelt. Ein Observable kann so verstanden werden, dass er permanent eine bestimmte Sache beobachtet (z.B. ist der EventEmitter ein Observable und beobachtet permanent, ob das Ereignis ausgel\u00f6st wird; wenn ja, dann ruft EventEmitter die Funktion emit() auf \u2192 siehe Eigene Ereignisse ). Wenn sich etwas an dem beobachteten Objekt ge\u00e4ndert hat, dann reagiert Observable sofort und ruft eine bestimmte Funktion auf. Das Observable paramMap beobachtet permanent die aktuelle Route und sobald sich etwas an dieser Route \u00e4ndert, wird eine Funktion aufgerufen. Damit das Observable aber \u00fcberhaupt den aktuellen Router permanent beobachtet, muss er an den Router angemeldet werden \u2192 das Observable \"abboniert\" den Router. Dies geschieht mithilfe der Funktion subscribe() . Dieser Funktion kann als Parameter eine Funktion \u00fcbergeben werden. Diese Funktion wird aufgerufen, sobald sich am aktuellen Router etwas \u00e4ndert. Wir \u00e4ndern die Implementierung von ngOnInit() in der Klasse first.component.ts deshalb wie folgt: first.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { Component , OnInit } from '@angular/core' ; import { ActivatedRoute } from '@angular/router' ; @ Component ({ selector : 'app-first' , templateUrl : './first.component.html' , styleUrls : [ './first.component.css' ] }) export class FirstComponent implements OnInit { id : string ; constructor ( private route : ActivatedRoute ) { } ngOnInit () : void { this . route . paramMap . subscribe ( paramMap => this . id = paramMap . get ( 'id' ) ); } } Nun erh\u00e4lt die Eigenschaft id immer den aktuellsten Wert (und dieser wird aufgrund der Interpolation auch stets aktuell in der View dargestellt). Verschachtelte Routen \u00b6 Angenommen, wir haben zwei weitere Komponenten OneComponent und TwoComponent und beide Komponenten sind Kindkomponenten von der Elternkomponente FirstComponent . Das Verh\u00e4ltnis Eltern- Kindkomponente entsteht ja eigentlich dadurch, dass das Template der Elternkomponente den Selektor der Kindkomponente enth\u00e4lt. Das hei\u00dft in first.component.html gibt es sowohl ein <app-one></app-one> als auch ein <app-two></app-two> \u2192 dann sind One und Two Kindkomponenten von First . Wir wollen nun aber folgendes: die Route /first verweist auf die FirstComponent die Route /first/one verweist auf die FirstComponent und deren Kindkomponente OneComponent die Route /first/two verweist auf die FirstComponent und deren Kindkomponente TwoComponent Wir wollen also, dass auch die beiden Kindkomponenten mittels Routing in die Elternkomponente eingef\u00fcgt werden. Das erreichen wir mit 2 Anpassungen: in app-routing.module.ts kann im routes -Array auch noch die Eigenschaft children hinzugef\u00fcgt werden, welche Pfadkonfigurationen zu den Kindkomponenten enth\u00e4lt in der *.component.html der Elternkomponente wird ein weiteres <router-outlet></router-outlet> hinzugef\u00fcgt app-routing.module.ts first.component.html app.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import { Routes , RouterModule } from '@angular/router' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; import { OneComponent } from './first/one/one.component' ; import { TwoComponent } from './first/two/two.component' ; const routes : Routes = [ { path : 'first' , component : FirstComponent , children : [ { path : 'one' , component : OneComponent }, { path : 'two' , component : TwoComponent }, ]}, { path : 'first/:id' , component : FirstComponent }, { path : 'second' , component : SecondComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } 1 2 3 4 5 6 7 < h3 > Hier ist FirstComponent </ h3 > < ul > < li >< a [ routerLink ]=\"['/ first / one ']\" > first/one </ a ></ li > < li >< a [ routerLink ]=\"['/ first / two ']\" > first/two </ a ></ li > </ ul > < p * ngIf = \"id\" > {{ id }} </ p > < router-outlet ></ router-outlet > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a [ routerLink ]=\"['/']\" > home </ a > </ li > < li > < a [ routerLink ]=\"['/ first ']\" > first </ a > </ li > < li > < ul > < li >< a [ routerLink ]=\"['/ first / one ']\" > first/one </ a ></ li > < li >< a [ routerLink ]=\"['/ first / two ']\" > first/two </ a ></ li > </ ul > </ li > < li > < a [ routerLink ]=\"['/ second ']\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Das bedeutet, dass wir nun zwei <router-outlet></router-outlet> -Elemente haben. Eines in der app.component.html f\u00fcr die Routen first , first/:id und second und eines in der first.component.html f\u00fcr die Routen first/one und first/two . Styles f\u00fcr aktive Routen \u00b6 Sie k\u00f6nnen angeben, welche CSS-Klassen wirken sollen, falls eine Route aktiv ist. Eine Route ist aktiv, wenn Sie ausgew\u00e4hlt/angewendet werden kann. Dazu wurde in Angular das Attribut routerLinkActive eingef\u00fchrt. Angenommen, die CSS-Klasse myactiveclass soll Anwendung f\u00fcr eine aktuelle (aktive) Route /first Anwendung finden, dann definieren Sie: < a routerLink = \"/first\" routerLinkActive = \"myactiveclass\" > first </ a > Sie k\u00f6nnen auch mehrere CSS-Klassen definieren. Daf\u00fcr gibt es zwei verschiedene M\u00f6glichkeiten: < a routerLink = \"/first\" routerLinkActive = \"myactiveclass1 myactiveclass1\" > first </ a > < a routerLink = \"/first\" [ routerLinkActive ]=\"[' myactiveclass1 ', ' myactiveclass1 ']\" > first </ a > Das Styling aktiver Routen ist insbesondere f\u00fcr Navigationsleisten (Men\u00fcs) hilfreich. Routen im Programm wechseln \u00b6 Der Service Router stellt zwei Methoden zur Verf\u00fcgung, mit denen eine Route im Programm gewechselt werden kann, z.B. nach einer Nutzereingabe oder einer Nutzerinteraktion: navigate() navigateByUrl() Angenommen, wir erweitern unsere Komponente SecondComponent um einen Button. Durch den Klick auf den Button soll von der SecondComponent auf die OneComponent \u00fcber die Route /first/one gewechselt werden: second.component.html second.component.ts 1 2 < h3 > Hier ist SecondComponent </ h3 > < button ( click )=\" changeRoute ()\" > /first/one </ button > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { Component , OnInit } from '@angular/core' ; import { Router } from '@angular/router' ; @ Component ({ selector : 'app-second' , templateUrl : './second.component.html' , styleUrls : [ './second.component.css' ] }) export class SecondComponent implements OnInit { constructor ( private router : Router ) { } ngOnInit () : void { } changeRoute () { this . router . navigate ([ '/first' , 'one' ]); // oder // this.router.navigateByUrl('/first/one'); } } In der second.component.ts sehen wir in Zeile 11, dass der Service Router per dependency injection eingebunden wird. Der Eigenschaft router stehen die Methoden navigate() bzw. navigateByUrl() zur Verf\u00fcgung. Wir sehen in den Zeilen 16-20 die Behandlung des Click -Ereignisses des Buttons. In Zeile 17 wird darin programmatisch die Route /first/one aufgerufen. HTTPClient \u00b6 Wir wissen bereits, dass Angular eine TypeScript-Framework ist, mit dem sich Single-Page-Anwendungen implementieren lassen. Es wird einmalig eine Seite (h\u00e4ufig index.html ) vom Server geladen und alle weiteren Inhalte werden sukzessive bzw. durch Nutzerinteraktionen gesteuert in diese eine Seite nachgeladen. Die Steuering wird dabei durch den Browser vorgenommen, der das aus TypeScript \u00fcbersetzte JavaScript interpretiert und entsprechend die Templates der Komponenten in die Anwendung einbindet. Das bedeutet, dass im Prinzip die gesamte Logik im Client , d.h. im Browser ausgef\u00fchrt wird. Dem gegen\u00fcber steht jedoch die in der Anwendung verarbeitete Menge von Daten, die typischerweise in einer Datenbank auf einem Server bereitgestellt werden. W\u00e4hrend der Client sich darum k\u00fcmmert, dass Daten angezeigt oder eingegeben werden, muss sich der Server darum k\u00fcmmern, dass Daten in die Datenquelle (die Datenbank) neu eingef\u00fcgt, ausgelesen, aktualisiert und gel\u00f6scht werden k\u00f6nnen. Diese vier Operationen werden mit CRUD abgek\u00fcrzt f\u00fcr: C reate - neue Daten einf\u00fcgen R ead - Daten auslesen U pdate - Daten aktualisieren D elete - Daten l\u00f6schen Der Client und der Server m\u00fcssen dazu nun irgendwie verbunden werden. Diese Verbindung erfolgt mithilfe des Hypertext Transfer Protocols (HTTP) .","title":"Angular"},{"location":"angular/#angular","text":"Angular geh\u00f6rt neben React.js und Vue.js zu den meisteverwendeten Frameworks f\u00fcr die Entwicklung sogenannter Single-Page-Applikationen . In einer Single-Page-Applikation wird eine Seite vom Webserver geladen und diese Seite durch unterschiedliche Inhalte bef\u00fcllt, je nach Nutzerinteraktion. Diese Inhalte werden in Angular durch sogenannte Komponenten bereitgestellt. Komponenten sind die Grundbausteine einer Angular-Anwendung. Das erste Release von Angular erschien 2010 (damals noch unter dem Namen AngularJS, ab Version 2 nur noch Angular). React und Vue kamen 2013 bzw. 2014 erstmalig heraus. Angular wird haupts\u00e4chlich von Google, React haupts\u00e4chlich von Facebook und Vue als Community-Version entwickelt. Alle drei Frameworks stehen unter MIT-Lizent . Neben HTML und CSS verwendet Angular TypeScript . TypeScript ist eine Obermenge von JavaScript. Das bedeutet, dass jeder JavaScript-Code auch TypeScript ist, aber nicht umgekehrt. TypeScript-Code wird compiliert und erzeugt JavaScript-Code, der vom Browser ausgef\u00fchrt werden kann. Im Gegensatz zu JavaScript ist TypeScript typsicher und klar objektorientiert.","title":"Angular"},{"location":"angular/#erstes-projekt-erstellen","text":"Eine Angularanwendung besteht haupts\u00e4chlich aus Komponenten und Services. Um die Anwendung selbst sowie Komponenten und Services zu erstellen, wird am besten das Command Line Interface for Angular (Angular CLI) verwendet. \u00d6ffnen Sie ein Terminal (Windows-Nutzerinnen sollten die Git-Bash verwenden, die Sie bereits mit Git installiert haben). Wechseln Sie im Terminal in das Verzeichnis, das Ihre Projekte enthalten soll. F\u00fcr das Wechseln in andere Verzeichnisse nutzen Sie den cd Befehl (change directory). Um die Anwendung \"first\" zu erzeugen, geben Sie folgenden Befehl in das Terminal ein: ng new first ng steht f\u00fcr Angular. Mit dem Attribut new geben Sie an, dass Sie ein neues Projekt erzeugen wollen. first ist der Name des Projektes. Wenn Sie gefragt werden, ob Sie Angular routing verwenden m\u00f6chten, geben Sie ein y ein. Wenn Sie nach dem stylesheet format gefragt werden, k\u00f6nnen Sie CSS einfach mit Enter best\u00e4tigen. Wenn alles geklappt hat, erhalten Sie im Terminal eine Ausgabe in der Form: Es entsteht ein Ordner first in Ihrem Projekte-Verzeichnis. Wechseln Sie in dieses Verzeichnis: cd first F\u00fchren Sie darin den Befehl: npm install aus. Damit werden alle Abh\u00e4ngigkeiten, die in der Datei package.json definiert sind, geladen und das node_modules -Verzeichnis erstellt. Siehe z.B. hier . Wenn Sie Ihr Projekt mit git verwalten, dann ist es ratsam, das node_modules -Verzeichnis von der git -Verwaltung auszuschlie\u00dfen. Es wird ja immer durch npm install erstellt. F\u00fcgen Sie dazu in Ihre .gitignore die Zeile node_modules/** ein. Dann werden alle Inhalte aller node_modules -Verzeichnisse in Ihrem Repository ignoriert. Danach geben Sie ng serve ein. Es werden die entsprechenden TypeScript-Dateien compiliert und es erscheint am Ende eine Ausgabe, wie z.B. \u2714 Browser application bundle generation complete. Initial Chunk Files | Names | Size vendor.js | vendor | 2 .10 MB polyfills.js | polyfills | 339 .54 kB styles.css, styles.js | styles | 212 .38 kB main.js | main | 55 .22 kB runtime.js | runtime | 6 .85 kB | Initial Total | 2 .70 MB Build at: 2021 -11-15T09:35:55.434Z - Hash: 05483fb355731569 - Time: 10730ms ** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ ** \u2714 Compiled successfully. Sie m\u00fcssen jetzt immer compileren! Wenn Sie aber einmal ng serve ausgef\u00fchrt haben, wird im Browser automatisch auf die \u00c4nderungen reagiert. Sie m\u00fcssen also nicht jedes Mal neu ng serve eingeben, bzw. nicht jedes Mal neu auf das gr\u00fcne Dreieck in Ihrer IDE klicken: \u00d6ffnen Sie Ihren Browser und geben Sie als URL http://localhost:4200 ein. Folgende Seite sollte erscheinen: Success Fertig! Sie haben Ihr erstes Angular-Projekt erstellt.","title":"Erstes Projekt erstellen"},{"location":"angular/#angular-projektstruktur","text":"\u00d6ffnen Sie die IDE Ihrer Wahl (Screenshots hier mit [PhpStorm] ( https://www.jetbrains.com/de-de/phpstorm/ ). W\u00e4hlen Sie unter Open Project den Projektordner first . Klappen Sie das Projekt first auf, klappen Sie den Ordner src und dann den Ordner app auf. Der Projektexplorer zeigt folgendes Bild: Die meiste Arbeit wird im src -Ordner erledigt. Darin befindet sich (wird sich befinden) der Code unserer Anwendung. Darin der wichtigste Ordner ist der app -Ordner. Hier werden wir unsere Module, Komponenten und Services hinzuf\u00fcgen. In dem assets -Ordner werden Bilder, Icons und Daten abgelegt. Der node_modules -Ordner enth\u00e4lt alle ben\u00f6tigten 3 rd -party-libraries. Welche das sind, wird in der Datei package.json als dependencies definiert. Mithilfe des Befehls npm install werden alle ben\u00f6tigten Module dem Ordner node_modules hinzugef\u00fcgt. Der Ordner environments enth\u00e4lt die notwendigen Konfigurationsinformationen f\u00fcr den development - und den production -Modus. Wir entwickeln zun\u00e4chst im development -Modus. favicon.ico ist das Favicon - ein kleines Icon, das im Reiter erscheint. W\u00e4hlen Sie am besten ein eigenes. index.html ist die Hauptseite. Mithilfe von Angular entwickeln wir eine Single Page Application , d.h. es wird eine einzige HTML-Seite geladen ( index.html ) und jeder weitere Inhalt wird asynchron hinzugef\u00fcgt. styles.css enth\u00e4lt die globalen Stylesheets, d.h. die CSS-Eigenschaften, die f\u00fcr das gesamte Projekt gelten sollen. Die app.component.* -Dateien beschreiben die app-Komponente. Eine Komponente besteht aus einer HTML -, einer CSS - und einer TypeScript -Datei (auch noch eine *.spec.ts , aber die interessiert zun\u00e4chst nicht). \u00d6ffnen Sie in Ihrer IDE die Datei app.component.html . L\u00f6schen Sie den kompletten Inhalt und lassen nur noch <router-outlet></router-outlet> . F\u00fcgen Sie oberhalb von <router-outlet></router-outlet> die Zeile <h1>This is app</h1> ein. Gehen Sie wieder zum Browser und schauen sich den ge\u00f6ffneten Tab mit der URL localhost:4200 an. Es erscheint der folgende Inhalt: \u00d6ffnen Sie die app.component.css -Datei und geben Sie dort h1 { color : red ; } Nach den \u00c4nderungen in app.component.css erscheint der Text der \u00dcberschrift in rot: Zusammenfassung Wir haben die die app.component.html ge\u00e4ndert, um den Inhalt der dargestellten Seite anzupassen und die app.component.css , um \u00c4nderungen an der Darstellung (dem Stil) des Inhalts durchzuf\u00fchren.","title":"Angular-Projektstruktur"},{"location":"angular/#single-page-application","text":"Wenn wir eine Anwendung mit Angular erstellen, dann handelt es sich dabei um eine sogenannte Single Page Application (SPA) , d.h. es wird genau eine Seite vom Webserver geladen und alle Inhalte werden in diese Seite (nach-)geladen, je nach Nutzerinteraktion. Die hier geladene Seite ist die index.html , die in unserem Projekte-Ordner frontend liegt. Sie sieht so aus: index.html <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Frontend </ title > < base href = \"/\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" type = \"image/x-icon\" href = \"favicon.ico\" > </ head > < body > < app-root ></ app-root > </ body > </ html > Das Element <app-root> ist dabei ein sogenannter Tag-Selektor (auch Element-Selektor oder Komponenten-Selektor ).","title":"Single Page Application"},{"location":"angular/#prefix-andern-optional","text":"app ist dabei ein Prefix, der f\u00fcr die gesamte Anwendung gilt. Diesen Prefix k\u00f6nnen Sie \u00e4ndern. Im folgenden ist beschrieben, wie Sie ihn von app auf htw \u00e4ndern. \u00d6ffnen Sie dazu die Datei angular.json , die sich im Projekt-Ordner frontend befindet. Diese Datei enth\u00e4lt die zentrale Konfiguration Ihres Projektes. Sie sieht wie folgt aus (Ausschnitt): angular.json 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 { \"$schema\" : \"./node_modules/@angular/cli/lib/config/schema.json\" , \"version\" : 1 , \"newProjectRoot\" : \"projects\" , \"projects\" : { \"frontend\" : { \"projectType\" : \"application\" , \"schematics\" : {}, \"root\" : \"\" , \"sourceRoot\" : \"src\" , \"prefix\" : \"app\" , \"architect\" : { \"build\" : { \"builder\" : \"@angular-devkit/build-angular:browser\" , \"options\" : { \"outputPath\" : \"dist/frontend\" , \"index\" : \"src/index.html\" , \u00c4ndern Sie den Prefix in der hell markierten Zeile auf z.B. \"htw\" (oder Ihre Initialen vielleicht). In der index.html und in der app.component.ts auch noch \u00e4ndern. Ab dann ist die Verwendung von \"htw\" als Prefix einegrichtet. Sie k\u00f6nnen es aber auch bei \"app\" belassen. Es soll an dieser Stelle einem besseren Verst\u00e4ndnis des Prinzips dienen. index.html 1 2 3 4 5 6 7 8 9 10 11 12 13 <!doctype html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > Frontend </ title > < base href = \"/\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" type = \"image/x-icon\" href = \"favicon.ico\" > </ head > < body > < htw-root ></ htw-root > </ body > </ html > app/app.component.ts 1 2 3 4 5 6 7 8 9 import { Component } from '@angular/core' ; @ Component ({ selector : 'htw-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { title = 'frontend' ; }","title":"Prefix \u00e4ndern - optional"},{"location":"angular/#komponenten-selektoren","text":"Nochmal zur\u00fcck zu unserer index.html - der single page, die vom Webserver geladen wird und in die alle weiteren Komponenten eingebunden werden. Wir haben dort nun also den Komponenten-Selektor <htw-root></htw-root> . In diesen Selektor wird nun dir root -Komponente ( app.component ) geladen. Dieser Selektor wird durch die root -Komponente ersetzt. Das ist unsere app/app.component.* . Eine solche Komponente besteht immer aus einer css -, einer html - und einer ts -Datei. Es wird also in diesen Komponenten-Selektor der HTML-Code der app.component.html eingebunden. Das sehen Sie auch, wenn Sie die Developer-Tools an Ihrem Browser \u00f6ffnen und sich den Quellcode der aktuellen Anwendung anschauen:","title":"Komponenten-Selektoren"},{"location":"angular/#komponenten","text":"Eine Angular-Anwendung besteht haupts\u00e4chlich aus Komponenten . Jede Anwendung hat eine Hauptkomponente - die sogenannte Root Component. Diese Hauptkomponente ist meistens die AppComponent . Eine Komponente hat eine in sich geschlossene Bedeutung, z.B. ein Formular f\u00fcr Dateneingabe, eine Liste aller Daten oder auch nur ein bestimmtes Element. Eine Komponente besteht aus einer View ( Template ) und einer TypeScript-Klasse. Die AppComponent besteht z.B. aus der app.component.html (der View) und der app.component.ts (der TypeScript-Klasse). Die TypeScript-Klasse k\u00fcmmert sich um die Verwaltung der Daten, die in der View dargestellt und/oder durch Eingaben erzeugt werden. Die TypeScript-Klasse beschreibt die Logik der Komponente. Die View ist der dargestellte Bereich der Komponente, also das, was man im Browser von der Komponente sieht. Neben der *.html - und der *.ts -Datei einer Komponente gibt es auch noch die *.css -Datei (also z.B. app.component.css ). Diese enth\u00e4lt CSS-Eigenschaften, die speziell f\u00fcr die Komponente gelten sollen. Um eine Komponente der gesamten Anwendung als Komponente bekannt zu machen, wird der Decorator @Component verwendet. Decoratoren erkennt man am f\u00fchrenden @ -Zeichen. Sie werden verwendet, um Metadaten der Anwendung zu verwalten. Der typische Aufbau einer Komponente (hier AppComponent - app.component.ts ): import { Component } from '@angular/core' ; @ Component ({ selector : 'htw-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { title = 'first' ; } Der Selektor gibt an, dass \u00fcberall dort, wo htw-root als Elementselektor <htw-root> </htw-root> verwendet wird, das in app.component.html definerte Template eingesetzt wird. Angenommen, in app.component.html ist der HTML-Code: < h1 > This is app </ h1 > definiert. Dann wird dieser Code als Inhalt in das HTML-Element <htw-root> </htw-root> eingesetzt: < htw-root > < h1 > This is app </ h1 > </ htw-root > Wir schauen uns ein ausf\u00fchrlicheres Beispiel im Folgenden an, in dem wir eine neue Komponente erzeugen.","title":"Komponenten"},{"location":"angular/#eine-neue-komponente-erzeugen","text":"Mithilfe von Angular-CLI erzeugen wir in unserer App first eine neue Komponente header . Wir wechseln dazu im Terminal in den Ordner von first und geben dann ng generate component header ein. Sp\u00e4ter k\u00fcrzen wir solche Eingaben ab. Anstelle von generate brauchen wir auch nur g zu schreiben. Und anstelle von component gen\u00fcgt c . Das hei\u00dft, wir h\u00e4tten stattdessen auch ng g c header schreiben k\u00f6nnen. In unserer first App gibt es nun die Komponente header : Jede Angular-Komponente besteht aus vier Teilen: der TypeScript-Klasse (die *.component.ts -Datei) dem Template (die *.component.html -Datei) den Styles (die *.component.css -Datei) einer Testspezifikation (die *.component.spec.ts -Datei) Jede Komponente wird in der app.module.ts der gesamten Anwendung bekannt gemacht. Das erfolgt mithilfe der Eigenschaft declarations im Decorator @NgModule() : import { NgModule } from '@angular/core' ; import { BrowserModule } from '@angular/platform-browser' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { HeaderComponent } from './header/header.component' ; @ NgModule ({ declarations : [ AppComponent , HeaderComponent ], imports : [ BrowserModule , AppRoutingModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Das obige Listing zeigt, dass die neue Komponente header registriert wurde. Um dieses Eintragen in die app.module.ts m\u00fcssen wir uns aber nicht k\u00fcmmern, das erledigt die Angular-CLI mit der Anweisung zur Erstellung einer neuen Komponente ng generate component newComponent . Doppelklicken Sie im Projektexplorer Ihrer IDE auf die Datei header.component.ts , um sie zu \u00f6ffnen. Sie enth\u00e4lt den folgenden Quelltext: import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'htw-header' , templateUrl : './header.component.html' , styleUrls : [ './header.component.css' ] }) export class HeaderComponent implements OnInit { constructor () { } ngOnInit () : void { } } Wir \u00e4ndern diese Datei zun\u00e4chst nicht und \u00f6ffnen auch noch die header.component.html . Diese enth\u00e4lt nur ein HTML-Element, einen Absatz: < p > header works! </ p > Wir \u00e4ndern auch diese Datei zun\u00e4chst nicht und \u00f6ffnen die app.component.html - die HTML-Datei unserer Root-Komponente. Diese sieht derzeit so aus: < h1 > This is app </ h1 > < router-outlet ></ router-outlet > Wir f\u00fcgen in die Datei den Selektor htw-header unserer neuen header -Komponente als HTML-Element ein: < htw-header ></ htw-header > < h1 > This is app </ h1 > < router-outlet ></ router-outlet > Dieses Element dient als \"Platzhalter\" f\u00fcr das Template unserer neuen Komponente. Das bedeutet, dass in dieses Element der HTML-Code aus header.component.html eingef\u00fcgt wird. Wechseln Sie in den Browser auf den Tab mit Ihrer Anwendung ( http://localhost:4200/ ). Sie sehen folgendes Bild: Oberhalb der \u00dcberschrift ( <h1>This is app</h1> ) wurde also der Absatz <p>header works!</p> eingef\u00fcgt. Wenn Sie sich den Quelltext Ihrer Seite anschauen, z.B. \u00fcber die Entwicklertools Ihres Browsers ( z.B. f\u00fcr Chrome ), dann wird folgender Code sichtbar: Wir k\u00f6nnen hier die Attribute der HTML-Elemente vernachl\u00e4ssigen (also z.B. _nghost-aiq-c17 oder ng-version=\"13.0.1\" ). Aber es wird folgende HTML-Struktur sichtbar: < htw-root > < htw-header > < p > header works! </ p > </ htw-header > < h1 > This is app </ h1 > < router-outlet ></ router-outlet > </ htw-root > Das Element <htw-root> fungiert als Platzhalter f\u00fcr die gesamte App. In dieses Element wird der gesamte Inhalt der Anwendung eingebunden (siehe app.component.html ). Dies ist hier zun\u00e4chst eine \u00dcberschrift <h1> , die von dem Element f\u00fcr die header -Komponente gefolgt wird. Das bedeutet, dass in das Element <htw-header> der Inhalt der Komponente header eingebunden wird. Das ist hier nur ein Absatz <p> (siehe dazu header.component.html ). Das Element <router-outlet> soll uns an dieser Stelle noch nicht interessieren. Das wird erst interessant, wenn wir \u00fcber das Routing in einer Angular-Anwendung sprechen. Zur weiteren \u00dcbung erzeugen wir uns noch weitere Komponenten. Zun\u00e4chst eine Komponenten zur Navigation nav : ng g c nav UM deutlich zu machen, dass sich die CSS-Definitionen f\u00fcr eine Komponente stets nur auf die Komponente beziehen, \u00e4ndern wir die nav.component.css : nav.component.css p { background-color : grey ; color : white ; padding : 1 % ; padding-left : 2 % ; } Wir binden die nav -Komponente in die app.component.html ein: app.component.html < htw-header ></ htw-header > < htw-nav ></ htw-nav > < h1 > This is app </ h1 > < router-outlet > </ router-outlet > und erhalten folgende Seite: Durch das Einbinden von Komponenten in andere Komponenten ensteht eine Hierarchie der Komponenten, z.B. ist die app -Komponent in unserem bisherigen Beispiel die Elternkomponente der header - und nav -Komponenten. Das hei\u00dft, header und nav sind Kindkomponenten von app . Um dies zu verdeutlichen, erstellen wir noch eine weitere Komponente main und daf\u00fcr explizit zwei Kindkomponenten left und right : ng g c main ng g c main/left ng g c main/right Beachten Sie, dass die left - und die right -Komponente hier explizit als Kindkomponenten von main erstellt werden. Wir binden die main -Komponente in die app -Komponente ein und die Komponenten left und right in die main -Komponente: app.component.html main.component.html main.component.css < htw-header ></ htw-header > < htw-nav ></ htw-nav > < h1 > This is app </ h1 > < htw-main ></ htw-main > < router-outlet ></ router-outlet > < div id = \"main\" > < h3 > main works! </ h3 > < div id = \"row\" > < div id = \"left\" > < htw-left > </ htw-left > </ div > < div id = \"right\" > < htw-right > </ htw-right > </ div > </ div > </ div > # main { background-color : rgb ( 226 , 243 , 188 ); height : 200 px ; padding : 1 % ; } # row { display : flex ; } # left { float : left ; background-color : rgb ( 235 , 235 , 240 ); } # right { background-color : rgb ( 191 , 191 , 243 ); }","title":"Eine neue Komponente erzeugen"},{"location":"angular/#deployment-des-projektes","text":"Wir werden uns im weiteren Verlauf immer wieder anschauen, was zu beachten ist, damit ein Angular-Projekt deployed , d.h. ausgeliefert werden kann. Derzeit m\u00fcssen wir ein Projekt stets mit ng serve starten und schauen uns dabei jeweils den gegenw\u00e4rtigen Entwicklungsstatus des Projektes an. Irgendwann ist das Projekt aber \"fertig\" und soll ausgeliefert werden. Das prinzipielle Vorgehen daf\u00fcr besteht aus zwei Schritten. Der erste Schritt wird als Vorbereitung des Deployments ausgef\u00fchrt. Er besteht darin, das Projekt zu deployen , dabei auf eventuelle Fehler zu achten und gleichzeitig das deployed Projekt auszuf\u00fchren und zu \"beobachten\". Dazu werden zwei Terminals verwendet. Im ersten Terminal geben Sie im Projektordner (hier first ) ng build --watch ein. Damit wird das Projekt deployed, wird aber gleichzeitig \u00fcberwacht, d.h. alle Aktionen auf der Webanwendung werden angezeigt und auch eventuell auftretende Fehler. Dieses Terminal muss w\u00e4hrend der Anwendung der Webanwendung also gut \u00fcberwacht werden. Im zeiten Terminal starten Sie die Anwendung, indem Sie einen Webserver aufrufen, z.B. lite-server : lite-server --baseDir=\"dist/first\" Es \u00f6ffnet sich die Webenawendung (oder Sie m\u00fcssen Sie auf localhost:3000 \u00f6ffnen) und Sie k\u00f6nnen die Webanwendung ausprobieren. Eventuelle Fehler werden im ersten Terminal angezeigt. Grunds\u00e4tzlich ist es so, dass die Webanwendung durch das Deployment in einen dist -Ordner ausgeliefert wird. Der dist -Ordner des first -Projektes sieht nach dem Deployment ungef\u00e4hr so aus: Die Nummern in den Dateinamen werden bei Ihnen anders sein. Dieser Ordner kann auf Ihren Webserver kopiert werden und dann ist die Webanwendung dort ausf\u00fchrbar. Wenn Sie alle Fehler behoben haben und sich die Webanwendung korrekt verh\u00e4lt, dann k\u00f6nnen Sie den zweiten Schritt ausf\u00fchren: ng build Diese Anwendung erzeugt (genau wie ng build --watch ) den dist -Ordner. Den darin befindlichen Ordner (hier: first ) k\u00f6nnen Sie z.B. auf den Webserver kopieren und von dort die first/index.html aufrufen (bzw. Sie benennen den first -Ordner dort um). Beachten Sie, dass Sie in der index.html die Basis-Refereferenz-URL anpassen m\u00fcssen, also den Eintrag <base href=\"/\"> anpassen. In meinem Fall ist es z.B. so, dass in meinem DocumentRoot folgende Ordnerstruktur existiert: /WT21/Angular/first/dist/first/ . Das hei\u00dft, mein Eintrag in der index.html muss dann lauten: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"utf-8\" > < title > First </ title > < base href = \"/WT21/Angular/first/dist/first/\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"icon\" type = \"image/x-icon\" href = \"favicon.ico\" > < link rel = \"stylesheet\" href = \"styles.ef46db3751d8e999.css\" > </ head > < body > < htw-root ></ htw-root > < script src = \"runtime.efa9df03510e8bc1.js\" type = \"module\" ></ script > < script src = \"polyfills.e477a8328a76bdd4.js\" type = \"module\" ></ script > < script src = \"main.22d2c12b99bb6467.js\" type = \"module\" ></ script > </ body > </ html > Um die Basis-Refereferenz-URL nicht nachtr\u00e4glich anpassen zu m\u00fcssen, k\u00f6nnen Sie auch gleich ng build --base-href=/WT21/Angular/first/dist/first/ angeben.","title":"Deployment des Projektes"},{"location":"angular/#lifecycle-hooks","text":"Komponenten durchlaufen einen festen Lebenszyklus ( lifecycle ). Die verschiedenen Status rufen dabei jeweils eine Methode auf, die wir jeweils implementieren k\u00f6nnen, um in den jeweiligen Status des Lebenszyklus eingreifen zu k\u00f6nnen. Man spricht dabei von sogenannten Lifecycle-Hooks . Der wohl bekannteste Lifecycle-Hook ist ngOnInit() . Damit greift man in die Initialisierung der Komponente ein. Typischerweise werden z.B. Eingabewerte initialisiert, die im Template dargestellt werden. Noch vor ngOnInit wird jedoch ngOnChange() aufgerufen. N\u00e4mlich genau dann, wenn die Eingabewerte gesetzt bzw. ge\u00e4ndert werden. F\u00fcr weiterf\u00fchrende Informationen sei https://angular.io/guide/lifecycle-hooks empfohlen.","title":"Lifecycle-Hooks"},{"location":"angular/#services","text":"Ein Service ist eine Klasse f\u00fcr einen konkreten Zweck. Services unterscheiden sich von Komponenten dahingehend, dass eine Komponente f\u00fcr die Nutzerinteraktion zust\u00e4ndig ist, eine Komponente Eigenschaften (Daten) pr\u00e4sentiert, eine Komponente Methoden zur Datenbindung ( data binding ) zur Verf\u00fcgung stellt, um zwischen View und Anwendungslogik zu vermitteln. Ein Service erf\u00fcllt eine konkrete Aufgabe, typischerweise mit Daten, ohne sich um die Darstellung der Daten zu k\u00fcmmern. Typische Aufgaben eines Services sind: Daten vom Server holen oder auf den Server laden, Nutzereingaben zu validieren. Ein Service steht typischerweise allen Komponenten zur Verf\u00fcgung (aber nicht jede Komponente muss einen Service nutzen). Ein Service ist eine Klasse mit dem Decorator @Injectable() . Services enthalten Anwendungslogik, die aus Komponenten ausgelagert werden kann. Ein Service my kann mittels CLI so erzeugt werden: ng generate service shared/my Es entsteht im src/app/shared -Ordner eine Datei my.service.ts . Services sollten am besten in dem shared -Ordner erstellt werden, da ein Service von allen Komponenten genutzt werden kann (eine andere M\u00f6glichkeit w\u00e4re, einen eigenen Ordner services zu erstellen). In dem Decorator @Injectable() wird mittels providedIn: root angegeben, dass der Service von allen Komponenten innerhalb des Root-Moduls genutzt werden kann. Ist der Service von anderen Services oder Komponenten abh\u00e4ngig, k\u00f6nnen diese Services oder Komponenten mittels dependency injection als Parameter des Service-Konstruktor eingebunden werden. Hier ein allgemeines Beispiel eines Services MyService : my.service.ts 1 2 3 4 5 6 7 8 9 10 import { Injectable } from '@angular/core' ; @ Injectable ({ providedIn : 'root' }) export class MyService { constructor ( private myDependency : MyDependency ) { } } Der Service kann dann mittels dependency injection von einer Komponente verwendet werden. Beispiel: example.component.ts import { Component , OnInit } from '@angular/core' ; import { MyService } from './shared/my.service' ; @ Component ({ selector : 'app-example' , templateUrl : './example.component.html' , styleUrls : [ './example.component.css' ] }) export class ExampleComponent implements OnInit { constructor ( private myService : MyService ) { } ngOnInit () : void { this . example . methodOfMyService (); } } F\u00fcr ein Beispiel einer Service-Definition und der Verwendung eines Services siehe BookStoreService . F\u00fcr weiterf\u00fchrende Informationen siehe https://angular.io/guide/architecture-services .","title":"Services"},{"location":"angular/#routing","text":"Routing ist ein wesentliches Konzept f\u00fcr die Entwicklung von Single-Page-Applikationen (SPA). Bei Single-Page-Applikationen wird genau eine Seite vom Webserver geladen (typischerweise die index.html und alle weiteren, sich \u00e4ndernden, Inhalte und Sichten werden in diese Seite nachgeladen). Das f\u00fchrt zun\u00e4chst auch dazu, dass es f\u00fcr die Seite genau eine URL gibt, um auf sie zuzugreifen (z.B. http://www.mydomain.de bzw. http://www.mydomain.de/index.html ). M\u00f6chte man aber Komponenten direkt in der URL ansprechen, z.B. http://www.mydomain.de/login f\u00fcr die Login-Komponente, so ben\u00f6tigen wir das Routing von Angular. Wir betrachten hier ein Beispiel, das https://angular.io/guide/router entnommen ist und nur leicht abgewandelt wurde. Wir erstellen dazu zun\u00e4chst ein neues Projekt routing-lesson . ng new routing-lesson In der obigen Anweisung h\u00e4tte man auch bereits den Parameter --routing verwenden k\u00f6nnen, also: ng new routing-lesson --routing Macht man das nicht, werden Sie gefragt, ob Sie Routing verwenden wollen: ? Would you like to add Angular routing? [y|N] Antworten Sie mit y . Zur Demonstration des Routings werden wir zun\u00e4chst 2 weitere Komponenten erstellen: first und second . cd routing-lesson ng g c first ng g c second Wird ein Angular-Projekt mit Routing erstellt, so existiert die Datei app-routing.module.ts im src/app/ -Ordner. Diese Datei sieht urspr\u00fcnglich so aus: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; const routes : Routes = []; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } Bei dieser Klasse handelt es sich um ein eigenes Angular-Modul (als @NgModule dekoriert). Es wird deshalb auch in die app.module.ts integriert (dies geschieht automatisch, wenn wir Routing ausgew\u00e4hlt haben) - siehe Zeilen 4 und 17 im folgenden Listing: app.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import { BrowserModule } from '@angular/platform-browser' ; import { NgModule } from '@angular/core' ; import { AppRoutingModule } from './app-routing.module' ; import { AppComponent } from './app.component' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; @ NgModule ({ declarations : [ AppComponent , FirstComponent , SecondComponent ], imports : [ BrowserModule , AppRoutingModule ], providers : [], bootstrap : [ AppComponent ] }) export class AppModule { } Das Array routes aus der Datei app-routing.module.ts enth\u00e4lt sp\u00e4ter die Pfadangaben zu den Komponenten - sogenannte Routen . Routen sind Objekte und wie folgt notiert: { path : 'mypath' , component : MyComponent } Diese Angabe bewirkt, dass unter der URL http://www.mydomain.de/mypath die Komponente MyComponent aufgerufen wird. Angenommen, wir wollen, dass unsere Komponente FirstComponent unter dem Pfad /first aufgerufen wird und SecondComponent unter dem Pfad /second , dann sieht unsere Datei app-routing.module.ts wie folgt aus: app-routing.module.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; const routes : Routes = [ { path : 'first' , component : FirstComponent }, { path : 'second' , component : SecondComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } In den Zeilen 8 und 9 sind die beiden Routen definiert. Beachten Sie, dass die Pfadangaben ohne vorangestelltes Slash / erfolgen! Unter Verwendung der Selektoren <app-first> bzw. <app-second> k\u00f6nnten wir unsere Komponenten nun (statisch) in unsere Anwendung einbinden. Wollen wir das jedoch dem Routing \u00fcberlassen, die Komponenten also dynamisch - abh\u00e4ngig von dem jeweils gew\u00e4hlten Pfad - einbinden lassen, verwenden wir stattdessen den Selektor <router-outlet> . Auch dieser ist bei gew\u00e4hltem Routing bereits Teil des AppComponent -Templates: app.component.html <!-- hier wurde viel vom urspr\u00fcnglichen --> <!-- Template gel\u00f6scht --> < h1 > Hier ist AppComponent </ h1 > < router-outlet ></ router-outlet > Obiges Listing zeigt, dass das Template von AppComponent zun\u00e4chst eine <h1> -\u00dcberschrift vorsieht und dann folgt das <router-outlet> , welches als Platzhalter f\u00fcr die durch das Routing ausgew\u00e4hlten Komponenten agiert. Angenommen, wir definieren die Templates f+r FirstComponent und SecondComponent wie folgt: first.component.html second.component.html < h3 > Hier ist FirstComponent </ h3 > < h3 > Hier ist SecondComponent </ h3 > Starten wir nun unsere Anwendung, dann sehen wir zun\u00e4chst (URL: http://localhost:4200/ ) nur die View der AppComponent , n\u00e4mlich die <h1> -\u00dcberschrift. Der Platzhalter <router-outlet> bleibt leer, da keine der angegebenen Pfade aus der app-routing.module.ts angegeben wurde. Geben wir jedoch als URL http://localhost:4200/first ein, so wird das Template der FirstComponent in diesen Platzhalter geladen, n\u00e4mlich die <h3 -\u00dcberschrift Hier ist FirstComponent . Geben wir als URL stattdessen http://localhost:4200/second ein, so wird das Template der SecondComponent in den Platzhalter <router-outlet> geladen, n\u00e4mlich die <h3 -\u00dcberschrift Hier ist SecondComponent . Die folgende Abbildung zeigt die Views der drei F\u00e4lle: Wir haben nun Pfade erzeugt, mit denen man Komponenten direkt ansprechen kann. Im folgenden Abschnitt wird gezeigt, wie man diese Pfade in Hyperlinks nutzt.","title":"Routing"},{"location":"angular/#routen-verlinken","text":"Wir kennen nun die m\u00f6glichen Pfade unserer Anwendung http://localhost:4200/ , http://localhost:4200/first und http://localhost:4200/second und w\u00fcrden diese Adressen z.B. gerne in Hyperlinks verwenden, um direkt zu den Views der jeweiligen Komponente zu springen, z.B. so: app.component.html < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a href = \"/\" > home </ a > </ li > < li > < a href = \"/first\" > first </ a > </ li > < li > < a href = \"/second\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Das funktioniert auch, hat aber einen von uns nicht gewollten Effekt: Die Seite wird durch jeden Klick auf einen Hyperlink neu geladen. Das ist ja auch das gew\u00fcnschte Verhalten eines Hyperlinks. Die Idee einer Single-Page-Applikation ist aber jedoch die, dass die Seite nur genau einmal geladen wird und dann dynamisch alle weiteren Inhalte. Das Nachladen wird vermieden, wenn wir als Attribut f\u00fcr unsere Pfade nicht href verwenden, sondern die Angular-Direktive routerLink . Dies gilt nur f\u00fcr interne Links! Aber es verhindert bei internen Links ein Neuladen der Seite. app.component.html < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a routerLink = \"/\" > home </ a > </ li > < li > < a routerLink = \"/first\" > first </ a > </ li > < li > < a routerLink = \"/second\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Die obige Attributschreibweise kann auch durch property binding ersetzt werden. Dann \u00fcbergeben Sie als Wert aber keinen String sondern ein 1-elementiges Array: app.component.html < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a [ routerLink ]=\"['/']\" > home </ a > </ li > < li > < a [ routerLink ]=\"['/ first ']\" > first </ a > </ li > < li > < a [ routerLink ]=\"['/ second ']\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Die zweite Variante wird meistens dann verwendet, wenn an den Pfad noch dynamisch Werte \u00fcbergeben werden, sogenannte Parameter an den Routen.","title":"Routen verlinken"},{"location":"angular/#parameter-an-routen","text":"H\u00e4ufig sind die Pfadangaben nicht nur so statisch wie bisher, also /first bzw. /second , sondern es werden auch noch Werte, z.B. Session-IDs, Nutzer-IDs, B\u00fccher-ISBN usw. \u00fcbergeben. Dazu werden die Routen durch Parameter erweitert. Diese Parameter werden dann mit einem konkreten Wert bei Aufruf ersetzt. Die allgemeine Syntax f\u00fcr einen parametrisierten Pfad ist: { path : 'mypath/:id' , component : MyComponent } Der Doppelpunkt : ist zwingend, der Name des Parameters id ist frei w\u00e4hlbar. Die Werte f\u00fcr den Routenparameter k\u00f6nnen als routerLink wieder entweder als String \u00fcbergeben werden (Zeile 1 im folgenden Listing) oder per property binding als weiteres Array-Element (Zeile 2 im folgenden Listing). 1 2 < a routerLink = \"/mypath/4711\" > statischer Wert f\u00fcr id </ a > < a [ routerLink ]=\"['/ mypath ', myData . id ]\" > dynamischer Wert f\u00fcr id (aus JSON myData) </ a > Wir haben jetzt eine parametrisierten Pfad konfiguriert und wir haben auch betrachtet, wie der Aufruf einer solch parametrisierten Route erfolgen kann. Nun betrachten wir, wie der Wert eines Parameters in einer Komponentenklasse ausgelesen und verarbeitet werden kann. Wir f\u00fchren dazu zun\u00e4chst kleinere \u00c4nderungen an unserem obigen Beispiel der routing-lesson -App durch: app-routing.module.ts first.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { NgModule } from '@angular/core' ; import { Routes , RouterModule } from '@angular/router' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; const routes : Routes = [ { path : 'first' , component : FirstComponent }, { path : 'first/:id' , component : FirstComponent }, { path : 'second' , component : SecondComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } 1 2 < h3 > Hier ist FirstComponent </ h3 > < p * ngIf = \"id\" > {{ id }} </ p > In app-routing.module.ts haben wir einen weiteren Pfad hinzugef\u00fcgt (Zeilennummer 8). Beachten Sie, dass ohne die Pfadkonfiguration in Zeilennummer 7 die Route http://localhost:4200/first (also ohne Parameterwert) nicht mehr existieren w\u00fcrde. Wenn ein Parameter erforderlich ist, dann muss er auch angegeben werden. Nur in Kombination der beiden Pfadkonfigurationen aus Zeilennummern 7 und 8 ist der Pfad sowohl mit als auch ohne Parameterwert m\u00f6glich. Im Template der FirstComponent haben wir einen Absatz eingef\u00fcgt, der als Inhalt den Wert der Eigenschaft id mittels Interpolation anzeigt. Der Absatz erscheint nur, wenn id auch einen Wert hat. Die Eigenschaft id muss allerdings noch in der first.component.ts angelegt werden: first.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { Component , OnInit } from '@angular/core' ; import { ActivatedRoute } from '@angular/router' ; @ Component ({ selector : 'app-first' , templateUrl : './first.component.html' , styleUrls : [ './first.component.css' ] }) export class FirstComponent implements OnInit { id : string ; constructor ( private route : ActivatedRoute ) { } ngOnInit () : void { this . id = this . route . snapshot . paramMap . get ( 'id' ); } } In der first.component.ts kommen verschiedene Sachen hinzu: es wird die Eigenschaft id deklariert (als string ) es wird der Service ActivatedRoute per dependency injection der Klasse FirstComponent injiziert \u2192 die Eigenschaft route ist vom Typ ActivatedRoute ActivatedRoute stellt uns Informationen \u00fcber den aktuellen Router (die aktuelle URL) zur Verf\u00fcgung \u2192 die Eigenschaft this.route.snapshot.paramMap enth\u00e4lt alle Parameter der aktuellen Route \u2192 mithilfe der Methode get() kann nach einem konkreten Parameter gefragt werden \u2192 wir fragen nach dem Parameter id , da wir so unseren Pfad konfiguriert haben (siehe oben app-routing.module.ts ) Wenn wir nun z.B. die URL http://localhost:4200/first/42 eingeben, dann erscheint im Browser der Wert des Parameters (als Inhalt des <p> -Elementes; siehe oben first.component.html ). Die aktuelle Implementierung von first.component.ts liest also w\u00e4hrend der Initialisierung der Komponente die Routenparameter aus. Finden jedoch am Parameterwert \u00c4nderungen statt, ohne dass die Komponente neu initialisiert wird, bekommt die Komponente von den \u00c4nderungen nichts mit. Die oben gezeigte Form der Implementierung ist deshalb nicht f\u00fcr alle F\u00e4lle geeignet. Vielmehr ist es besser auszunutzen, dass es sich bei this.route.paramMap (ohne snapshot ) um ein Observable handelt. Ein Observable kann so verstanden werden, dass er permanent eine bestimmte Sache beobachtet (z.B. ist der EventEmitter ein Observable und beobachtet permanent, ob das Ereignis ausgel\u00f6st wird; wenn ja, dann ruft EventEmitter die Funktion emit() auf \u2192 siehe Eigene Ereignisse ). Wenn sich etwas an dem beobachteten Objekt ge\u00e4ndert hat, dann reagiert Observable sofort und ruft eine bestimmte Funktion auf. Das Observable paramMap beobachtet permanent die aktuelle Route und sobald sich etwas an dieser Route \u00e4ndert, wird eine Funktion aufgerufen. Damit das Observable aber \u00fcberhaupt den aktuellen Router permanent beobachtet, muss er an den Router angemeldet werden \u2192 das Observable \"abboniert\" den Router. Dies geschieht mithilfe der Funktion subscribe() . Dieser Funktion kann als Parameter eine Funktion \u00fcbergeben werden. Diese Funktion wird aufgerufen, sobald sich am aktuellen Router etwas \u00e4ndert. Wir \u00e4ndern die Implementierung von ngOnInit() in der Klasse first.component.ts deshalb wie folgt: first.component.ts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 import { Component , OnInit } from '@angular/core' ; import { ActivatedRoute } from '@angular/router' ; @ Component ({ selector : 'app-first' , templateUrl : './first.component.html' , styleUrls : [ './first.component.css' ] }) export class FirstComponent implements OnInit { id : string ; constructor ( private route : ActivatedRoute ) { } ngOnInit () : void { this . route . paramMap . subscribe ( paramMap => this . id = paramMap . get ( 'id' ) ); } } Nun erh\u00e4lt die Eigenschaft id immer den aktuellsten Wert (und dieser wird aufgrund der Interpolation auch stets aktuell in der View dargestellt).","title":"Parameter an Routen"},{"location":"angular/#verschachtelte-routen","text":"Angenommen, wir haben zwei weitere Komponenten OneComponent und TwoComponent und beide Komponenten sind Kindkomponenten von der Elternkomponente FirstComponent . Das Verh\u00e4ltnis Eltern- Kindkomponente entsteht ja eigentlich dadurch, dass das Template der Elternkomponente den Selektor der Kindkomponente enth\u00e4lt. Das hei\u00dft in first.component.html gibt es sowohl ein <app-one></app-one> als auch ein <app-two></app-two> \u2192 dann sind One und Two Kindkomponenten von First . Wir wollen nun aber folgendes: die Route /first verweist auf die FirstComponent die Route /first/one verweist auf die FirstComponent und deren Kindkomponente OneComponent die Route /first/two verweist auf die FirstComponent und deren Kindkomponente TwoComponent Wir wollen also, dass auch die beiden Kindkomponenten mittels Routing in die Elternkomponente eingef\u00fcgt werden. Das erreichen wir mit 2 Anpassungen: in app-routing.module.ts kann im routes -Array auch noch die Eigenschaft children hinzugef\u00fcgt werden, welche Pfadkonfigurationen zu den Kindkomponenten enth\u00e4lt in der *.component.html der Elternkomponente wird ein weiteres <router-outlet></router-outlet> hinzugef\u00fcgt app-routing.module.ts first.component.html app.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import { Routes , RouterModule } from '@angular/router' ; import { FirstComponent } from './first/first.component' ; import { SecondComponent } from './second/second.component' ; import { OneComponent } from './first/one/one.component' ; import { TwoComponent } from './first/two/two.component' ; const routes : Routes = [ { path : 'first' , component : FirstComponent , children : [ { path : 'one' , component : OneComponent }, { path : 'two' , component : TwoComponent }, ]}, { path : 'first/:id' , component : FirstComponent }, { path : 'second' , component : SecondComponent } ]; @ NgModule ({ imports : [ RouterModule . forRoot ( routes )], exports : [ RouterModule ] }) export class AppRoutingModule { } 1 2 3 4 5 6 7 < h3 > Hier ist FirstComponent </ h3 > < ul > < li >< a [ routerLink ]=\"['/ first / one ']\" > first/one </ a ></ li > < li >< a [ routerLink ]=\"['/ first / two ']\" > first/two </ a ></ li > </ ul > < p * ngIf = \"id\" > {{ id }} </ p > < router-outlet ></ router-outlet > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 < h1 > Hier ist AppComponent </ h1 > < ul > < li > < a [ routerLink ]=\"['/']\" > home </ a > </ li > < li > < a [ routerLink ]=\"['/ first ']\" > first </ a > </ li > < li > < ul > < li >< a [ routerLink ]=\"['/ first / one ']\" > first/one </ a ></ li > < li >< a [ routerLink ]=\"['/ first / two ']\" > first/two </ a ></ li > </ ul > </ li > < li > < a [ routerLink ]=\"['/ second ']\" > second </ a > </ li > </ ul > < router-outlet ></ router-outlet > Das bedeutet, dass wir nun zwei <router-outlet></router-outlet> -Elemente haben. Eines in der app.component.html f\u00fcr die Routen first , first/:id und second und eines in der first.component.html f\u00fcr die Routen first/one und first/two .","title":"Verschachtelte Routen"},{"location":"angular/#styles-fur-aktive-routen","text":"Sie k\u00f6nnen angeben, welche CSS-Klassen wirken sollen, falls eine Route aktiv ist. Eine Route ist aktiv, wenn Sie ausgew\u00e4hlt/angewendet werden kann. Dazu wurde in Angular das Attribut routerLinkActive eingef\u00fchrt. Angenommen, die CSS-Klasse myactiveclass soll Anwendung f\u00fcr eine aktuelle (aktive) Route /first Anwendung finden, dann definieren Sie: < a routerLink = \"/first\" routerLinkActive = \"myactiveclass\" > first </ a > Sie k\u00f6nnen auch mehrere CSS-Klassen definieren. Daf\u00fcr gibt es zwei verschiedene M\u00f6glichkeiten: < a routerLink = \"/first\" routerLinkActive = \"myactiveclass1 myactiveclass1\" > first </ a > < a routerLink = \"/first\" [ routerLinkActive ]=\"[' myactiveclass1 ', ' myactiveclass1 ']\" > first </ a > Das Styling aktiver Routen ist insbesondere f\u00fcr Navigationsleisten (Men\u00fcs) hilfreich.","title":"Styles f\u00fcr aktive Routen"},{"location":"angular/#routen-im-programm-wechseln","text":"Der Service Router stellt zwei Methoden zur Verf\u00fcgung, mit denen eine Route im Programm gewechselt werden kann, z.B. nach einer Nutzereingabe oder einer Nutzerinteraktion: navigate() navigateByUrl() Angenommen, wir erweitern unsere Komponente SecondComponent um einen Button. Durch den Klick auf den Button soll von der SecondComponent auf die OneComponent \u00fcber die Route /first/one gewechselt werden: second.component.html second.component.ts 1 2 < h3 > Hier ist SecondComponent </ h3 > < button ( click )=\" changeRoute ()\" > /first/one </ button > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { Component , OnInit } from '@angular/core' ; import { Router } from '@angular/router' ; @ Component ({ selector : 'app-second' , templateUrl : './second.component.html' , styleUrls : [ './second.component.css' ] }) export class SecondComponent implements OnInit { constructor ( private router : Router ) { } ngOnInit () : void { } changeRoute () { this . router . navigate ([ '/first' , 'one' ]); // oder // this.router.navigateByUrl('/first/one'); } } In der second.component.ts sehen wir in Zeile 11, dass der Service Router per dependency injection eingebunden wird. Der Eigenschaft router stehen die Methoden navigate() bzw. navigateByUrl() zur Verf\u00fcgung. Wir sehen in den Zeilen 16-20 die Behandlung des Click -Ereignisses des Buttons. In Zeile 17 wird darin programmatisch die Route /first/one aufgerufen.","title":"Routen im Programm wechseln"},{"location":"angular/#httpclient","text":"Wir wissen bereits, dass Angular eine TypeScript-Framework ist, mit dem sich Single-Page-Anwendungen implementieren lassen. Es wird einmalig eine Seite (h\u00e4ufig index.html ) vom Server geladen und alle weiteren Inhalte werden sukzessive bzw. durch Nutzerinteraktionen gesteuert in diese eine Seite nachgeladen. Die Steuering wird dabei durch den Browser vorgenommen, der das aus TypeScript \u00fcbersetzte JavaScript interpretiert und entsprechend die Templates der Komponenten in die Anwendung einbindet. Das bedeutet, dass im Prinzip die gesamte Logik im Client , d.h. im Browser ausgef\u00fchrt wird. Dem gegen\u00fcber steht jedoch die in der Anwendung verarbeitete Menge von Daten, die typischerweise in einer Datenbank auf einem Server bereitgestellt werden. W\u00e4hrend der Client sich darum k\u00fcmmert, dass Daten angezeigt oder eingegeben werden, muss sich der Server darum k\u00fcmmern, dass Daten in die Datenquelle (die Datenbank) neu eingef\u00fcgt, ausgelesen, aktualisiert und gel\u00f6scht werden k\u00f6nnen. Diese vier Operationen werden mit CRUD abgek\u00fcrzt f\u00fcr: C reate - neue Daten einf\u00fcgen R ead - Daten auslesen U pdate - Daten aktualisieren D elete - Daten l\u00f6schen Der Client und der Server m\u00fcssen dazu nun irgendwie verbunden werden. Diese Verbindung erfolgt mithilfe des Hypertext Transfer Protocols (HTTP) .","title":"HTTPClient"},{"location":"angular2/","text":"JSON und Direktiven \u00b6 In diesem Kapitel geht es darum, wie wir innerhalb einer Komponente mit TypeScript Daten verwalten und diese Daten im HTML verwenden, um sie entweder anzuzeigen oder die Struktur des HTML-Codes mit diesen Daten zu \u00e4ndern. Au\u00dferdem betrachten wir, wie in TypeScript auf Ereignisse reagieren k\u00f6nnen, die die Nutzerinnen beim Verwenden der Anwendung ausl\u00f6sen. Um die Verwaltung von Daten zu diskutieren, betrachten wir zun\u00e4chst, wie Daten in TypeScript/JavaScript notiert werden. F\u00fcr das Beispiel in der Vorlesung wird der Ordner images verwendet ( hier zum Download als zip-Datei ) und stadte.json . staedte.json { \"staedte\" : [ { \"jahr\" : 1237 , \"stadt\" : \"Berlin\" , \"link\" : \"http://de.wikipedia.org/wiki/Berlin\" , \"bild\" : \"assets/images/berlin.png\" }, { \"jahr\" : 1624 , \"stadt\" : \"New York\" , \"link\" : \"http://de.wikipedia.org/wiki/New_York_City\" , \"bild\" : \"assets/images/newyork.png\" }, { \"jahr\" : 1252 , \"stadt\" : \"Stockholm\" , \"link\" : \"http://de.wikipedia.org/wiki/Stockholm\" , \"bild\" : \"assets/images/stockholm.png\" }, { \"jahr\" : 1827 , \"stadt\" : \"Bremerhaven\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremerhaven\" , \"bild\" : \"assets/images/bremerhaven.png\" }, { \"jahr\" : 150 , \"stadt\" : \"Bremen\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremen\" , \"bild\" : \"assets/images/bremen.png\" }, { \"jahr\" : 1202 , \"stadt\" : \"Bernau\" , \"link\" : \"http://de.wikipedia.org/wiki/Bernau_bei_Berlin\" , \"bild\" : \"assets/images/bernau.png\" }, { \"jahr\" : 929 , \"stadt\" : \"Brandenburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Brandenburg_an_der_Havel\" , \"bild\" : \"assets/images/brandenburg.png\" }, { \"jahr\" : 805 , \"stadt\" : \"Magdeburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Magdeburg\" , \"bild\" : \"assets/images/magdeburg.png\" }, { \"jahr\" : 1222 , \"stadt\" : \"Marburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Marburg\" , \"bild\" : \"assets/images/marburg.png\" }, { \"jahr\" : 766 , \"stadt\" : \"Mannheim\" , \"link\" : \"http://de.wikipedia.org/wiki/Mannheim\" , \"bild\" : \"assets/images/mannheim.png\" }, { \"jahr\" : 782 , \"stadt\" : \"Mainz\" , \"link\" : \"http://de.wikipedia.org/wiki/Mainz\" , \"bild\" : \"assets/images/mainz.png\" } ] } Code aus der Vorlesung am 29.11.2021 app.component.html main.component.html main.component.ts main.component.css < h1 > This is app </ h1 > < app-main ></ app-main > < router-outlet ></ router-outlet > <!-- diese Zeile kann auch geloescht werden --> < h3 > {{ title }} </ h3 > < button ( click )=\" changeStatus ()\" type = \" button \" > {{ btn_text }} </ button > <!-- <p>Stadt: {{ staedte_json.staedte[0].stadt }}</p> <p *ngFor=\"let stadt of staedte \">{{ stadt.jahr }}</p> --> < div * ngIf = \"!show\" > Tabelle nicht zu sehen </ div > < table * ngIf = \"show\" class = \"table table-striped\" > < thead > < tr > < th > Nr </ th > < th > Jahr </ th > < th > Stadt </ th > < th > Bild </ th > </ tr > </ thead > < tbody > < tr * ngFor = \"let s of staedte; let i=index \" > < td > {{ i+1 }} </ td > < td > {{ s.jahr }} </ td > < td > {{ s.stadt }} </ td > < td > < a [ href ]=\" s . link \" > < img [ src ]=\" s . bild \" [ alt ]=\" s . stadt \" /> </ a > </ td > </ tr > </ tbody > </ table > import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'app-main' , templateUrl : './main.component.html' , styleUrls : [ './main.component.css' ] }) export class MainComponent implements OnInit { title = 'Alle St\u00e4dte' ; staedte_json = { \"staedte\" : [ { \"jahr\" : 1237 , \"stadt\" : \"Berlin\" , \"link\" : \"http://de.wikipedia.org/wiki/Berlin\" , \"bild\" : \"assets/images/berlin.png\" }, { \"jahr\" : 1624 , \"stadt\" : \"New York\" , \"link\" : \"http://de.wikipedia.org/wiki/New_York_City\" , \"bild\" : \"assets/images/newyork.png\" }, { \"jahr\" : 1252 , \"stadt\" : \"Stockholm\" , \"link\" : \"http://de.wikipedia.org/wiki/Stockholm\" , \"bild\" : \"assets/images/stockholm.png\" }, { \"jahr\" : 1827 , \"stadt\" : \"Bremerhaven\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremerhaven\" , \"bild\" : \"assets/images/bremerhaven.png\" }, { \"jahr\" : 150 , \"stadt\" : \"Bremen\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremen\" , \"bild\" : \"assets/images/bremen.png\" }, { \"jahr\" : 1202 , \"stadt\" : \"Bernau\" , \"link\" : \"http://de.wikipedia.org/wiki/Bernau_bei_Berlin\" , \"bild\" : \"assets/images/bernau.png\" }, { \"jahr\" : 929 , \"stadt\" : \"Brandenburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Brandenburg_an_der_Havel\" , \"bild\" : \"assets/images/brandenburg.png\" }, { \"jahr\" : 805 , \"stadt\" : \"Magdeburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Magdeburg\" , \"bild\" : \"assets/images/magdeburg.png\" }, { \"jahr\" : 1222 , \"stadt\" : \"Marburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Marburg\" , \"bild\" : \"assets/images/marburg.png\" }, { \"jahr\" : 766 , \"stadt\" : \"Mannheim\" , \"link\" : \"http://de.wikipedia.org/wiki/Mannheim\" , \"bild\" : \"assets/images/mannheim.png\" }, { \"jahr\" : 782 , \"stadt\" : \"Mainz\" , \"link\" : \"http://de.wikipedia.org/wiki/Mainz\" , \"bild\" : \"assets/images/mainz.png\" } ] }; staedte = this . staedte_json . staedte ; btn_text = 'Klick mich!' ; show = true ; constructor () { } ngOnInit () : void { console . log ( this . staedte_json ); console . log ( this . staedte_json [ \"staedte\" ]); console . log ( this . staedte_json . staedte ); console . log ( this . staedte_json . staedte [ 0 ]); console . log ( this . staedte_json . staedte [ 0 ]. stadt ); } changeStatus () : void { if ( this . btn_text === 'Klick mich!' ){ this . btn_text = 'Nochmal' ; this . show = false ; } else { this . btn_text = 'Klick mich!' ; this . show = true ; } } } td img { width : 11 % ; } Warning Falls ng add @ng-bootstrap/ng-bootstrap einen compatible -Fehler erzeugt, dann npm install @ng-bootstrap/ng-bootstrap@bootstrap5 ausprobieren. Stets danach nochmal npm install ausf\u00fchren, damit das Bootstrap-Modul installiert wird. Nach ng serve sollten die \u00c4nderungen dann wirksam sein. Sollte auch das nicht klappen, k\u00f6nnen Sie stattdessen auch auch ng add ngx-bootstrap probieren (siehe hier ). Video aus der Vorlesung am 29.11.2021 JavaScript Object Notation (JSON) \u00b6 Eine kurze Einf\u00fchrung zu Objekten in JavaScript haben wir bereits im JavaScript-Kapitel gegeben. Dort haben wir auch gesagt, dass wir auf die Notation solcher Objekte in JavaScript nochmal genauer eingehen wollen. Dies geschieht hier. JavaScript Object Notation (JSON) ist ein Datenaustauschformat, das einerseits einfach f\u00fcr Menschen zu lesen und zu schreiben ist und andererseits gut von Maschinen geparst (analysiert) und erzeugt werden kann. Ein Objekt in JSON beginnt mit einer geschweiften Klammer { und endet mit } . JSON besteht im wesentlichen aus Schl\u00fcssel-Werte-Paaren, die durch Komma getrennt sind. { \"schl\u00fcssel1\" : wert1, \"schl\u00fcssel2\" : wert2, } Die Schl\u00fcssel sind Strings in doppelten Hochkamma ( \"\" ), dann folgt ein Doppelpunkt : und dann folgt der Wert. Werte k\u00f6nnen Strings, Zahlen, Wahrheitswerte, Arrays, Funktionen und Objekte (und null ) sein. Hier ein Beispiel (erweitert aus ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"name\" : \"Georg\" , \"alter\" : 47 , \"verheiratet\" : false , \"beruf\" : null , \"kinder\" : [ { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } ], \"biografie\" : fun c t io n () { re turn t his. na me + \" ist \" + t his.al ter + \" und hat \" + t his.ki n der.le n g t h + \" Kinder.\" ; }, } Der Wert zum Schl\u00fcssel \"name\" in Zeile 2 ist ein String ( string ). Der Wert zum Schl\u00fcssel \"alter\" in Zeile 3 ist eine Zahl ( number ). Der Wert zum Schl\u00fcssel \"verheiratet\" in Zeile 4 ist ein Wahrheitswert ( boolean ). Der Wert zum Schl\u00fcssel \"kinder\" in Zeilen 6-17 ist Array. Die Elemente in diesem Array sind selbst wieder Objekte in JavaScript Object Notation, bestehend aus jeweils drei Schl\u00fcssel-Werte-Paaren. Das \"kinder\" ist numerisch indiziert, d.h. wir k\u00f6nnen \u00fcber den Index 0 auf das erste Kind ( \"Lukas\" ) und \u00fcber den Index 1 auf das zweite Kind ( \"Lisa\" ) zugreifen Zugriff auf ein JSON \u00b6 Der Zugriff auf die Werte eines JSON erfolgt mittels Punktnotation \u00fcber den Schl\u00fcssel. Wir nehmen obiges Beispiel und speichern es in einer Variablen georg : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 let georg = { \"name\" : \"Georg\" , \"alter\" : 47 , \"verheiratet\" : false , \"beruf\" : null , \"kinder\" : [ { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } ], \"biografie\" : function () { return this . name + \" ist \" + this . alter + \" und hat \" + this . kinder . length + \" Kinder.\" ; }, }; Dann k\u00f6nnen wir auf die einzelnen Werte wie folgt zugreifen: georg . name // \"Georg\" georg . alter // 47 let kinder = georg . kinder ; // Array aus 2 Objekten kinder [ 0 ]. name // \"Lukas\" kinder [ 1 ]. name // \"Lisa\" georg . biografie () // \"Georg ist 47 und hat 2 Kinder.\" Man kann \u00fcbrigens auch anstelle der Punktnotation ein JSON wie ein assoziatives Array auffassen und z.B. anstelle von georg.name \u00fcber georg['name'] auf den Wert \"Georg\" zugreifen. Es w\u00e4re auch m\u00f6glich, das \"Kinder\"-Array in ein weiteres JSON umzuwandeln: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // anstelle von: \"kinder\" : [ { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } ], // ginge z.B. auch: \"kinder\" : { \"erstesKind\" : { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, \"zweitesKind\" : { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } }, Dann ist der Zugriff \u00fcber den Index (also z.B. georg.kinder[0] ) nicht mehr m\u00f6glich. Stattdessen aber: georg . kinder . erstesKind . name georg . kinder . zweitesKind . alter Viele Objekte im Array \u00b6 Wenn Sie viele \"gleiche\" Objekte speichern, dann in einem Array. Die folgende Datei zeigt viele Objekte in JSON, die in einem Array abgelegt sind: data/members.json { \"members\" : [ { \"forename\" : \"Catherine\" , \"surname\" : \"Williams\" , \"email\" : \"cwilliamsl@360.cn\" }, { \"forename\" : \"Adam\" , \"surname\" : \"Anderson\" , \"email\" : \"aanderson8@google.fr\" }, { \"forename\" : \"Susan\" , \"surname\" : \"Andrews\" , \"email\" : \"sandrewsn@google.co.jp\" }, { \"forename\" : \"Catherine\" , \"surname\" : \"Andrews\" , \"email\" : \"candrewsp@noaa.gov\" }, { \"forename\" : \"Alan\" , \"surname\" : \"Bradley\" , \"email\" : \"abradley1c@globo.com\" }, { \"forename\" : \"Anne\" , \"surname\" : \"Brooks\" , \"email\" : \"abrooks16@bravesites.com\" }, { \"forename\" : \"Russell\" , \"surname\" : \"Brown\" , \"email\" : \"rbrownq@nifty.com\" }, { \"forename\" : \"Ryan\" , \"surname\" : \"Burton\" , \"email\" : \"rburton18@foxnews.com\" }, { \"forename\" : \"Roy\" , \"surname\" : \"Campbell\" , \"email\" : \"rcampbell1@geocities.com\" }, { \"forename\" : \"Russell\" , \"surname\" : \"Campbell\" , \"email\" : \"rcampbell17@eventbrite.com\" }, { \"forename\" : \"Bonnie\" , \"surname\" : \"Coleman\" , \"email\" : \"bcoleman11@fc2.com\" }, { \"forename\" : \"Ernest\" , \"surname\" : \"Coleman\" , \"email\" : \"ecoleman15@businessweek.com\" }, { \"forename\" : \"Richard\" , \"surname\" : \"Cruz\" , \"email\" : \"rcruz7@unc.edu\" }, { \"forename\" : \"Sean\" , \"surname\" : \"Cruz\" , \"email\" : \"scruz10@answers.com\" }, { \"forename\" : \"Rebecca\" , \"surname\" : \"Cunningham\" , \"email\" : \"rcunninghamd@mac.com\" }, { \"forename\" : \"Margaret\" , \"surname\" : \"Evans\" , \"email\" : \"mevansh@pcworld.com\" }, { \"forename\" : \"Jeffrey\" , \"surname\" : \"Ford\" , \"email\" : \"jford14@cnet.com\" }, { \"forename\" : \"Andrea\" , \"surname\" : \"Gardner\" , \"email\" : \"agardnerv@woothemes.com\" }, { \"forename\" : \"Deborah\" , \"surname\" : \"George\" , \"email\" : \"dgeorge6@furl.net\" }, { \"forename\" : \"Sean\" , \"surname\" : \"Gibson\" , \"email\" : \"sgibsony@alexa.com\" }, { \"forename\" : \"Virginia\" , \"surname\" : \"Graham\" , \"email\" : \"vgrahamk@aol.com\" }, { \"forename\" : \"Steven\" , \"surname\" : \"Hamilton\" , \"email\" : \"shamiltonu@state.tx.us\" }, { \"forename\" : \"Virginia\" , \"surname\" : \"Hawkins\" , \"email\" : \"vhawkinsf@ehow.com\" }, { \"forename\" : \"Edward\" , \"surname\" : \"Hicks\" , \"email\" : \"ehicksc@pcworld.com\" }, { \"forename\" : \"Mark\" , \"surname\" : \"Johnson\" , \"email\" : \"mjohnsonj@hostgator.com\" }, { \"forename\" : \"Ruth\" , \"surname\" : \"Jordan\" , \"email\" : \"rjordan1a@smugmug.com\" }, { \"forename\" : \"Antonio\" , \"surname\" : \"Kim\" , \"email\" : \"akim4@odnoklassniki.ru\" }, { \"forename\" : \"Jennifer\" , \"surname\" : \"Marshall\" , \"email\" : \"jmarshallt@gnu.org\" }, { \"forename\" : \"Eric\" , \"surname\" : \"Matthews\" , \"email\" : \"ematthews5@independent.co.uk\" }, { \"forename\" : \"Raymond\" , \"surname\" : \"Mcdonald\" , \"email\" : \"rmcdonald2@ihg.com\" }, { \"forename\" : \"Eric\" , \"surname\" : \"Miller\" , \"email\" : \"emillere@creativecommons.org\" }, { \"forename\" : \"Jonathan\" , \"surname\" : \"Morales\" , \"email\" : \"jmoralesa@ovh.net\" }, { \"forename\" : \"Marie\" , \"surname\" : \"Morgan\" , \"email\" : \"mmorganb@cloudflare.com\" }, { \"forename\" : \"Amanda\" , \"surname\" : \"Nelson\" , \"email\" : \"anelson13@indiatimes.com\" }, { \"forename\" : \"Lisa\" , \"surname\" : \"Olson\" , \"email\" : \"lolsonr@telegraph.co.uk\" }, { \"forename\" : \"Alice\" , \"surname\" : \"Ortiz\" , \"email\" : \"aortizw@histats.com\" }, { \"forename\" : \"Peter\" , \"surname\" : \"Phillips\" , \"email\" : \"pphillipss@1688.com\" }, { \"forename\" : \"Matthew\" , \"surname\" : \"Porter\" , \"email\" : \"mporter9@europa.eu\" }, { \"forename\" : \"Tammy\" , \"surname\" : \"Ray\" , \"email\" : \"trayx@weather.com\" }, { \"forename\" : \"Mark\" , \"surname\" : \"Richardson\" , \"email\" : \"mrichardson1d@ihg.com\" }, { \"forename\" : \"Joan\" , \"surname\" : \"Roberts\" , \"email\" : \"jroberts12@alibaba.com\" }, { \"forename\" : \"Kathleen\" , \"surname\" : \"Rose\" , \"email\" : \"kroseg@pinterest.com\" }, { \"forename\" : \"Steve\" , \"surname\" : \"Sanders\" , \"email\" : \"ssanders1b@wikispaces.com\" }, { \"forename\" : \"Shirley\" , \"surname\" : \"Scott\" , \"email\" : \"sscottm@macromedia.com\" }, { \"forename\" : \"Lillian\" , \"surname\" : \"Stephens\" , \"email\" : \"lstephens19@hugedomains.com\" }, { \"forename\" : \"Nicole\" , \"surname\" : \"Thompson\" , \"email\" : \"nthompson3@admin.ch\" }, { \"forename\" : \"Marie\" , \"surname\" : \"Thompson\" , \"email\" : \"mthompsonz@yelp.com\" }, { \"forename\" : \"Alan\" , \"surname\" : \"Vasquez\" , \"email\" : \"avasquezo@miibeian.gov.cn\" }, { \"forename\" : \"Mildred\" , \"surname\" : \"Watkins\" , \"email\" : \"mwatkins0@miibeian.gov.cn\" }, { \"forename\" : \"Eugene\" , \"surname\" : \"Williams\" , \"email\" : \"ewilliamsi@deliciousdays.com\" } ] } Ein Array ist stets numerisch indiziert, d.h. Sie k\u00f6nnen unter Verwendung des Index die einzelnen Objekte auslesen. Bindings und Direktiven \u00b6 {{ Interpolation }} \u00b6 Interpolation ist die einfachste Form des data binding . Syntaktisch erkennt man Interpolation an den doppelten geschweiften Klammern {{ Interpolation }} . Beispiel 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Component } from '@angular/core' ; @ Component ({ selector : 'app-lesson' , template : ` <h1>{{ headline }}</h1> <p>Hier steht {{name}}</p> ` , styleUrls : [ './lesson.component.css' ] }) export class LessonComponent { headline = 'Mein Titel' ; name = 'mein Name' ; } Im obigen Beispiel hat die Komponente LessonComponent zwei Eigenschaften: headline und name . In obiger Komponente wird (zur Anschauung) sogenanntes inline templating verwendet, d.h. es gibt keine eigene lesson.component.html -Datei, in der der HTML-Code steht, sondern der HTML-Code wird direkt in die template -Eigenschaft der Typescript-Datei lesson.component.ts eingef\u00fcgt (siehe Zeilen 5-8 im obigen Beispiel). Der HTML-Code wird in backticks eingefasst ( `` ), nicht zu verwechseln mit den einfachen Anf\u00fchrungsstrichen ( '' ). Damit inline templating m\u00f6glich ist, wird die Komponente mit dem Flag -t erzeugt ( inlineTemplate=true ), d.h. unsere Lesson-Komponente wurde mithilfe der CLI wie folgt erzeugt: ng g c lesson -t Eine Interpolation kann auch Ausdr\u00fccke enthalten, die aufgel\u00f6st werden, z.B. < p > 1 + 2 = {{1 + 2}}. </ p > Man kann mithilfe einer Direktive durch ein Array laufen und jedes einzelne Element mithilfe von Interpolation ausgeben: @ Component ({ selector : 'app-lesson' , template : ` <ol> <li *ngFor=\"let day of weekdays\">{{ day }}</li> </ol> ` , styleUrls : [ './lesson.component.css' ] }) export class LessonComponent { weekdays = [ 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday' ]; } Oder es ist m\u00f6glich, Attributen von HTML-Elementen mithilfe von Interpolation Werte zuzuordnen: @ Component ({ selector : 'app-lesson' , template : ` <img src=\"{{ imgUrl }}\" /> ` , styleUrls : [ './lesson.component.css' ] }) export class LessonComponent { imgUrl = 'https://www.dpunkt.de/common/images/cover_masterid/800/12400.jpg' ; } F\u00fcr unser first -Beispiel ist ein ganz einfaches Beispiel f\u00fcr die main -Komponente gezeigt: main.component.ts main.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'htw-main' , templateUrl : './main.component.html' , styleUrls : [ './main.component.css' ] }) export class MainComponent implements OnInit { headline = 'This is main' ; constructor () { } ngOnInit () : void { } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < div id = \"main\" > < h3 > {{ headline }} </ h3 > < div id = \"row\" > < div id = \"left\" > < htw-left > </ htw-left > </ div > < div id = \"right\" > < htw-right > </ htw-right > </ div > </ div > </ div > #Elementreferenzen \u00b6 \u00dcber eine Elementreferenz , die man im HTML-Code mittels des Rautensymbols definiert, kann in Angular sehr einfach auf das Element zugegriffen werden. Das folgende Beispiel zeigt eine solche Elementreferenz : < input # id type = \"text\" value = \"Elementreferenz\" /> {{ id.value }} In dem Beispiel wurde einem Textfeld die Elementreferenz id zugewiesen (kann jeder Name sein), erkennbar an #id . \u00dcber diese Elementreferenz (den Namen) l\u00e4sst sich nun direkt auf dieses Element zugreifen. Im obigen Beispiel wird die value -Eigenschaft ausgelesen, also der Wert, der in das Textfeld eingegeben wird (oder, wie oben, vordefiniert ist). Beachten Sie jedoch, dass der Wert nicht automatisch angepasst wird, sobald eine Eingabe erfolgt. Dies muss durch ein Ereignis (z.B. change oder input ) getriggert werden. [Property Bindings] \u00b6 Insbesondere, wenn Attributen von HTML-Elementen Werte zugeordnet werden sollen (so wie beim imgUrl -Beispiel des Abschnitts {{Interpolation}} ), spricht man von property binding . Property binding spielt eine gro\u00dfe Rolle beim Datenfluss von Eltern-Komponenten auf Kind-Komponenten. Die generelle Idee dabei ist, dass mithilfe von property binding Werte (Daten) an Attribute von HTML-Elementen bindet. Diese HTML-Elemente k\u00f6nnen auch Komponenten sein. Wir betrachten zun\u00e4chst die unterschiedlichen Arten (Notationen) von property binding: < element [ property ]=\" ausdruck \" ></ element > D.h. ein ausdruck wird \u00fcbergeben, der zu einem Wert aufgel\u00f6st wird und dieser Wert wird dem Attribut property \u00fcbergeben. Betrachten wir nochmals das letzte Beispiel aus dem Abschnitt {{Interpolation}} ). Bei diesem Beispiel haben wir Interpolation verwendet, um dem Attribut src des HTML-Elementes img einen Wert zuzuweisen. Das exakt gleiche Verhalten l\u00e4sst sich auch mittels property bindings erzeugen: < img [ src ]=\" imgUrl \" /> <!-- imgUrl = 'https://www.dpunkt.de/common/images/cover_masterid/800/12400.jpg'; --> Das bedeutet f\u00fcr unser first -Beispiel, dass die beiden <img> -Definitionen gleich sind: header.component.html header.component.ts 1 2 3 4 < p > header works! < img src = \"{{ imgUrl }}\" alt = \"{{ description }}\" width = \"53px;\" /> < img [ src ]=\" imgUrl \" [ alt ]=\" description \" width = \"53px;\" /> </ p > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'htw-header' , templateUrl : './header.component.html' , styleUrls : [ './header.component.css' ] }) export class HeaderComponent implements OnInit { imgUrl = '/assets/images/fiw.jpg' ; description = 'FIW Logo' ; constructor () { } ngOnInit () : void { } } Neben diesen \"allgemeinen\" property bindings gibt es auch noch \"spezielle\" property bindings, n\u00e4mlich class bindings und style bindings . Bei class bindings wird das Pr\u00e4fix class vor die property (die entsprechende CSS-Klasse) gesetzt: < element [ class . class1 ]=\" class1enabled \" [ class . class2 ]=\" class2enabled \" ... ></ element > D.h. die CSS-Klasse class1 ist genau dann wirksam, wenn der Ausdruck class1enabled true ist und class2 ist genau dann wirksam, wenn der Ausdruck class2enabled true ist usw. Bei den style bindings werden jedoch gar keine Ausdr\u00fccke, sondern Werte \u00fcbergeben: < element [ style . color ] (Event Bindings) \u00b6 In den property bindings haben wir gesehen, wie Werte Attributen (Eigenschaften) von Elementen zugeordnet werden k\u00f6nnen. Aus JavaScript ist auch bekannt, dass Ereignisse Attribute von Elementen sein k\u00f6nnen, z.B. onClick , onKeyup , onChange usw. Dabei handelt es sich um sogenannte native DOM-Ereignisse . Neben der M\u00f6glichkeit, solche nativen DOM-Ereigniss zu behandeln, bietet Angular auch die M\u00f6glichkeit, eigene Ereignisse zu definieren und diese zu behandeln. Wir betrachten beide M\u00f6glichkeiten und beginnen mit den nativen Ereignissen. Native DOM-Ereignisse \u00b6 In HTML sieht das unter Aufruf einer JavaScript-Funktion f\u00fcr die Ereignisbahandlung dann typischerweise (hier das Click-Ereignis f\u00fcr einen Button) wie folgt aus: HTML JavaScript < button onClick = \"doSomething()\" > Click here! </ button > function doSomething () { // something to do } In Angular ist das Prinzip das gleiche, nur dass das Ereignis in runden Klammern genannt und an dieses Ereignis die Ereignisbehandlung gebunden wird ( event binding ). Das bedeutet, das Angular-Template f\u00fcr das obige Beispiel sieht wie folgt aus: Angular-Template Angular-Typescript < button ( click )=\" doSomething ()\" > Click here! </ button > export class EventsComponent { doSomething () { // something to do } } Dieses Prinzip gilt f\u00fcr alle nativen DOM-Ereignisse. Hier ein kurzer \u00dcberblick \u00fcber die wichtigsten (f\u00fcr eine umfangreichere Liste siehe hier oder hier ): Ereignis Beschreibung click Mausklick auf das Element change Der Inhalt/Wert eines Elementes hat sich ge\u00e4ndert mouseover die Maus wird \u00fcber das Element bewegt mouseout die Maus wird vom Element wegbewegt keydown eine Taste der Tastatur wird gedr\u00fcckt keyup Loslassen einer Taste load der Browser hat die Seite vollst\u00e4ndig geladen focus Fokussieren des Elements (z.B. Anklicken) blur Verlieren des Fokus (z.B. Klick au\u00dferhalb) submit Abschicken eines Formulars copy , paste Kopieren, Einf\u00fcgen von Text Einen kleinen Unterschied gibt es noch bei der \u00dcbergabe des Ereignisses an die das Ereignis behandelnde Funktion zu beachten. W\u00e4hrend in plain JavaScript das Ereignis mit event der Funktion \u00fcbergeben wird, erfolgt die \u00dcbergabe des Ereignisses in Angular mit $event . Beispiel: Angular-Template Angular-Typescript < input ( change )=\" showPayload ($ event )\" type = \"text\" /> export class EventsComponent { showPayload ( e : Event ) { console . log ( e ); } } Alle Events (in TypeScript/Angular) sind vom Typ Event . Es gibt noch speziellere Eventtypen, die aber alle auf dem Interface Event basieren, z.B. MouseEvent , InputEvent , KeyboardEvent , UIEvent , ClipboardEvent . Weitere Details siehe hier . Die einfache JavaScript-Attributschreibweise kann in Angular nicht verwendet werden, sondern immer nur die event binding -Schreibweise von Angular (mit den runden Klammern)! Eigene Ereignisse \u00b6 F\u00fcr eine Komponente kann ein eigenes - nicht natives - Ereignis definiert werden. Dies geschieht, indem f\u00fcr eine Komponente eine neue Eigenschaft (z.B. myEvent ) definiert wird und diese vom Typ EventEmitter deklariert wird. Mithilfe von Generics kann der Typ des Events angegeben werden, der ausgel\u00f6st werden soll - wenn Sie den Typ nicht genau kennen, verwenden Sie any . Soll das Ereignis an die Elternkomponente weitergeleitet werden, was meistens der Fall ist, wird der Decorator @Output() verwendet. Das Ausl\u00f6sen des Events geschieht dann durch die emit() -Methode von EventEmitter . Hier ein typisches Beispiel (zun\u00e4chst die Kindkomponente EventsComponent - also events.component.html und events.component.ts ): .html .ts < button ( click )=\" emitMyEvent ()\" > Click here! </ button > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { Component , EventEmitter , Output } from '@angular/core' ; @ Component ({ selector : 'app-events' , templateUrl : './events.component.html' , styleUrls : [ './events.component.css' ] }) export class EventsComponent { @ Output () myEvent = new EventEmitter < any > (); emitMyEvent () { this . myEvent . emit (); } } Die .html -Datei definiert einen Button mit dem nativen Ereignis click . Dieses wird durch die Methode emitMyEvent() behandelt. In der .ts -Datei ist diese Methode definiert (Zeilen 11-13). Darin wird das eigene Event myEvent ausgel\u00f6st. Dieses Event ist ein Objekt vom Typ EventEmitter , typisiert als any (beliebiger Typ). Das Ausl\u00f6sen dieses Events wird an die aufrufende Komponente (die Elternkomponente) ausgegeben (Decorator @Output() ). Deklaration der Eigenschaft und Dekorieren mit @Output() in Zeile 9. Das Ausl\u00f6sen des eigenen Events erfolgt durch den Aufruf der Methode emit() aus EventEmitter (Zeile 12). In der Elternkomponente kann dieses Ereignis nun empfangen werden (Beispiel einer Elternkomponente AppComponent - also app.component.html und app.component.ts ): .html .ts < app-events ( myEvent )=\" handleEventFromEventsComponent ()\" ></ app-events > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Component } from '@angular/core' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { handleEventFromEventsComponent () { console . log ( 'myEvent in der Kindkomponente ausgel\u00f6st' ); } } In der AppComponent (das kann nat\u00fcrlich eine beliebige Komponente sein), wird die EventsComponent eingebunden (siehe <app-events> im Template der AppComponent ). Dadurch entsteht die Hierarchie Elternkomponente AppComponent \u2192 Kindkomponente EventsComponent im DOM. Mithilfe von event binding wird die Behandlung des Ereignisses myEvent an die Methode handleEventFromEventsComponent() gebunden. In dieser Methode erfolgt hier einfach nur eine Ausgabe auf die Konsole. Interessant ist, dass wir dadurch die M\u00f6glichkeit haben, Daten von der Kindkomponente zur Elternkomponente flie\u00dfen zu lassen. Dazu \u00fcbergeben wir diese Daten als payload des Ereignisses. Daf\u00fcr typisieren wir EventEmitter mit dem Typ, von dem wir Daten \u00fcbergeben wollen (z.B. Book - siehe B\u00fccher-App ). Die beiden obigen Beispiele sehen dann wie folgt aus (zuerst wieder EventsComponent ): .html .ts < button ( click )=\" emitMyEvent ( book )\" > Click here! </ button > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { Component , EventEmitter , Output } from '@angular/core' ; @ Component ({ selector : 'app-events' , templateUrl : './events.component.html' , styleUrls : [ './events.component.css' ] }) export class EventsComponent { @ Output () myEvent = new EventEmitter < Book > (); emitMyEvent ( book : Book ) { this . myEvent . emit ( book ); } } Im Template (HTML) werden die Daten der Ereignisbehandlung \u00fcbergeben. Das EventEmitter -Objekt ist mit dem konkreten Datentyp typisiert. Bei Aufruf der Methode emit() werden die Daten an die Elternkomponente \u00fcbergeben. Die Elternkomponente (hier wieder AppComponent kann diese Daten, die von der Kindkomponente an die Elternkomponente via Ereignis geflossen sind, nun weiterverarbeiten bzw. darstellen): .html .ts < app-events ( myEvent )=\" handleEventFromEventsComponent ($ event )\" ></ app-events > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Component } from '@angular/core' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { handleEventFromEventsComponent ( book : Book ) { console . log ( book . title ); } } Wichtig beim event binding der Elternkomponente ist, dass der payload des Ereignisses mit $event \u00fcbergeben wird (siehe auch Native DOM-Ereignisse ). Zusammenfassung In den letzten drei Abschnitten Interpolation, Property Binding und Event Binding haben wir uns mit Datenfluss besch\u00e4ftigt. Interpolation wird verwendet, um innerhalb einer Komponente die in der TypeScript-Klasse definierten Daten im Template darzustellen. Mithilfe von Property Binding kann die aufrufende Komponente (Elternkomponente) der aufgerufenen Kopmponente (Kindkomponente) Daten \u00fcbergeben. Mithilfe von Event Binding kann die Kindkomponente der Elternkomponente mithilfe eines eigenen Ereignisses Daten \u00fcbergeben. F\u00fcr die Anwendung dieser Konzepte schauen Sie sich B\u00fccher-App\u2192Datenfluss zwischen Komponenten an. Direktiven \u00b6 In Angular gibt es 3 Arten sogenannter Direktiven (engl. Directives ): Komponentendirektiven (Components\u2014directives) Attributdirektiven (Attribute Directives) Strukturdirektiven (Structural-Direktives) Komponentendirektiven sind die meistverwendete Art und bereits in Angular \u2192 Kompnenten betrachtet. Attribut- und Strukturdirektiven k\u00f6nnen als HTML-Attribute verstanden werden, die dem HTML-Element ein zus\u00e4tzliches Verhalten hinzuf\u00fcgt. Attributdirektiven wirken sich das innere Verhalten eines HTML-Elementes aus (z.B. k\u00f6nnen damit CSS-Eigenschaften ge\u00e4ndert, hinzugef\u00fcgt oder gel\u00f6scht werden). Mit Strukturdirektiven kann die Struktur des DOMs ge\u00e4ndert werden (z.B. k\u00f6nnen ganze HTML-Elemente dem DOM-Baum hinzugef\u00fcgt werden). Strukturdirektiven \u00b6 Strukturdirektiven beginnen immer mit einem Stern * . Die bekanntesten Vertreter sind *ngFor *ngIf *ngSwitch Diese sind auch in angular.io erl\u00e4utert. Wir erl\u00e4utern die darin aufgef\u00fchrten Beispiele und beginnen mit *ngIf : 1 2 3 4 5 6 7 8 < p * ngIf = \"true\" > Expression is true and ngIf is true. This paragraph is in the DOM. </ p > < p * ngIf = \"false\" > Expression is false and ngIf is false. This paragraph is not in the DOM. </ p > Die Direktive *ngIf wird also wie ein Attribut des <p> -Elementes behandelt. Das Attribut *ngIf hat entweder den Wert \"true\" oder den Wert \"false\" . Ja nach Wert des Attributes wird das jeweilige <p> -Element in den DOM-Baum eingebunden. Also entweder das <p> -Element aus den Codezeilen 1 - 4 (bei Wert \"true\" ) oder das <p> -Element aus den Codezeilen 5 - 8 (bei Wert \"false\" ). In einer echten Anwendung ergibt sich der Wert des Attributes/der Direktive meistens aus dem Wert einer boole'schen Variablen oder einem anderen boole'schen Ausdruck. Das nicht dargestellte Element ist auch nicht Teil des DOMs! Es ist also nicht einfach nur auf hide gesetzt, sondern es ist gar nicht im DOM vorhanden. Intern wird aus der *ngIf -Direktive \u00fcbrigens ein sogenanntes Property-Binding : < ng-template [ ngIf ]=\" true \" > < p > Expression is true and ngIf is true. This paragraph is in the DOM. </ p > </ ng-template > < ng-template [ ngIf ]=\" false \" > < p > Expression is false and ngIf is false. This paragraph is not in the DOM. </ p > </ ng-template > Die *ngFor -Direktive ist etwas komplexer als *ngIf . F\u00fcr *ngFor ben\u00f6tigen wir mindestens eine Liste (oder ein Array) und eine Laufvariable, die die Werte aus der Liste annehmen kann. Im folgenden Beispiel ist i unsere laufvariable und [1, 2, 3, 4, 5, 6] unser Array. < div * ngFor = \"let i of [1, 2, 3, 4, 5, 6]\" > {{ i }} </ div > F\u00fcr jeden Wert aus der Liste wird ein eigenes <div> - Element erzeugt. Der DOM-Baum sieht f\u00fcr obiges Beispiel also wie folgt aus (Angular-Attribute weggelassen): < div > 1 </ div > < div > 2 </ div > < div > 3 </ div > < div > 4 </ div > < div > 5 </ div > < div > 6 </ div > Au\u00dferdem stellt *ngFor noch einige Hilfsvariablen zur Verf\u00fcgung, die ebenfalls genutzt werden k\u00f6nnen: index (Index des aktuellen Elementes 0, 1, 2, ... ) first (ist true , wenn erstes Element, sonst false ) last (ist true , wenn letztes Element, sonst false ) even (ist true , wenn Index gerade , sonst false ) odd (ist true , wenn Index ungerade , sonst false ) Folgend ein komplexeres Beispiel unter Verwendung einiger Hilfsvariablen: 1 2 3 4 5 6 7 8 9 < div * ngFor = \"let value of [1, 2, 3, 4, 5, 6]; index as i; first as f; last as l; odd as o;\" > < div * ngIf = \"f\" > Start </ div > < div [ style . color ]=\" o ? ' red ' : ' blue '\" > {{ i }} : {{ value }} </ div > < div * ngIf = \"l\" > Ende </ div > </ div > In Zeile 1 ist unsere Laufvariable durch das Array nun value . Au\u00dferdem wird der jeweilige Wert von index in der Variablen i (Zeilennummer 2 ) gespeichert, der Wert von first in der Variablen f (Zeilennummer 3 ), der Wert von last in der Variablen l (Zeilennummer 4 ) und der Wert von odd in der Variablen o (Zeilennummer 5 ) - die Hilfsvariable even betrachten wir hier nicht, da deren Wert genau der Negation von odd entspricht. In Zeile 6 wenden wir die *ngIf -Direktive an: ein <div> mit dem Inhalt Start wird vor dem ersten Element aus dem Array ausgegeben. F\u00fcr jedes weitere Element nicht mehr. In Zeile 7 erfolgt ein Property Binding : die color -Eigenschaft bekommt einen Wert zugewiesen. Der Wert ist jedoch abh\u00e4ngig davon, ob o wahr ist (dann Wert red ) oder falsch (dann Wert blue ). Zeile 7 zeigt au\u00dferdem wie mithilfe von Interpolation der Wert von i und der Wert von value , getrennt mit : ausgegeben werden. Die Ausgabe ist also: Aufgabe Informieren Sie sich auch \u00fcber die *ngSwitch -Direktive. Implementieren Sie ein Beispiel, in dem Sie die 3 Direktiven *ngIf , *ngFor und *ngSwitch anwenden.","title":"JSON und Direktiven"},{"location":"angular2/#json-und-direktiven","text":"In diesem Kapitel geht es darum, wie wir innerhalb einer Komponente mit TypeScript Daten verwalten und diese Daten im HTML verwenden, um sie entweder anzuzeigen oder die Struktur des HTML-Codes mit diesen Daten zu \u00e4ndern. Au\u00dferdem betrachten wir, wie in TypeScript auf Ereignisse reagieren k\u00f6nnen, die die Nutzerinnen beim Verwenden der Anwendung ausl\u00f6sen. Um die Verwaltung von Daten zu diskutieren, betrachten wir zun\u00e4chst, wie Daten in TypeScript/JavaScript notiert werden. F\u00fcr das Beispiel in der Vorlesung wird der Ordner images verwendet ( hier zum Download als zip-Datei ) und stadte.json . staedte.json { \"staedte\" : [ { \"jahr\" : 1237 , \"stadt\" : \"Berlin\" , \"link\" : \"http://de.wikipedia.org/wiki/Berlin\" , \"bild\" : \"assets/images/berlin.png\" }, { \"jahr\" : 1624 , \"stadt\" : \"New York\" , \"link\" : \"http://de.wikipedia.org/wiki/New_York_City\" , \"bild\" : \"assets/images/newyork.png\" }, { \"jahr\" : 1252 , \"stadt\" : \"Stockholm\" , \"link\" : \"http://de.wikipedia.org/wiki/Stockholm\" , \"bild\" : \"assets/images/stockholm.png\" }, { \"jahr\" : 1827 , \"stadt\" : \"Bremerhaven\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremerhaven\" , \"bild\" : \"assets/images/bremerhaven.png\" }, { \"jahr\" : 150 , \"stadt\" : \"Bremen\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremen\" , \"bild\" : \"assets/images/bremen.png\" }, { \"jahr\" : 1202 , \"stadt\" : \"Bernau\" , \"link\" : \"http://de.wikipedia.org/wiki/Bernau_bei_Berlin\" , \"bild\" : \"assets/images/bernau.png\" }, { \"jahr\" : 929 , \"stadt\" : \"Brandenburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Brandenburg_an_der_Havel\" , \"bild\" : \"assets/images/brandenburg.png\" }, { \"jahr\" : 805 , \"stadt\" : \"Magdeburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Magdeburg\" , \"bild\" : \"assets/images/magdeburg.png\" }, { \"jahr\" : 1222 , \"stadt\" : \"Marburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Marburg\" , \"bild\" : \"assets/images/marburg.png\" }, { \"jahr\" : 766 , \"stadt\" : \"Mannheim\" , \"link\" : \"http://de.wikipedia.org/wiki/Mannheim\" , \"bild\" : \"assets/images/mannheim.png\" }, { \"jahr\" : 782 , \"stadt\" : \"Mainz\" , \"link\" : \"http://de.wikipedia.org/wiki/Mainz\" , \"bild\" : \"assets/images/mainz.png\" } ] } Code aus der Vorlesung am 29.11.2021 app.component.html main.component.html main.component.ts main.component.css < h1 > This is app </ h1 > < app-main ></ app-main > < router-outlet ></ router-outlet > <!-- diese Zeile kann auch geloescht werden --> < h3 > {{ title }} </ h3 > < button ( click )=\" changeStatus ()\" type = \" button \" > {{ btn_text }} </ button > <!-- <p>Stadt: {{ staedte_json.staedte[0].stadt }}</p> <p *ngFor=\"let stadt of staedte \">{{ stadt.jahr }}</p> --> < div * ngIf = \"!show\" > Tabelle nicht zu sehen </ div > < table * ngIf = \"show\" class = \"table table-striped\" > < thead > < tr > < th > Nr </ th > < th > Jahr </ th > < th > Stadt </ th > < th > Bild </ th > </ tr > </ thead > < tbody > < tr * ngFor = \"let s of staedte; let i=index \" > < td > {{ i+1 }} </ td > < td > {{ s.jahr }} </ td > < td > {{ s.stadt }} </ td > < td > < a [ href ]=\" s . link \" > < img [ src ]=\" s . bild \" [ alt ]=\" s . stadt \" /> </ a > </ td > </ tr > </ tbody > </ table > import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'app-main' , templateUrl : './main.component.html' , styleUrls : [ './main.component.css' ] }) export class MainComponent implements OnInit { title = 'Alle St\u00e4dte' ; staedte_json = { \"staedte\" : [ { \"jahr\" : 1237 , \"stadt\" : \"Berlin\" , \"link\" : \"http://de.wikipedia.org/wiki/Berlin\" , \"bild\" : \"assets/images/berlin.png\" }, { \"jahr\" : 1624 , \"stadt\" : \"New York\" , \"link\" : \"http://de.wikipedia.org/wiki/New_York_City\" , \"bild\" : \"assets/images/newyork.png\" }, { \"jahr\" : 1252 , \"stadt\" : \"Stockholm\" , \"link\" : \"http://de.wikipedia.org/wiki/Stockholm\" , \"bild\" : \"assets/images/stockholm.png\" }, { \"jahr\" : 1827 , \"stadt\" : \"Bremerhaven\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremerhaven\" , \"bild\" : \"assets/images/bremerhaven.png\" }, { \"jahr\" : 150 , \"stadt\" : \"Bremen\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremen\" , \"bild\" : \"assets/images/bremen.png\" }, { \"jahr\" : 1202 , \"stadt\" : \"Bernau\" , \"link\" : \"http://de.wikipedia.org/wiki/Bernau_bei_Berlin\" , \"bild\" : \"assets/images/bernau.png\" }, { \"jahr\" : 929 , \"stadt\" : \"Brandenburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Brandenburg_an_der_Havel\" , \"bild\" : \"assets/images/brandenburg.png\" }, { \"jahr\" : 805 , \"stadt\" : \"Magdeburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Magdeburg\" , \"bild\" : \"assets/images/magdeburg.png\" }, { \"jahr\" : 1222 , \"stadt\" : \"Marburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Marburg\" , \"bild\" : \"assets/images/marburg.png\" }, { \"jahr\" : 766 , \"stadt\" : \"Mannheim\" , \"link\" : \"http://de.wikipedia.org/wiki/Mannheim\" , \"bild\" : \"assets/images/mannheim.png\" }, { \"jahr\" : 782 , \"stadt\" : \"Mainz\" , \"link\" : \"http://de.wikipedia.org/wiki/Mainz\" , \"bild\" : \"assets/images/mainz.png\" } ] }; staedte = this . staedte_json . staedte ; btn_text = 'Klick mich!' ; show = true ; constructor () { } ngOnInit () : void { console . log ( this . staedte_json ); console . log ( this . staedte_json [ \"staedte\" ]); console . log ( this . staedte_json . staedte ); console . log ( this . staedte_json . staedte [ 0 ]); console . log ( this . staedte_json . staedte [ 0 ]. stadt ); } changeStatus () : void { if ( this . btn_text === 'Klick mich!' ){ this . btn_text = 'Nochmal' ; this . show = false ; } else { this . btn_text = 'Klick mich!' ; this . show = true ; } } } td img { width : 11 % ; } Warning Falls ng add @ng-bootstrap/ng-bootstrap einen compatible -Fehler erzeugt, dann npm install @ng-bootstrap/ng-bootstrap@bootstrap5 ausprobieren. Stets danach nochmal npm install ausf\u00fchren, damit das Bootstrap-Modul installiert wird. Nach ng serve sollten die \u00c4nderungen dann wirksam sein. Sollte auch das nicht klappen, k\u00f6nnen Sie stattdessen auch auch ng add ngx-bootstrap probieren (siehe hier ). Video aus der Vorlesung am 29.11.2021","title":"JSON und Direktiven"},{"location":"angular2/#javascript-object-notation-json","text":"Eine kurze Einf\u00fchrung zu Objekten in JavaScript haben wir bereits im JavaScript-Kapitel gegeben. Dort haben wir auch gesagt, dass wir auf die Notation solcher Objekte in JavaScript nochmal genauer eingehen wollen. Dies geschieht hier. JavaScript Object Notation (JSON) ist ein Datenaustauschformat, das einerseits einfach f\u00fcr Menschen zu lesen und zu schreiben ist und andererseits gut von Maschinen geparst (analysiert) und erzeugt werden kann. Ein Objekt in JSON beginnt mit einer geschweiften Klammer { und endet mit } . JSON besteht im wesentlichen aus Schl\u00fcssel-Werte-Paaren, die durch Komma getrennt sind. { \"schl\u00fcssel1\" : wert1, \"schl\u00fcssel2\" : wert2, } Die Schl\u00fcssel sind Strings in doppelten Hochkamma ( \"\" ), dann folgt ein Doppelpunkt : und dann folgt der Wert. Werte k\u00f6nnen Strings, Zahlen, Wahrheitswerte, Arrays, Funktionen und Objekte (und null ) sein. Hier ein Beispiel (erweitert aus ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 { \"name\" : \"Georg\" , \"alter\" : 47 , \"verheiratet\" : false , \"beruf\" : null , \"kinder\" : [ { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } ], \"biografie\" : fun c t io n () { re turn t his. na me + \" ist \" + t his.al ter + \" und hat \" + t his.ki n der.le n g t h + \" Kinder.\" ; }, } Der Wert zum Schl\u00fcssel \"name\" in Zeile 2 ist ein String ( string ). Der Wert zum Schl\u00fcssel \"alter\" in Zeile 3 ist eine Zahl ( number ). Der Wert zum Schl\u00fcssel \"verheiratet\" in Zeile 4 ist ein Wahrheitswert ( boolean ). Der Wert zum Schl\u00fcssel \"kinder\" in Zeilen 6-17 ist Array. Die Elemente in diesem Array sind selbst wieder Objekte in JavaScript Object Notation, bestehend aus jeweils drei Schl\u00fcssel-Werte-Paaren. Das \"kinder\" ist numerisch indiziert, d.h. wir k\u00f6nnen \u00fcber den Index 0 auf das erste Kind ( \"Lukas\" ) und \u00fcber den Index 1 auf das zweite Kind ( \"Lisa\" ) zugreifen","title":"JavaScript Object Notation (JSON)"},{"location":"angular2/#zugriff-auf-ein-json","text":"Der Zugriff auf die Werte eines JSON erfolgt mittels Punktnotation \u00fcber den Schl\u00fcssel. Wir nehmen obiges Beispiel und speichern es in einer Variablen georg : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 let georg = { \"name\" : \"Georg\" , \"alter\" : 47 , \"verheiratet\" : false , \"beruf\" : null , \"kinder\" : [ { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } ], \"biografie\" : function () { return this . name + \" ist \" + this . alter + \" und hat \" + this . kinder . length + \" Kinder.\" ; }, }; Dann k\u00f6nnen wir auf die einzelnen Werte wie folgt zugreifen: georg . name // \"Georg\" georg . alter // 47 let kinder = georg . kinder ; // Array aus 2 Objekten kinder [ 0 ]. name // \"Lukas\" kinder [ 1 ]. name // \"Lisa\" georg . biografie () // \"Georg ist 47 und hat 2 Kinder.\" Man kann \u00fcbrigens auch anstelle der Punktnotation ein JSON wie ein assoziatives Array auffassen und z.B. anstelle von georg.name \u00fcber georg['name'] auf den Wert \"Georg\" zugreifen. Es w\u00e4re auch m\u00f6glich, das \"Kinder\"-Array in ein weiteres JSON umzuwandeln: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // anstelle von: \"kinder\" : [ { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } ], // ginge z.B. auch: \"kinder\" : { \"erstesKind\" : { \"name\" : \"Lukas\" , \"alter\" : 19 , \"schulabschluss\" : \"Gymnasium\" }, \"zweitesKind\" : { \"name\" : \"Lisa\" , \"alter\" : 14 , \"schulabschluss\" : null } }, Dann ist der Zugriff \u00fcber den Index (also z.B. georg.kinder[0] ) nicht mehr m\u00f6glich. Stattdessen aber: georg . kinder . erstesKind . name georg . kinder . zweitesKind . alter","title":"Zugriff auf ein JSON"},{"location":"angular2/#viele-objekte-im-array","text":"Wenn Sie viele \"gleiche\" Objekte speichern, dann in einem Array. Die folgende Datei zeigt viele Objekte in JSON, die in einem Array abgelegt sind: data/members.json { \"members\" : [ { \"forename\" : \"Catherine\" , \"surname\" : \"Williams\" , \"email\" : \"cwilliamsl@360.cn\" }, { \"forename\" : \"Adam\" , \"surname\" : \"Anderson\" , \"email\" : \"aanderson8@google.fr\" }, { \"forename\" : \"Susan\" , \"surname\" : \"Andrews\" , \"email\" : \"sandrewsn@google.co.jp\" }, { \"forename\" : \"Catherine\" , \"surname\" : \"Andrews\" , \"email\" : \"candrewsp@noaa.gov\" }, { \"forename\" : \"Alan\" , \"surname\" : \"Bradley\" , \"email\" : \"abradley1c@globo.com\" }, { \"forename\" : \"Anne\" , \"surname\" : \"Brooks\" , \"email\" : \"abrooks16@bravesites.com\" }, { \"forename\" : \"Russell\" , \"surname\" : \"Brown\" , \"email\" : \"rbrownq@nifty.com\" }, { \"forename\" : \"Ryan\" , \"surname\" : \"Burton\" , \"email\" : \"rburton18@foxnews.com\" }, { \"forename\" : \"Roy\" , \"surname\" : \"Campbell\" , \"email\" : \"rcampbell1@geocities.com\" }, { \"forename\" : \"Russell\" , \"surname\" : \"Campbell\" , \"email\" : \"rcampbell17@eventbrite.com\" }, { \"forename\" : \"Bonnie\" , \"surname\" : \"Coleman\" , \"email\" : \"bcoleman11@fc2.com\" }, { \"forename\" : \"Ernest\" , \"surname\" : \"Coleman\" , \"email\" : \"ecoleman15@businessweek.com\" }, { \"forename\" : \"Richard\" , \"surname\" : \"Cruz\" , \"email\" : \"rcruz7@unc.edu\" }, { \"forename\" : \"Sean\" , \"surname\" : \"Cruz\" , \"email\" : \"scruz10@answers.com\" }, { \"forename\" : \"Rebecca\" , \"surname\" : \"Cunningham\" , \"email\" : \"rcunninghamd@mac.com\" }, { \"forename\" : \"Margaret\" , \"surname\" : \"Evans\" , \"email\" : \"mevansh@pcworld.com\" }, { \"forename\" : \"Jeffrey\" , \"surname\" : \"Ford\" , \"email\" : \"jford14@cnet.com\" }, { \"forename\" : \"Andrea\" , \"surname\" : \"Gardner\" , \"email\" : \"agardnerv@woothemes.com\" }, { \"forename\" : \"Deborah\" , \"surname\" : \"George\" , \"email\" : \"dgeorge6@furl.net\" }, { \"forename\" : \"Sean\" , \"surname\" : \"Gibson\" , \"email\" : \"sgibsony@alexa.com\" }, { \"forename\" : \"Virginia\" , \"surname\" : \"Graham\" , \"email\" : \"vgrahamk@aol.com\" }, { \"forename\" : \"Steven\" , \"surname\" : \"Hamilton\" , \"email\" : \"shamiltonu@state.tx.us\" }, { \"forename\" : \"Virginia\" , \"surname\" : \"Hawkins\" , \"email\" : \"vhawkinsf@ehow.com\" }, { \"forename\" : \"Edward\" , \"surname\" : \"Hicks\" , \"email\" : \"ehicksc@pcworld.com\" }, { \"forename\" : \"Mark\" , \"surname\" : \"Johnson\" , \"email\" : \"mjohnsonj@hostgator.com\" }, { \"forename\" : \"Ruth\" , \"surname\" : \"Jordan\" , \"email\" : \"rjordan1a@smugmug.com\" }, { \"forename\" : \"Antonio\" , \"surname\" : \"Kim\" , \"email\" : \"akim4@odnoklassniki.ru\" }, { \"forename\" : \"Jennifer\" , \"surname\" : \"Marshall\" , \"email\" : \"jmarshallt@gnu.org\" }, { \"forename\" : \"Eric\" , \"surname\" : \"Matthews\" , \"email\" : \"ematthews5@independent.co.uk\" }, { \"forename\" : \"Raymond\" , \"surname\" : \"Mcdonald\" , \"email\" : \"rmcdonald2@ihg.com\" }, { \"forename\" : \"Eric\" , \"surname\" : \"Miller\" , \"email\" : \"emillere@creativecommons.org\" }, { \"forename\" : \"Jonathan\" , \"surname\" : \"Morales\" , \"email\" : \"jmoralesa@ovh.net\" }, { \"forename\" : \"Marie\" , \"surname\" : \"Morgan\" , \"email\" : \"mmorganb@cloudflare.com\" }, { \"forename\" : \"Amanda\" , \"surname\" : \"Nelson\" , \"email\" : \"anelson13@indiatimes.com\" }, { \"forename\" : \"Lisa\" , \"surname\" : \"Olson\" , \"email\" : \"lolsonr@telegraph.co.uk\" }, { \"forename\" : \"Alice\" , \"surname\" : \"Ortiz\" , \"email\" : \"aortizw@histats.com\" }, { \"forename\" : \"Peter\" , \"surname\" : \"Phillips\" , \"email\" : \"pphillipss@1688.com\" }, { \"forename\" : \"Matthew\" , \"surname\" : \"Porter\" , \"email\" : \"mporter9@europa.eu\" }, { \"forename\" : \"Tammy\" , \"surname\" : \"Ray\" , \"email\" : \"trayx@weather.com\" }, { \"forename\" : \"Mark\" , \"surname\" : \"Richardson\" , \"email\" : \"mrichardson1d@ihg.com\" }, { \"forename\" : \"Joan\" , \"surname\" : \"Roberts\" , \"email\" : \"jroberts12@alibaba.com\" }, { \"forename\" : \"Kathleen\" , \"surname\" : \"Rose\" , \"email\" : \"kroseg@pinterest.com\" }, { \"forename\" : \"Steve\" , \"surname\" : \"Sanders\" , \"email\" : \"ssanders1b@wikispaces.com\" }, { \"forename\" : \"Shirley\" , \"surname\" : \"Scott\" , \"email\" : \"sscottm@macromedia.com\" }, { \"forename\" : \"Lillian\" , \"surname\" : \"Stephens\" , \"email\" : \"lstephens19@hugedomains.com\" }, { \"forename\" : \"Nicole\" , \"surname\" : \"Thompson\" , \"email\" : \"nthompson3@admin.ch\" }, { \"forename\" : \"Marie\" , \"surname\" : \"Thompson\" , \"email\" : \"mthompsonz@yelp.com\" }, { \"forename\" : \"Alan\" , \"surname\" : \"Vasquez\" , \"email\" : \"avasquezo@miibeian.gov.cn\" }, { \"forename\" : \"Mildred\" , \"surname\" : \"Watkins\" , \"email\" : \"mwatkins0@miibeian.gov.cn\" }, { \"forename\" : \"Eugene\" , \"surname\" : \"Williams\" , \"email\" : \"ewilliamsi@deliciousdays.com\" } ] } Ein Array ist stets numerisch indiziert, d.h. Sie k\u00f6nnen unter Verwendung des Index die einzelnen Objekte auslesen.","title":"Viele Objekte im Array"},{"location":"angular2/#bindings-und-direktiven","text":"","title":"Bindings und Direktiven"},{"location":"angular2/#interpolation","text":"Interpolation ist die einfachste Form des data binding . Syntaktisch erkennt man Interpolation an den doppelten geschweiften Klammern {{ Interpolation }} . Beispiel 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Component } from '@angular/core' ; @ Component ({ selector : 'app-lesson' , template : ` <h1>{{ headline }}</h1> <p>Hier steht {{name}}</p> ` , styleUrls : [ './lesson.component.css' ] }) export class LessonComponent { headline = 'Mein Titel' ; name = 'mein Name' ; } Im obigen Beispiel hat die Komponente LessonComponent zwei Eigenschaften: headline und name . In obiger Komponente wird (zur Anschauung) sogenanntes inline templating verwendet, d.h. es gibt keine eigene lesson.component.html -Datei, in der der HTML-Code steht, sondern der HTML-Code wird direkt in die template -Eigenschaft der Typescript-Datei lesson.component.ts eingef\u00fcgt (siehe Zeilen 5-8 im obigen Beispiel). Der HTML-Code wird in backticks eingefasst ( `` ), nicht zu verwechseln mit den einfachen Anf\u00fchrungsstrichen ( '' ). Damit inline templating m\u00f6glich ist, wird die Komponente mit dem Flag -t erzeugt ( inlineTemplate=true ), d.h. unsere Lesson-Komponente wurde mithilfe der CLI wie folgt erzeugt: ng g c lesson -t Eine Interpolation kann auch Ausdr\u00fccke enthalten, die aufgel\u00f6st werden, z.B. < p > 1 + 2 = {{1 + 2}}. </ p > Man kann mithilfe einer Direktive durch ein Array laufen und jedes einzelne Element mithilfe von Interpolation ausgeben: @ Component ({ selector : 'app-lesson' , template : ` <ol> <li *ngFor=\"let day of weekdays\">{{ day }}</li> </ol> ` , styleUrls : [ './lesson.component.css' ] }) export class LessonComponent { weekdays = [ 'Monday' , 'Tuesday' , 'Wednesday' , 'Thursday' , 'Friday' , 'Saturday' , 'Sunday' ]; } Oder es ist m\u00f6glich, Attributen von HTML-Elementen mithilfe von Interpolation Werte zuzuordnen: @ Component ({ selector : 'app-lesson' , template : ` <img src=\"{{ imgUrl }}\" /> ` , styleUrls : [ './lesson.component.css' ] }) export class LessonComponent { imgUrl = 'https://www.dpunkt.de/common/images/cover_masterid/800/12400.jpg' ; } F\u00fcr unser first -Beispiel ist ein ganz einfaches Beispiel f\u00fcr die main -Komponente gezeigt: main.component.ts main.component.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'htw-main' , templateUrl : './main.component.html' , styleUrls : [ './main.component.css' ] }) export class MainComponent implements OnInit { headline = 'This is main' ; constructor () { } ngOnInit () : void { } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < div id = \"main\" > < h3 > {{ headline }} </ h3 > < div id = \"row\" > < div id = \"left\" > < htw-left > </ htw-left > </ div > < div id = \"right\" > < htw-right > </ htw-right > </ div > </ div > </ div >","title":"{{ Interpolation }}"},{"location":"angular2/#elementreferenzen","text":"\u00dcber eine Elementreferenz , die man im HTML-Code mittels des Rautensymbols definiert, kann in Angular sehr einfach auf das Element zugegriffen werden. Das folgende Beispiel zeigt eine solche Elementreferenz : < input # id type = \"text\" value = \"Elementreferenz\" /> {{ id.value }} In dem Beispiel wurde einem Textfeld die Elementreferenz id zugewiesen (kann jeder Name sein), erkennbar an #id . \u00dcber diese Elementreferenz (den Namen) l\u00e4sst sich nun direkt auf dieses Element zugreifen. Im obigen Beispiel wird die value -Eigenschaft ausgelesen, also der Wert, der in das Textfeld eingegeben wird (oder, wie oben, vordefiniert ist). Beachten Sie jedoch, dass der Wert nicht automatisch angepasst wird, sobald eine Eingabe erfolgt. Dies muss durch ein Ereignis (z.B. change oder input ) getriggert werden.","title":"#Elementreferenzen"},{"location":"angular2/#property-bindings","text":"Insbesondere, wenn Attributen von HTML-Elementen Werte zugeordnet werden sollen (so wie beim imgUrl -Beispiel des Abschnitts {{Interpolation}} ), spricht man von property binding . Property binding spielt eine gro\u00dfe Rolle beim Datenfluss von Eltern-Komponenten auf Kind-Komponenten. Die generelle Idee dabei ist, dass mithilfe von property binding Werte (Daten) an Attribute von HTML-Elementen bindet. Diese HTML-Elemente k\u00f6nnen auch Komponenten sein. Wir betrachten zun\u00e4chst die unterschiedlichen Arten (Notationen) von property binding: < element [ property ]=\" ausdruck \" ></ element > D.h. ein ausdruck wird \u00fcbergeben, der zu einem Wert aufgel\u00f6st wird und dieser Wert wird dem Attribut property \u00fcbergeben. Betrachten wir nochmals das letzte Beispiel aus dem Abschnitt {{Interpolation}} ). Bei diesem Beispiel haben wir Interpolation verwendet, um dem Attribut src des HTML-Elementes img einen Wert zuzuweisen. Das exakt gleiche Verhalten l\u00e4sst sich auch mittels property bindings erzeugen: < img [ src ]=\" imgUrl \" /> <!-- imgUrl = 'https://www.dpunkt.de/common/images/cover_masterid/800/12400.jpg'; --> Das bedeutet f\u00fcr unser first -Beispiel, dass die beiden <img> -Definitionen gleich sind: header.component.html header.component.ts 1 2 3 4 < p > header works! < img src = \"{{ imgUrl }}\" alt = \"{{ description }}\" width = \"53px;\" /> < img [ src ]=\" imgUrl \" [ alt ]=\" description \" width = \"53px;\" /> </ p > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import { Component , OnInit } from '@angular/core' ; @ Component ({ selector : 'htw-header' , templateUrl : './header.component.html' , styleUrls : [ './header.component.css' ] }) export class HeaderComponent implements OnInit { imgUrl = '/assets/images/fiw.jpg' ; description = 'FIW Logo' ; constructor () { } ngOnInit () : void { } } Neben diesen \"allgemeinen\" property bindings gibt es auch noch \"spezielle\" property bindings, n\u00e4mlich class bindings und style bindings . Bei class bindings wird das Pr\u00e4fix class vor die property (die entsprechende CSS-Klasse) gesetzt: < element [ class . class1 ]=\" class1enabled \" [ class . class2 ]=\" class2enabled \" ... ></ element > D.h. die CSS-Klasse class1 ist genau dann wirksam, wenn der Ausdruck class1enabled true ist und class2 ist genau dann wirksam, wenn der Ausdruck class2enabled true ist usw. Bei den style bindings werden jedoch gar keine Ausdr\u00fccke, sondern Werte \u00fcbergeben: < element [ style . color ]","title":"[Property Bindings]"},{"location":"angular2/#event-bindings","text":"In den property bindings haben wir gesehen, wie Werte Attributen (Eigenschaften) von Elementen zugeordnet werden k\u00f6nnen. Aus JavaScript ist auch bekannt, dass Ereignisse Attribute von Elementen sein k\u00f6nnen, z.B. onClick , onKeyup , onChange usw. Dabei handelt es sich um sogenannte native DOM-Ereignisse . Neben der M\u00f6glichkeit, solche nativen DOM-Ereigniss zu behandeln, bietet Angular auch die M\u00f6glichkeit, eigene Ereignisse zu definieren und diese zu behandeln. Wir betrachten beide M\u00f6glichkeiten und beginnen mit den nativen Ereignissen.","title":"(Event Bindings)"},{"location":"angular2/#native-dom-ereignisse","text":"In HTML sieht das unter Aufruf einer JavaScript-Funktion f\u00fcr die Ereignisbahandlung dann typischerweise (hier das Click-Ereignis f\u00fcr einen Button) wie folgt aus: HTML JavaScript < button onClick = \"doSomething()\" > Click here! </ button > function doSomething () { // something to do } In Angular ist das Prinzip das gleiche, nur dass das Ereignis in runden Klammern genannt und an dieses Ereignis die Ereignisbehandlung gebunden wird ( event binding ). Das bedeutet, das Angular-Template f\u00fcr das obige Beispiel sieht wie folgt aus: Angular-Template Angular-Typescript < button ( click )=\" doSomething ()\" > Click here! </ button > export class EventsComponent { doSomething () { // something to do } } Dieses Prinzip gilt f\u00fcr alle nativen DOM-Ereignisse. Hier ein kurzer \u00dcberblick \u00fcber die wichtigsten (f\u00fcr eine umfangreichere Liste siehe hier oder hier ): Ereignis Beschreibung click Mausklick auf das Element change Der Inhalt/Wert eines Elementes hat sich ge\u00e4ndert mouseover die Maus wird \u00fcber das Element bewegt mouseout die Maus wird vom Element wegbewegt keydown eine Taste der Tastatur wird gedr\u00fcckt keyup Loslassen einer Taste load der Browser hat die Seite vollst\u00e4ndig geladen focus Fokussieren des Elements (z.B. Anklicken) blur Verlieren des Fokus (z.B. Klick au\u00dferhalb) submit Abschicken eines Formulars copy , paste Kopieren, Einf\u00fcgen von Text Einen kleinen Unterschied gibt es noch bei der \u00dcbergabe des Ereignisses an die das Ereignis behandelnde Funktion zu beachten. W\u00e4hrend in plain JavaScript das Ereignis mit event der Funktion \u00fcbergeben wird, erfolgt die \u00dcbergabe des Ereignisses in Angular mit $event . Beispiel: Angular-Template Angular-Typescript < input ( change )=\" showPayload ($ event )\" type = \"text\" /> export class EventsComponent { showPayload ( e : Event ) { console . log ( e ); } } Alle Events (in TypeScript/Angular) sind vom Typ Event . Es gibt noch speziellere Eventtypen, die aber alle auf dem Interface Event basieren, z.B. MouseEvent , InputEvent , KeyboardEvent , UIEvent , ClipboardEvent . Weitere Details siehe hier . Die einfache JavaScript-Attributschreibweise kann in Angular nicht verwendet werden, sondern immer nur die event binding -Schreibweise von Angular (mit den runden Klammern)!","title":"Native DOM-Ereignisse"},{"location":"angular2/#eigene-ereignisse","text":"F\u00fcr eine Komponente kann ein eigenes - nicht natives - Ereignis definiert werden. Dies geschieht, indem f\u00fcr eine Komponente eine neue Eigenschaft (z.B. myEvent ) definiert wird und diese vom Typ EventEmitter deklariert wird. Mithilfe von Generics kann der Typ des Events angegeben werden, der ausgel\u00f6st werden soll - wenn Sie den Typ nicht genau kennen, verwenden Sie any . Soll das Ereignis an die Elternkomponente weitergeleitet werden, was meistens der Fall ist, wird der Decorator @Output() verwendet. Das Ausl\u00f6sen des Events geschieht dann durch die emit() -Methode von EventEmitter . Hier ein typisches Beispiel (zun\u00e4chst die Kindkomponente EventsComponent - also events.component.html und events.component.ts ): .html .ts < button ( click )=\" emitMyEvent ()\" > Click here! </ button > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { Component , EventEmitter , Output } from '@angular/core' ; @ Component ({ selector : 'app-events' , templateUrl : './events.component.html' , styleUrls : [ './events.component.css' ] }) export class EventsComponent { @ Output () myEvent = new EventEmitter < any > (); emitMyEvent () { this . myEvent . emit (); } } Die .html -Datei definiert einen Button mit dem nativen Ereignis click . Dieses wird durch die Methode emitMyEvent() behandelt. In der .ts -Datei ist diese Methode definiert (Zeilen 11-13). Darin wird das eigene Event myEvent ausgel\u00f6st. Dieses Event ist ein Objekt vom Typ EventEmitter , typisiert als any (beliebiger Typ). Das Ausl\u00f6sen dieses Events wird an die aufrufende Komponente (die Elternkomponente) ausgegeben (Decorator @Output() ). Deklaration der Eigenschaft und Dekorieren mit @Output() in Zeile 9. Das Ausl\u00f6sen des eigenen Events erfolgt durch den Aufruf der Methode emit() aus EventEmitter (Zeile 12). In der Elternkomponente kann dieses Ereignis nun empfangen werden (Beispiel einer Elternkomponente AppComponent - also app.component.html und app.component.ts ): .html .ts < app-events ( myEvent )=\" handleEventFromEventsComponent ()\" ></ app-events > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Component } from '@angular/core' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { handleEventFromEventsComponent () { console . log ( 'myEvent in der Kindkomponente ausgel\u00f6st' ); } } In der AppComponent (das kann nat\u00fcrlich eine beliebige Komponente sein), wird die EventsComponent eingebunden (siehe <app-events> im Template der AppComponent ). Dadurch entsteht die Hierarchie Elternkomponente AppComponent \u2192 Kindkomponente EventsComponent im DOM. Mithilfe von event binding wird die Behandlung des Ereignisses myEvent an die Methode handleEventFromEventsComponent() gebunden. In dieser Methode erfolgt hier einfach nur eine Ausgabe auf die Konsole. Interessant ist, dass wir dadurch die M\u00f6glichkeit haben, Daten von der Kindkomponente zur Elternkomponente flie\u00dfen zu lassen. Dazu \u00fcbergeben wir diese Daten als payload des Ereignisses. Daf\u00fcr typisieren wir EventEmitter mit dem Typ, von dem wir Daten \u00fcbergeben wollen (z.B. Book - siehe B\u00fccher-App ). Die beiden obigen Beispiele sehen dann wie folgt aus (zuerst wieder EventsComponent ): .html .ts < button ( click )=\" emitMyEvent ( book )\" > Click here! </ button > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 import { Component , EventEmitter , Output } from '@angular/core' ; @ Component ({ selector : 'app-events' , templateUrl : './events.component.html' , styleUrls : [ './events.component.css' ] }) export class EventsComponent { @ Output () myEvent = new EventEmitter < Book > (); emitMyEvent ( book : Book ) { this . myEvent . emit ( book ); } } Im Template (HTML) werden die Daten der Ereignisbehandlung \u00fcbergeben. Das EventEmitter -Objekt ist mit dem konkreten Datentyp typisiert. Bei Aufruf der Methode emit() werden die Daten an die Elternkomponente \u00fcbergeben. Die Elternkomponente (hier wieder AppComponent kann diese Daten, die von der Kindkomponente an die Elternkomponente via Ereignis geflossen sind, nun weiterverarbeiten bzw. darstellen): .html .ts < app-events ( myEvent )=\" handleEventFromEventsComponent ($ event )\" ></ app-events > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import { Component } from '@angular/core' ; @ Component ({ selector : 'app-root' , templateUrl : './app.component.html' , styleUrls : [ './app.component.css' ] }) export class AppComponent { handleEventFromEventsComponent ( book : Book ) { console . log ( book . title ); } } Wichtig beim event binding der Elternkomponente ist, dass der payload des Ereignisses mit $event \u00fcbergeben wird (siehe auch Native DOM-Ereignisse ). Zusammenfassung In den letzten drei Abschnitten Interpolation, Property Binding und Event Binding haben wir uns mit Datenfluss besch\u00e4ftigt. Interpolation wird verwendet, um innerhalb einer Komponente die in der TypeScript-Klasse definierten Daten im Template darzustellen. Mithilfe von Property Binding kann die aufrufende Komponente (Elternkomponente) der aufgerufenen Kopmponente (Kindkomponente) Daten \u00fcbergeben. Mithilfe von Event Binding kann die Kindkomponente der Elternkomponente mithilfe eines eigenen Ereignisses Daten \u00fcbergeben. F\u00fcr die Anwendung dieser Konzepte schauen Sie sich B\u00fccher-App\u2192Datenfluss zwischen Komponenten an.","title":"Eigene Ereignisse"},{"location":"angular2/#direktiven","text":"In Angular gibt es 3 Arten sogenannter Direktiven (engl. Directives ): Komponentendirektiven (Components\u2014directives) Attributdirektiven (Attribute Directives) Strukturdirektiven (Structural-Direktives) Komponentendirektiven sind die meistverwendete Art und bereits in Angular \u2192 Kompnenten betrachtet. Attribut- und Strukturdirektiven k\u00f6nnen als HTML-Attribute verstanden werden, die dem HTML-Element ein zus\u00e4tzliches Verhalten hinzuf\u00fcgt. Attributdirektiven wirken sich das innere Verhalten eines HTML-Elementes aus (z.B. k\u00f6nnen damit CSS-Eigenschaften ge\u00e4ndert, hinzugef\u00fcgt oder gel\u00f6scht werden). Mit Strukturdirektiven kann die Struktur des DOMs ge\u00e4ndert werden (z.B. k\u00f6nnen ganze HTML-Elemente dem DOM-Baum hinzugef\u00fcgt werden).","title":"Direktiven"},{"location":"angular2/#strukturdirektiven","text":"Strukturdirektiven beginnen immer mit einem Stern * . Die bekanntesten Vertreter sind *ngFor *ngIf *ngSwitch Diese sind auch in angular.io erl\u00e4utert. Wir erl\u00e4utern die darin aufgef\u00fchrten Beispiele und beginnen mit *ngIf : 1 2 3 4 5 6 7 8 < p * ngIf = \"true\" > Expression is true and ngIf is true. This paragraph is in the DOM. </ p > < p * ngIf = \"false\" > Expression is false and ngIf is false. This paragraph is not in the DOM. </ p > Die Direktive *ngIf wird also wie ein Attribut des <p> -Elementes behandelt. Das Attribut *ngIf hat entweder den Wert \"true\" oder den Wert \"false\" . Ja nach Wert des Attributes wird das jeweilige <p> -Element in den DOM-Baum eingebunden. Also entweder das <p> -Element aus den Codezeilen 1 - 4 (bei Wert \"true\" ) oder das <p> -Element aus den Codezeilen 5 - 8 (bei Wert \"false\" ). In einer echten Anwendung ergibt sich der Wert des Attributes/der Direktive meistens aus dem Wert einer boole'schen Variablen oder einem anderen boole'schen Ausdruck. Das nicht dargestellte Element ist auch nicht Teil des DOMs! Es ist also nicht einfach nur auf hide gesetzt, sondern es ist gar nicht im DOM vorhanden. Intern wird aus der *ngIf -Direktive \u00fcbrigens ein sogenanntes Property-Binding : < ng-template [ ngIf ]=\" true \" > < p > Expression is true and ngIf is true. This paragraph is in the DOM. </ p > </ ng-template > < ng-template [ ngIf ]=\" false \" > < p > Expression is false and ngIf is false. This paragraph is not in the DOM. </ p > </ ng-template > Die *ngFor -Direktive ist etwas komplexer als *ngIf . F\u00fcr *ngFor ben\u00f6tigen wir mindestens eine Liste (oder ein Array) und eine Laufvariable, die die Werte aus der Liste annehmen kann. Im folgenden Beispiel ist i unsere laufvariable und [1, 2, 3, 4, 5, 6] unser Array. < div * ngFor = \"let i of [1, 2, 3, 4, 5, 6]\" > {{ i }} </ div > F\u00fcr jeden Wert aus der Liste wird ein eigenes <div> - Element erzeugt. Der DOM-Baum sieht f\u00fcr obiges Beispiel also wie folgt aus (Angular-Attribute weggelassen): < div > 1 </ div > < div > 2 </ div > < div > 3 </ div > < div > 4 </ div > < div > 5 </ div > < div > 6 </ div > Au\u00dferdem stellt *ngFor noch einige Hilfsvariablen zur Verf\u00fcgung, die ebenfalls genutzt werden k\u00f6nnen: index (Index des aktuellen Elementes 0, 1, 2, ... ) first (ist true , wenn erstes Element, sonst false ) last (ist true , wenn letztes Element, sonst false ) even (ist true , wenn Index gerade , sonst false ) odd (ist true , wenn Index ungerade , sonst false ) Folgend ein komplexeres Beispiel unter Verwendung einiger Hilfsvariablen: 1 2 3 4 5 6 7 8 9 < div * ngFor = \"let value of [1, 2, 3, 4, 5, 6]; index as i; first as f; last as l; odd as o;\" > < div * ngIf = \"f\" > Start </ div > < div [ style . color ]=\" o ? ' red ' : ' blue '\" > {{ i }} : {{ value }} </ div > < div * ngIf = \"l\" > Ende </ div > </ div > In Zeile 1 ist unsere Laufvariable durch das Array nun value . Au\u00dferdem wird der jeweilige Wert von index in der Variablen i (Zeilennummer 2 ) gespeichert, der Wert von first in der Variablen f (Zeilennummer 3 ), der Wert von last in der Variablen l (Zeilennummer 4 ) und der Wert von odd in der Variablen o (Zeilennummer 5 ) - die Hilfsvariable even betrachten wir hier nicht, da deren Wert genau der Negation von odd entspricht. In Zeile 6 wenden wir die *ngIf -Direktive an: ein <div> mit dem Inhalt Start wird vor dem ersten Element aus dem Array ausgegeben. F\u00fcr jedes weitere Element nicht mehr. In Zeile 7 erfolgt ein Property Binding : die color -Eigenschaft bekommt einen Wert zugewiesen. Der Wert ist jedoch abh\u00e4ngig davon, ob o wahr ist (dann Wert red ) oder falsch (dann Wert blue ). Zeile 7 zeigt au\u00dferdem wie mithilfe von Interpolation der Wert von i und der Wert von value , getrennt mit : ausgegeben werden. Die Ausgabe ist also: Aufgabe Informieren Sie sich auch \u00fcber die *ngSwitch -Direktive. Implementieren Sie ein Beispiel, in dem Sie die 3 Direktiven *ngIf , *ngFor und *ngSwitch anwenden.","title":"Strukturdirektiven"},{"location":"css/","text":"CSS \u00b6 C ascading S tyle S heets werden verwendet, um dem HTML-Dokument einen ansprechenden Stil (Font, Farben, ...) zuzuweisen, das Layout des HTML-Dokumentes zu definieren (3-Spalten-Layout, 2-Spalten-Layout, Kopf- und Fu\u00dfzeile, ...) das Layout responsive zu gestalten, d.h. unterschiedliche Ansichten des HTML-Dokumentes zu definieren, je nach Bildschirmgr\u00f6\u00dfe (Mobile, Tablet, Desktop) Generell gilt, dass wir mit HTML ausschlie\u00dflich die Inhalte definieren, das Design jedoch mit CSS. Sehen wir uns dazu folgendes erstes Beispiel an: In obigem Beispiel werden f\u00fcr die HTML-Elemente, die in unserem HTML-Doument verwendet werden, unterschiedliche CSS-Eigenschaften definiert. Die generelle Syntax f\u00fcr CSS-Eigenschaften ist: selektor { eigenschaft : wert ; } So wird in obigem Beispiel f\u00fcr das HTML-Element body der Eigenschaft font-family der Wert verdana zugeordnet. Somit ist der gesamte Text in <body> in der Schriftart Verdana . Dies gilt auch f\u00fcr alle Elemente, die hierarchisch \"unter\" <body> angesiedelt sind, also alle <h1> -, <h3> -, <p> -, <span> - und <a> -Elemente. Die Eigenschaftsdefinitionen kaskadieren also nach unten - daher cascading style sheets. Da alle <p> -Elemente fett geschrieben werden, sind auch die darin enthaltenen Elemente fett, also <a> und <span> . Begriffsbezeichnungen bei CSS-Definitionen: Ort der CSS-Definitionen \u00b6 Es gibt drei \"Orte\", an denen CSS-Eigenschaften f\u00fcr ein HTML-Dokument definiert werden k\u00f6nnen: in einer externen CSS-Datei. Diese endet typischerweise mit der Dateiendung .css und wird im <head> des HTML-Dokumentes mithilfe von <link rel=\"stylesheet\" href=\"mystyle.css\"> (hier hei\u00dft die externe Datei mystyle.css ) eingebunden (siehe unten), innerhalb eines <style> -Elementes ebenfalls im <head> des HTML-Dokumentes (siehe unten), als style -Attribut eines HTML-Elementes (siehe unten). 3 Orte der CSS-Definitionen - HTML mystyle.css <!DOCTYPE html> < html lang = \"de\" > < head > < meta charset = \"UTF-8\" > <!-- 1. Einbinden einer externen CSS-Datei --> < link rel = \"stylesheet\" href = \"mystyle.css\" > < title > CSS-Einf\u00fchrung </ title > <!-- 2. Verwenden des <style>-Elementes --> < style > h1 { color : red ; } </ style > </ head > < body > < h1 > \u00dcberschrift </ h1 > <!-- 3. style-Attribut eines HTML-Elementes --> < p style = \"border: 1px solid blue;\" > Das ist ein Absatz. </ p > </ body > </ html > body { font-family : vardana ; } Im obigen Beispiel wird in der externen CSS-Datei mystyle.css definiert, dass der im gesamten Dokument verwendete Font Verdana sein soll. Im <style> -Element wird als Schriftfarbe f\u00fcr <h1> -\u00dcberschriften rot festgelegt, das gilt f\u00fcr alle <h1> -\u00dcberschriften des Dokumentes. Das style -Attribut des HTML-Elementes <p> legt f\u00fcr diesen Absatz fest, dass er blau umrandet sein soll. Das gilt nicht f\u00fcr alle <p> -Elemente, sondern nur f\u00fcr das Element mit dem style -Attribut. Eine recht gute \u00dcbersicht \u00fcber alle existierenden CSS-Eigenschaften bietet W3Schhols . Selektoren \u00b6 Bis jetzt haben wir in unseren Beispielen \"nur\" HTML-Elemente als Selektoren verwendet. Es gibt eine Vielzahl anderer M\u00f6glichkeiten, bestimmten HTML-Elementen CSS-Eigenschaften zuzuweisen. Nochmal zur Wiederholung: der generelle Aufbau einer CSS-Definition ist selektor { eigenschaft : wert ; } Wir werden nun die unterschiedlichen M\u00f6glichkeiten der Selektoren (und Operatoren \u00fcber diese Selektoren) betrachten. Wir betrachten zun\u00e4chst HTML-Elemente, IDs, Klassen und Attribute als Selektoren. Zu den IDs ist zu sagen, dass Sie jedem HTML-Element eine eindeutige id zuweisen k\u00f6nnen, z.B. <div id=\"main\"> . Jedes Element darf nur eine id besitzen und eine id darf in einem HTML-Dokument nur einmal vergeben - muss also eindeutig - sein. Klassen weisen Sie Elementen mit dem class -Attribut zu, also z.B. <div class=\"smallFont blueColor yellowBackground\"> . Klassennamen k\u00f6nnen Sie frei w\u00e4hlen (keine Leer- und Sonderzeichen!). Wenn Sie, wie im Beispiel, mehrere Klassen zuweisen, dann durch einen Leerschritt getrennt. Im Beispiel wurde dem <div> drei Klassen zugewiesen. Sie k\u00f6nnen einem Element beliebig viele Klassen zuweisen und eine Klasse kann beliebig vielen Elementen zugewiesen werden. In den CSS-Deklarationen wird mittels # auf die IDs zugegriffen und mittels . auf die jeweilige Klasse. Siehe die folgende Liste der m\u00f6glichen Selektoren unter Verwendung von Elementnamen, IDs, Klassen und Attributen: Selektor Beispiel Erl\u00e4uterung * * alle HTML-Elemente ausgew\u00e4hlt (Wildcard) element h1 alle <h1> -Elemente ausgew\u00e4hlt element element section h1 alle <h1> -Elemente innnerhalb eines <section> -Element ausgew\u00e4hlt (Nachfahren) element, element section, h1 alle <h1> -Elemente und alle <section> -Elemente ausgew\u00e4hlt element>element section>h1 alle <h1> -Elemente deren direkte Eltern ein <section> -Element sind (Kinder) element+element section+h1 alle <h1> -Elemente, die direkt nach einem <section> -Element stehen .class .container alle Elemente mit class=\"container\" , d.h. container muss eine zugeordnete Klasse sein .class1.class2 .container.top alle Elemente mit class=\"container top\" , d.h. container und top m\u00fcssen zugeordnete Klassen sein .class1 .class2 .container .top alle Elemente mit class=\"top\" , welche in Elementen mit class=\"container\" sind (Nachfahren) #id #main das Element mit id=\"main\" (id eindeutig - nur einmal vergeben) [attribute] [src] alle Elemente mit einem src -Attribut [attribute=value] [target=_blank] alle Elemente, die ein target -Attribut besitzen und dessen Wert muss genau _blank sein [attribute*=value] [src*=\"localhost\"] alle Elemente, die ein src -Attribut besitzen und dessen Wert enth\u00e4lt das Wort localhost [attribute^=value] [href^=\"https\"] alle Elemente, die ein href -Attribut besitzen und dessen Wert beginnt mit dem Wort https [attribute$=value] [href$=\"php\"] alle Elemente, die ein href -Attribut besitzen und dessen Wert endet mit dem Wort php Dar\u00fcber hinaus gibt es auch sogenannte Pseudo-Klassen und Pseudo-Elemente , die wir als Selektoren verwenden k\u00f6nnen. Wir betrachten zum besseren Verst\u00e4ndinis zun\u00e4chst ein Beispiel, um eine Idee davon zu bekommen. Angenommen, wir haben in unserem HTML-Dokument einen Hyperlink ( # refrenziert auf den Beginn derselben Seite): < a href = \"#\" > Neu laden </ a > So ein Hyperlink besitzt zus\u00e4tzliche Pseudo-Klassen link , visited , hover , active . Diese Klassen sind f\u00fcr bestimmte Zust\u00e4nde des Elementes aktiv. Die Pseudoklasse link ist aktiv f\u00fcr noch nicht angeklickte Hyperlinks, visited bei bereits angeklickten, hover (gibt es f\u00fcr alle Elemente) sobald man die Maus \u00fcber das Element h\u00e4lt und active f\u00fcr den Zeitpunkt, zu dem man gerade den Hyperlink anklickt. Pseudoklassen werden \u00fcber element:pseudoklasse angesprochen. Ein CSS k\u00f6nnte also z.B. so aussehen: a { /* alle links */ text-decoration : none ; } a : link { /* noch nicht angeklickt */ color : red ; } a : visited { /* bereits angeklickt */ color : darkgrey ; } a : hover { /* mouse over */ color : limegreen ; } a : active { /* wird gerade angeklickt */ color : lightblue ; } Pseudo-Klasse Beispiel Erl\u00e4uterung des Beispiels :link a:link alle <a> -Elemente, die noch nicht besucht (geklickt) wurden :visited a:visited alle <a> -Elemente, die bereits besucht (geklickt) wurden :hover img:hover das <img> -Element, \u00fcber dem die Maus verweilt (mouse over) :active a:active das <a> -Element, auf das gerade geklickt wird :empty p:empty alle <p> -Elemente, die keine Kinder haben :first-child p:first-child alle <p> -Elemente, die das jeweils erste Kind ihres Elternelmentes sind :first-of-type p:first-of-type alle <p> -Elemente, die das jeweils erste <p> -Element ihres Elternelementes sind :nth-child(n) p:nth-child(2) alle <p> -Elemente, die das jeweils zweite Kind ihres Elternelmentes sind :nth-of-type(n) p:nth-of-type(2) alle <p> -Elemente, die das jeweils zweite <p> -Element ihres Elternelementes sind :only-child p:only-child alle <p> -Elemente, die das jeweils einzige Kind ihres Elternelementes sind :only-of-type p:only-of-type alle <p> -Elemente, die das jeweils einzige <p> -Element ihres Elternelementes sind In den runden Klammern, in denen Zahlen angegeben werden k\u00f6nnen ( :nth-child(n) und :nth-of-type(n) ), k\u00f6nnen Sie anstelle der Zahl auch odd und even einsetzen. So lassen sich z.B. Tabellenzeilen abwechselnd in verschiedenen Hintergrundfarben anzeigen /* unterschiedliche Spaltenfarben */ td : nth-child ( even ) { background-color : lightgrey ; } td : nth-child ( odd ) { background-color : darkgrey ; } /* unterschidliche Zeilenfarben */ tr : nth-child ( even ) { background-color : white ; } tr : nth-child ( odd ) { background-color : grey ; } Neben den oben genannten Pseudoklassen gibt es auch noch deren Pendants: :last-child , :last-of-type , :nth-last-child(n) , :nth-last-of-type(n) . F\u00fcr <input> -Elemente gibt es zus\u00e4tzlich eine Reihe weiterer Pseudo-Klassen. Hier eine Auswahl an Pseudo-Klassen f\u00fcr <input> -Elemente: Pseudo-Klasse Beispiel Erl\u00e4uterung des Beispiels :checked input:checked alle checked <input> -Elemente :disabled input:disabled alle disabled <input> -Elemente :enabled input:enabled alle disabled <input> -Elemente :focus input:focus das <input> -Element, das Fokus hat :invalid input:invalid alle <input> -Elemente mit einem ung\u00fcltigen Wert :optional input:optional alle <input> -Elemente, die nicht \"required\" sind :read-only input:read-only alle <input> -Elemente mit einem \"readonly\"-Attribut :read-write input:read-write alle <input> -Elemente, die kein \"readonly\"-Attribut haben :required input:required alle <input> -Elemente mit einem \"required\"-Attribut :valid input:valid alle <input> -Elemente mit einem g\u00fcltigen Wert Pseudo-Elemente sind so \u00e4hnlich wie Pseudo-Klassen, werden aber \u00fcber :: angesprochen anstelle : bei Pseudo-Klassen. Hier ein Beispiel f\u00fcr ein Pseudo-Element: HTML CSS mit Pseudo-Elementen < p > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > p :: first-letter { font-size : 300 % ; } p :: first-line { font-weight : bold ; } Das Ergebnis sieht dann so aus: Der erste Buchstabe in einem Absatz ist um das Dreifache gr\u00f6\u00dfer als der Rest der Textes und die erste Zeile in diesem Absatz wird fettgedruckt. Auswahl an Pseudo-Elementen: Pseudo-Elemente Beispiel Erl\u00e4uterung des Beispiels ::after p::after f\u00fcge etwas hinter den Inhalt aller <p> -Elemente ein ::before p::before f\u00fcge etwas vor den Inhalt aller <p> -Elemente ein ::first-letter p::first-letter alle ersten Buchstaben aller <p> -Elemente ::first-line p::first-line alle ersten Zeilen aller <p> -Elemente ::selection p::selection alle vom Nutzer markierten (selektierten) Teile eines <p> -Elementes Box Model \u00b6 Wenn Sie die Breite und die H\u00f6he eines Elementes mithilfe der width - und height -Eigenschaft von CSS angeben wollen, dann m\u00fcssen Sie beachten, dass Sie damit \"nur\" die H\u00f6he und Breite des Inahltes dieses Elementes angeben. Zur Gesamtbreite und -h\u00f6he eines Elementes z\u00e4hlen aber auch noch: padding : der Abstand des Inhaltes zum Rahmen ( border ) des Elementes, border : der Rahmen des Elementes (falls es einen gibt) und margin : der Abstand des Elementes zu den Nachbarelementen. Zusammen mit dem Inhalt des Elementes wird dieser Zusammenhang Box Model genannt. Folgende Darstellung zeigt das Box Model: Das Box Model besagt, dass alle HTML-Elemente als eine rechteckige \"Box\" verstanden werden k\u00f6nnen und diese Box aus dem Inhalt, padding , border und margin besteht. Beispiel Box Model - HTML Beispiel Box Model - CSS < body > < h3 > Box Model </ h3 > < img src = \"./images/fiw.jpg\" alt = \"fiw logo\" style = \"width:350px\" /> < div > Das FIW-Logo hat eine Breite von 350px (width:350px). Der Inhalt dieser Box hat eine Breite von 320px. Dazu kommt padding von 10px (auf beiden Seiten) und ein Rahmen mit der Breite von 5px. Macht zusammen 350px. </ div > </ body > div { width : 320 px ; padding : 10 px ; border : 5 px solid gray ; margin : 0 ; } Das Bild hat eine Breite von 350px (siehe style -Attribut von img ). Der Inhalt des div -Containers hat eine Breite von 320px . Der Abstand des Inhalts zum Rahmen ist links und rechts jeweils 10px und der Rahmen ist links und rechts jeweils 5px gro\u00df. Ergibt zusammen eine Breite von ( 320 + 10 + 10 + 5 + 5 = 350 ). Somit ist das div inklusive padding und border exakt so breit wie das Bild: Das hier beschriebene Box Model entspricht der CSS-Definition box-sizing: content-box; . Dies ist der Standard (muss also nicht angegeben werden). Daneben gibt es auch noch die M\u00f6glichkeit, anstelle von content-box den Wert border-box zu verwenden. Dann ist in der Angabe von width und height sowohl padding als auch border integriert - erweitern Sie obige CSS-Definition um * { box-sizing : border-box ; } Dann wird der Unterschied sichtbar. border-box kann aber zu Problemen bei der Verwendung anderer Frameworks f\u00fchren und sollte deshalb eher nicht verwendet werden. Die display -Eigenschaft \u00b6 Mithilfe der display -Eigenschaft k\u00f6nnen Block-Elemente als Inline-Elemente definiert werden und umgedreht. display:block definiert ein Element als Block-Element, display: inline definiert ein Element als Inline-Element. Au\u00dferdem gibt es noch die M\u00f6glichkeit, mithilfe von display: none; ein Element unsichtbar zu schalten. Dieses Element nimmt dann im Viewport , also dem sichtbaren Bereich der Webseite, keinen Platz ein (im Gegensatz zu einem Element, das mithilfe von visibility: hidden; auf unsichtbar gesetzt wird). Hier ein Beispiel zur Verwendung der display -Eigenschaft. Fahren Sie unter dem Reiter Result mit der Maus \u00fcber das orange umrandete div . Es gibt noch viele weitere Werte f\u00fcr display , auf die wir aber nicht n\u00e4her eingehen wollen. Eine \u00dcbersicht finden Sie z.B. hier . Layout gestalten mithilfe von CSS \u00b6 Wir werden f\u00fcr das Layout unserer Webseiten in Zukunft CSS-Frameworks, wie z.B. Bootstrap oder Materialize oder SemanticUI verwenden. F\u00fcr das Layout stellen diese Frameworks insbesondere ein Grid-Konzept zur Verf\u00fcgung, das recht einfach nutzbar ist und sogar f\u00fcr eine responsive Darstellung sorgt. Zun\u00e4chst wollen wir jedoch die Prinzipien verstehen, auf denen diese Frameworks (und deren Grid-Konzept) basieren. Mehrspaltig mithilfe von float \u00b6 Generell werden Container untereinander dargestellt, in der Reihenfolge ihres Auftretens im HTML. Betrachten wir ein einfaches Beispiel: < body > < p id = \"p1\" >< img src = \"./images/fiw.jpg\" alt = \"fiw-logo\" style = \"width:100px;\" /></ p > < p id = \"p2\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > < p id = \"p3\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > </ body > Untereinander definiert sind 3 Block-Elemente ( <p> -Elemente), die jeweils eine eigene id besitzen. Der erste Absatz enth\u00e4lt ein Bild mit der Breite 100px . Dies f\u00fchrt zu folgender Ansicht: Alle drei Block-Elemente sind also, wie erwartet, untereinander. Umflie\u00dfen lassen: float \u00b6 Angenommen, wir wollen nun, dass das Bild von Text umflossen wird, dass also der Absatz mit dem Bild neben den danach folgenden Abs\u00e4tzen erscheint. Dann kommt die CSS-Eigenschaft float ins Spiel. Wir k\u00f6nnen entscheiden, ob das Bild links sein soll und umflossen wird ( float: left; ) oder rechts sein und dort vom Text umflossen werden soll ( float: right; ). Wir f\u00fcgen exemplarisch folgende Eigenschaft (f\u00fcr die id p1 ) hinzu: # p1 { float : left ; margin-right : 15 px ; } Damit legen wir fest, dass der erste Absatz umflossen werden soll (und links bleibt - float: left; ). Mit der margin-right -Eigenschaft sorgen wir f\u00fcr einen Abstand zum unflie\u00dfenden Text. Es entsteht folgende Ansicht: Das hei\u00dft, dass alle folgenden Abs\u00e4tze den ersten Absatz umflie\u00dfen. Umflie\u00dfen stoppen: clear \u00b6 Das Umflie\u00dfen kann auch wieder gestoppt werden. Dies geschieht mithilfe der clear -Eigenschaft. Um float: left zu stoppen, wird clear: left verwendet und um float: right zu stoppen, wird clear: right verwendet. Sollte es mehrere Elemente mit einer float -Eigenschaft geben, kann zum Stoppen clear: both verwendet werden. Wenn wir nun also f\u00fcr den dritten Absatz definieren: # p3 { clear : left ; } , dann beginnt der dritte Absatz wieder am Beginn einer neuen Zeile unterhalb der beiden Abs\u00e4tze p1 und p2 . mehr als 2 Spalten \u00b6 Wenn wir nun alle 3 Abs\u00e4tze nebeneinander setzen wollen, dann definieren wir einfach f\u00fcr alle 3 Abs\u00e4tze float:left; . Damit alle 3 Abs\u00e4tze die gleiche Breite haben, geben wir noch f\u00fcr jeden Absatz an, dass er 33.33% des Viewports einnimmt ( width: 31.33% + padding:1% - links und rechts): # p1 , # p2 , # p3 { float : left ; width : 31.33 % ; padding : 1 % ; } Beachten Sie dazu noch folgende \u00c4nderung beim <img> -Element. Wir \u00e4ndern die Breite des Bildes von 100px (feste Breite) auf 100% (relative Breite - relativ zum Elternelement, das ist <p id=\"p1\"> ). < p id = \"p1\" >< img src = \"./images/fiw.jpg\" alt = \"fiw-logo\" style = \"width:100%;\" /></ p > Sch\u00f6ner - und \u00fcblicher, weil sp\u00e4ter auch so beim Grid-Konzept - ist es, den Elementen, die man nebeneinander anordnen m\u00f6chte, eine CSS-Klasse zuzuweisen, z.B. class=\"column\" und f\u00fcr diese Klasse dann die float -Eigenschaft mit zugeh\u00f6riger relativer Breite zu definieren. Au\u00dferdem f\u00fcgt man oft um die Spalten einen weiteren Container mit einer Klasse class=\"row\" (Beispiel) und kann dann f\u00fcr diese Klasse ( .row:after die clear -Eigenschaft definieren). Ein solches Beispiel nochmal hier: Flexbox \u00b6 Wir werden sehen, dass das Grid-Konzept, das wir zuk\u00fcnftig verwenden werden, auf der float -Eigenschaft (zusammen mit width ) basiert. Ein Konzept, welches von der Komplexit\u00e4t \"zwischen\" float und dem Grid-Konzept liegt, ist flexbox . Mit flexbox ist das Nebeneinanderpositionieren von Containern recht einfach - insbesondere lassen sich auch recht leicht unterschiedliche Spaltenbreiten definieren- Wir gehen hier nicht weiter auf flexbox ein, sondern verweisen auf z.B. A Guide to Flexbox . Grid \u00b6 flexbox verwendet float und CSS Grid (oder nur Grid ) verwendet flexbox . W\u00e4hrend flexbox nur in ein Dimension das Layout gestaltet (n\u00e4mlich horizontal), kann Grid f\u00fcr einen vollst\u00e4ndigen Layout-Entwurf verwendet werden (n\u00e4mlich horizontal und vertikal). Dazu wird unsere Webseite als eine Matrix verstanden, bestehend aus Zellen , die in Zeilen und Spalten angeordnet sind. Am besten, wir betrachten ein Beispiel : HTML CSS 1 2 3 4 5 6 7 8 < div class = \"wrapper\" > < div class = \"one orange\" > One </ div > < div class = \"two orange\" > Two </ div > < div class = \"three orange\" > Three </ div > < div class = \"four orange\" > Four </ div > < div class = \"five orange\" > Five </ div > < div class = \"six orange\" > Six </ div > </ div > . wrapper { display : grid ; grid-template-columns : repeat ( 3 , 1 fr ); grid-gap : 10 px ; grid-auto-rows : minmax ( 100 px , auto ); } . one { grid-column : 1 / 3 ; grid-row : 1 ; } . two { grid-column : 2 / 4 ; grid-row : 1 / 3 ; } . three { grid-column : 1 ; grid-row : 2 / 5 ; } . four { grid-column : 3 ; grid-row : 3 ; } . five { grid-column : 2 ; grid-row : 4 ; } . six { grid-column : 3 ; grid-row : 4 ; } . orange { background-color : orange ; opacity : 0.5 ; border : 2 px solid gray ; border-radius : 5 px ; padding : 30 px ; } Die Webseite sieht dann so aus: Hier nochmal in JSFiddle: Erl\u00e4uterung des Codes \u00b6 Wir erkennen, dass sechs Zellen in einer Matrix angeordnet werden. Umschlossen sind diese Zellen durch ein div der CSS-Klasse wrapper . F\u00fcr diese Klasse wrapper wird CSS-Grid wie folgt definiert: . wrapper { display : grid ; grid-template-columns : repeat ( 3 , 1 fr ); grid-gap : 10 px ; grid-auto-rows : minmax ( 100 px , auto ); } Der umschlie\u00dfende Container wird mithilfe von display: grid; als Grid-Container definiert. Mit grid-template-columns: repeat(3, 1fr); werden die Spalten definiert. Hier werden 3 Spalten festgelegt und jede dieser Spalten hat die gleiche Breite. Wir h\u00e4tten auch schreiben k\u00f6nnen grid-template-columns: 33% 33% 33%; . Allerdings ergibt sich dann ein kleines Problem: Da wir in der folgenden Zeile grid-gap: 10px; angeben, dass zwischen den Spalten ein Abstand von 10px eingehalten werden soll, w\u00fcrde die Breite insgesamt die 100% \u00fcbersteigen ( 3 x 33% + 2 * 10px ). Deshalb wird die Einheit fr ( fraction ) verwendet. Zur Einheit fr finden Sie n\u00e4here Informationen hier . Die Eigenschaft grid-auto-rows: minmax(100px, auto); beschreibt, dass die Zeilenh\u00f6he automatisch berechnet wird (aus dem Inhalt), aber mindestens 100px hoch ist. F\u00fcr die einzelnen Zellen wird nun mithilfe von grid-column: <start-line> / <end-line> und grid-row: <start-line> / <end-line> jeweils angegeben, wo die jeweilige Zelle beginnt und wo sie aufh\u00f6rt. Wird keine <end-line> angegeben, dann geht die Zelle \u00fcber genau eine Spalte bzw. genau eine Zeile. Wenn wir uns also das Grid wie folgt vergegenw\u00e4rtigen: dann geht One von Spaltenlinie 1 bis Spaltenlinie 3 und von Zeilenlinie 1 (bis Zeilenlinie 2 ), dann geht Two von Spaltenlinie 2 bis ans Ende (Speltenlinie 4 ) und von Zeilenlinie 1 bis Zeilenlinie 3 , dann geht Three von Spaltenlinie 1 (bis Spaltenlinie 2 ) und von Zeilenlinie 2 bis ans Ende Zeilenlinie 5 usw. CSS-Grid ist sehr m\u00e4chtig. Eine detaillierte Beschreibung finden Sie z.B. hier und auch hier . Wertangaben in CSS \u00b6 Numerische Werte k\u00f6nnen in CSS absolut oder relativ angegeben werden, je nach verwendeter Einheit. Folgende Tabelle gibt eine \u00dcbersicht \u00fcber die unterschiedlichen Einheiten f\u00fcr numerische Werte. Einheit Angabetyp Bedeutung % relativ relativ entweder zur elementeigenen Gr\u00f6\u00dfe, zur Gr\u00f6\u00dfe des Elternelements oder zum allegemeinen Kontext cm absolut Zentimenter em relativ Schriftgr\u00f6\u00dfe des Elements (bei font-size aber Schriftgr\u00f6\u00dfe des Elternelements) ex relativ H\u00f6he des Kleinbuchstabens x im Element (bei font-size aber die Schriftgr\u00f6\u00dfe von x im Elternelement) in absolut inch (1 inch = 2,54 cm) mm absolut Milimeter pc absolut pica (1 pc = 12 Punkt) pt absolut Punkt (1 Punkt = 1/72 inch) px absolut und relativ absolut auf ein und dasselbe Ausgabeger\u00e4t bezogen und relativ von Ausgabeger\u00e4t zu Ausgabeger\u00e4t (Pixeldichte) Sie sollten absolute Angaben nur in Ausnahmef\u00e4llen verwenden. Wann immer es geht, ist eine relative Gr\u00f6\u00dfenangabe vorzuziehen. Somit werden am h\u00e4ufigsten % -Angaben und am zweith\u00e4ufigsten px -Angaben verwendet. em sieht man auch noch recht h\u00e4ufig. Von allen anderen Einheiten ist eher abzuraten. Custom Properties \u00b6 Sie k\u00f6nnen sich eigene Variablen f\u00fcr die Verwendung in CSS-Definitionen erstellen. Es ist \u00fcblich, solche Variablen in einem \"gro\u00dfen\" Scope zu definieren, da sie auf den definierten Scope beschr\u00e4nkt sind. D.h., dass man solche Variablen typischerweise f\u00fcr * (also alle Elemente) oder body definiert. Die Variablen beginnen stets mit -- , also z.B. --variablenname . Der Zugriff auf die Variablen erfolgt mit var() , also z.B. var(--variablenname) . Hier ein Beispiel f\u00fcr die Definition von HTW-Farben und -Font: * { --htw-gruen : #76B900 ; --htw-grau : #AFAFAF ; --htw-orange : #FF5F00 ; --htw-blau : #0082D1 ; --htw-font : Verdana , Geneva , sans-serif ; } body { font-family : var ( --htw-font ); } h1 { color : var ( --htw-gruen ); } li a : hover { background-color : var ( --htw-orange ); } . active { background-color : var ( --htw-gruen ); } Gewichtung der Selektoren \u00b6 Insbesondere, wenn Sie noch CSS-Frameworks einbinden und/oder viele CSS-Definitionen haben, stellt sich die Frage, welche der Definitionen \u00fcberhaupt wirken. Eine gro\u00dfe Hilfe sind hier die Entwicklertools der Browser . Im folgenden Screenshot sehen Sie die Developer tools von Chrome. Im rechten unteren Fenster sind die definierten Styles angezeigt. Die nicht wirksamen Styledefinitionen sind durchgestrichen. Um zu ermitteln, welche Definition Anwendung findet, gibt es eine Gewichtung der Selektoren . Wichtig ist zu wissen, dass die Reihenfolge der Definitionen, egal ob im <style> -Element oder in externen CSS-Dateien keine Rolle spielt! Wir betrachten folgendes Beispiel, um die Gewichtung der Selektoren zu bestimmen: Wenn Sie sich zun\u00e4chst nur die CSS-Definitionen anschauen, dann sehen Sie, dass einem Link f\u00fcnf verschiedene Farben zugewiesen werden. Die Links sind aber rot. Es muss also aus einem bestimmten Grund die Definition # navigation a . link { color : red ; } am st\u00e4rksten wirken, d.h. der Selektor #navigation a.link hat in unserem Beispiel die st\u00e4rkste Gewichtung. Um die Gewichtung der Selektoren zu ermitteln, werden diese kategorisiert: Kategorie A : erh\u00e4lt den Wert 1, wenn CSS-Definitionen direkt im style-Attribut eines HTML-Elementes notiert sind Kategorie B : erh\u00e4lt den Wert 1 bei Selektoren f\u00fcr Elemente mit id -Attributen Kategorie C : Anzahl der von einem Selektor betroffenen Klassen und Pseudoklassen Kategorie D : Anzahl der von einem Selektor betroffenen Elementnamen und Pseudo-Elemente Bei der Reihenfolge der Sortierung gilt: A > B > C > D , also z.B. 1 0 0 0 vor (gr\u00f6\u00dfer als) 0 1 2 2 . Betrachten wir unser Beispiel: a:link : 0 0 1 1 (eine Pseudoklasse (link) und ein Element (a)) .link : 0 0 1 0 (eine Klasse) #navigation a.link : 0 1 1 1 (Element mit id -Attribut, eine Klasse und eine Element) li a : 0 0 0 2 (zwei Elemente) #navigation li a : 0 1 0 2 (Element mit id -Attribut, zwei Elemente) Es gilt 0 1 1 1 > 0 1 0 2 > 0 0 1 1 > 0 0 1 0 > 0 0 0 2 und deshalb sind die Links rot. In unserem Beispiel kommt kein style -Attribut vor, deshalb ist bei keinem Selektor die Kategorie A besetzt. W\u00e4re bei einem Link im HTML beispielsweise: < li >< a href = \"startseite.html\" class = \"link\" style = \"color: orange;\" > Startseite </ a ></ li > dann w\u00e4re dieser Link orange. Weitere Informationen \u00fcber CSS \u00b6 Folien CSS W3Schools - CSS Mozilla Developer - CSS Selfhtml - CSS W3C - CSS","title":"CSS"},{"location":"css/#css","text":"C ascading S tyle S heets werden verwendet, um dem HTML-Dokument einen ansprechenden Stil (Font, Farben, ...) zuzuweisen, das Layout des HTML-Dokumentes zu definieren (3-Spalten-Layout, 2-Spalten-Layout, Kopf- und Fu\u00dfzeile, ...) das Layout responsive zu gestalten, d.h. unterschiedliche Ansichten des HTML-Dokumentes zu definieren, je nach Bildschirmgr\u00f6\u00dfe (Mobile, Tablet, Desktop) Generell gilt, dass wir mit HTML ausschlie\u00dflich die Inhalte definieren, das Design jedoch mit CSS. Sehen wir uns dazu folgendes erstes Beispiel an: In obigem Beispiel werden f\u00fcr die HTML-Elemente, die in unserem HTML-Doument verwendet werden, unterschiedliche CSS-Eigenschaften definiert. Die generelle Syntax f\u00fcr CSS-Eigenschaften ist: selektor { eigenschaft : wert ; } So wird in obigem Beispiel f\u00fcr das HTML-Element body der Eigenschaft font-family der Wert verdana zugeordnet. Somit ist der gesamte Text in <body> in der Schriftart Verdana . Dies gilt auch f\u00fcr alle Elemente, die hierarchisch \"unter\" <body> angesiedelt sind, also alle <h1> -, <h3> -, <p> -, <span> - und <a> -Elemente. Die Eigenschaftsdefinitionen kaskadieren also nach unten - daher cascading style sheets. Da alle <p> -Elemente fett geschrieben werden, sind auch die darin enthaltenen Elemente fett, also <a> und <span> . Begriffsbezeichnungen bei CSS-Definitionen:","title":"CSS"},{"location":"css/#ort-der-css-definitionen","text":"Es gibt drei \"Orte\", an denen CSS-Eigenschaften f\u00fcr ein HTML-Dokument definiert werden k\u00f6nnen: in einer externen CSS-Datei. Diese endet typischerweise mit der Dateiendung .css und wird im <head> des HTML-Dokumentes mithilfe von <link rel=\"stylesheet\" href=\"mystyle.css\"> (hier hei\u00dft die externe Datei mystyle.css ) eingebunden (siehe unten), innerhalb eines <style> -Elementes ebenfalls im <head> des HTML-Dokumentes (siehe unten), als style -Attribut eines HTML-Elementes (siehe unten). 3 Orte der CSS-Definitionen - HTML mystyle.css <!DOCTYPE html> < html lang = \"de\" > < head > < meta charset = \"UTF-8\" > <!-- 1. Einbinden einer externen CSS-Datei --> < link rel = \"stylesheet\" href = \"mystyle.css\" > < title > CSS-Einf\u00fchrung </ title > <!-- 2. Verwenden des <style>-Elementes --> < style > h1 { color : red ; } </ style > </ head > < body > < h1 > \u00dcberschrift </ h1 > <!-- 3. style-Attribut eines HTML-Elementes --> < p style = \"border: 1px solid blue;\" > Das ist ein Absatz. </ p > </ body > </ html > body { font-family : vardana ; } Im obigen Beispiel wird in der externen CSS-Datei mystyle.css definiert, dass der im gesamten Dokument verwendete Font Verdana sein soll. Im <style> -Element wird als Schriftfarbe f\u00fcr <h1> -\u00dcberschriften rot festgelegt, das gilt f\u00fcr alle <h1> -\u00dcberschriften des Dokumentes. Das style -Attribut des HTML-Elementes <p> legt f\u00fcr diesen Absatz fest, dass er blau umrandet sein soll. Das gilt nicht f\u00fcr alle <p> -Elemente, sondern nur f\u00fcr das Element mit dem style -Attribut. Eine recht gute \u00dcbersicht \u00fcber alle existierenden CSS-Eigenschaften bietet W3Schhols .","title":"Ort der CSS-Definitionen"},{"location":"css/#selektoren","text":"Bis jetzt haben wir in unseren Beispielen \"nur\" HTML-Elemente als Selektoren verwendet. Es gibt eine Vielzahl anderer M\u00f6glichkeiten, bestimmten HTML-Elementen CSS-Eigenschaften zuzuweisen. Nochmal zur Wiederholung: der generelle Aufbau einer CSS-Definition ist selektor { eigenschaft : wert ; } Wir werden nun die unterschiedlichen M\u00f6glichkeiten der Selektoren (und Operatoren \u00fcber diese Selektoren) betrachten. Wir betrachten zun\u00e4chst HTML-Elemente, IDs, Klassen und Attribute als Selektoren. Zu den IDs ist zu sagen, dass Sie jedem HTML-Element eine eindeutige id zuweisen k\u00f6nnen, z.B. <div id=\"main\"> . Jedes Element darf nur eine id besitzen und eine id darf in einem HTML-Dokument nur einmal vergeben - muss also eindeutig - sein. Klassen weisen Sie Elementen mit dem class -Attribut zu, also z.B. <div class=\"smallFont blueColor yellowBackground\"> . Klassennamen k\u00f6nnen Sie frei w\u00e4hlen (keine Leer- und Sonderzeichen!). Wenn Sie, wie im Beispiel, mehrere Klassen zuweisen, dann durch einen Leerschritt getrennt. Im Beispiel wurde dem <div> drei Klassen zugewiesen. Sie k\u00f6nnen einem Element beliebig viele Klassen zuweisen und eine Klasse kann beliebig vielen Elementen zugewiesen werden. In den CSS-Deklarationen wird mittels # auf die IDs zugegriffen und mittels . auf die jeweilige Klasse. Siehe die folgende Liste der m\u00f6glichen Selektoren unter Verwendung von Elementnamen, IDs, Klassen und Attributen: Selektor Beispiel Erl\u00e4uterung * * alle HTML-Elemente ausgew\u00e4hlt (Wildcard) element h1 alle <h1> -Elemente ausgew\u00e4hlt element element section h1 alle <h1> -Elemente innnerhalb eines <section> -Element ausgew\u00e4hlt (Nachfahren) element, element section, h1 alle <h1> -Elemente und alle <section> -Elemente ausgew\u00e4hlt element>element section>h1 alle <h1> -Elemente deren direkte Eltern ein <section> -Element sind (Kinder) element+element section+h1 alle <h1> -Elemente, die direkt nach einem <section> -Element stehen .class .container alle Elemente mit class=\"container\" , d.h. container muss eine zugeordnete Klasse sein .class1.class2 .container.top alle Elemente mit class=\"container top\" , d.h. container und top m\u00fcssen zugeordnete Klassen sein .class1 .class2 .container .top alle Elemente mit class=\"top\" , welche in Elementen mit class=\"container\" sind (Nachfahren) #id #main das Element mit id=\"main\" (id eindeutig - nur einmal vergeben) [attribute] [src] alle Elemente mit einem src -Attribut [attribute=value] [target=_blank] alle Elemente, die ein target -Attribut besitzen und dessen Wert muss genau _blank sein [attribute*=value] [src*=\"localhost\"] alle Elemente, die ein src -Attribut besitzen und dessen Wert enth\u00e4lt das Wort localhost [attribute^=value] [href^=\"https\"] alle Elemente, die ein href -Attribut besitzen und dessen Wert beginnt mit dem Wort https [attribute$=value] [href$=\"php\"] alle Elemente, die ein href -Attribut besitzen und dessen Wert endet mit dem Wort php Dar\u00fcber hinaus gibt es auch sogenannte Pseudo-Klassen und Pseudo-Elemente , die wir als Selektoren verwenden k\u00f6nnen. Wir betrachten zum besseren Verst\u00e4ndinis zun\u00e4chst ein Beispiel, um eine Idee davon zu bekommen. Angenommen, wir haben in unserem HTML-Dokument einen Hyperlink ( # refrenziert auf den Beginn derselben Seite): < a href = \"#\" > Neu laden </ a > So ein Hyperlink besitzt zus\u00e4tzliche Pseudo-Klassen link , visited , hover , active . Diese Klassen sind f\u00fcr bestimmte Zust\u00e4nde des Elementes aktiv. Die Pseudoklasse link ist aktiv f\u00fcr noch nicht angeklickte Hyperlinks, visited bei bereits angeklickten, hover (gibt es f\u00fcr alle Elemente) sobald man die Maus \u00fcber das Element h\u00e4lt und active f\u00fcr den Zeitpunkt, zu dem man gerade den Hyperlink anklickt. Pseudoklassen werden \u00fcber element:pseudoklasse angesprochen. Ein CSS k\u00f6nnte also z.B. so aussehen: a { /* alle links */ text-decoration : none ; } a : link { /* noch nicht angeklickt */ color : red ; } a : visited { /* bereits angeklickt */ color : darkgrey ; } a : hover { /* mouse over */ color : limegreen ; } a : active { /* wird gerade angeklickt */ color : lightblue ; } Pseudo-Klasse Beispiel Erl\u00e4uterung des Beispiels :link a:link alle <a> -Elemente, die noch nicht besucht (geklickt) wurden :visited a:visited alle <a> -Elemente, die bereits besucht (geklickt) wurden :hover img:hover das <img> -Element, \u00fcber dem die Maus verweilt (mouse over) :active a:active das <a> -Element, auf das gerade geklickt wird :empty p:empty alle <p> -Elemente, die keine Kinder haben :first-child p:first-child alle <p> -Elemente, die das jeweils erste Kind ihres Elternelmentes sind :first-of-type p:first-of-type alle <p> -Elemente, die das jeweils erste <p> -Element ihres Elternelementes sind :nth-child(n) p:nth-child(2) alle <p> -Elemente, die das jeweils zweite Kind ihres Elternelmentes sind :nth-of-type(n) p:nth-of-type(2) alle <p> -Elemente, die das jeweils zweite <p> -Element ihres Elternelementes sind :only-child p:only-child alle <p> -Elemente, die das jeweils einzige Kind ihres Elternelementes sind :only-of-type p:only-of-type alle <p> -Elemente, die das jeweils einzige <p> -Element ihres Elternelementes sind In den runden Klammern, in denen Zahlen angegeben werden k\u00f6nnen ( :nth-child(n) und :nth-of-type(n) ), k\u00f6nnen Sie anstelle der Zahl auch odd und even einsetzen. So lassen sich z.B. Tabellenzeilen abwechselnd in verschiedenen Hintergrundfarben anzeigen /* unterschiedliche Spaltenfarben */ td : nth-child ( even ) { background-color : lightgrey ; } td : nth-child ( odd ) { background-color : darkgrey ; } /* unterschidliche Zeilenfarben */ tr : nth-child ( even ) { background-color : white ; } tr : nth-child ( odd ) { background-color : grey ; } Neben den oben genannten Pseudoklassen gibt es auch noch deren Pendants: :last-child , :last-of-type , :nth-last-child(n) , :nth-last-of-type(n) . F\u00fcr <input> -Elemente gibt es zus\u00e4tzlich eine Reihe weiterer Pseudo-Klassen. Hier eine Auswahl an Pseudo-Klassen f\u00fcr <input> -Elemente: Pseudo-Klasse Beispiel Erl\u00e4uterung des Beispiels :checked input:checked alle checked <input> -Elemente :disabled input:disabled alle disabled <input> -Elemente :enabled input:enabled alle disabled <input> -Elemente :focus input:focus das <input> -Element, das Fokus hat :invalid input:invalid alle <input> -Elemente mit einem ung\u00fcltigen Wert :optional input:optional alle <input> -Elemente, die nicht \"required\" sind :read-only input:read-only alle <input> -Elemente mit einem \"readonly\"-Attribut :read-write input:read-write alle <input> -Elemente, die kein \"readonly\"-Attribut haben :required input:required alle <input> -Elemente mit einem \"required\"-Attribut :valid input:valid alle <input> -Elemente mit einem g\u00fcltigen Wert Pseudo-Elemente sind so \u00e4hnlich wie Pseudo-Klassen, werden aber \u00fcber :: angesprochen anstelle : bei Pseudo-Klassen. Hier ein Beispiel f\u00fcr ein Pseudo-Element: HTML CSS mit Pseudo-Elementen < p > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > p :: first-letter { font-size : 300 % ; } p :: first-line { font-weight : bold ; } Das Ergebnis sieht dann so aus: Der erste Buchstabe in einem Absatz ist um das Dreifache gr\u00f6\u00dfer als der Rest der Textes und die erste Zeile in diesem Absatz wird fettgedruckt. Auswahl an Pseudo-Elementen: Pseudo-Elemente Beispiel Erl\u00e4uterung des Beispiels ::after p::after f\u00fcge etwas hinter den Inhalt aller <p> -Elemente ein ::before p::before f\u00fcge etwas vor den Inhalt aller <p> -Elemente ein ::first-letter p::first-letter alle ersten Buchstaben aller <p> -Elemente ::first-line p::first-line alle ersten Zeilen aller <p> -Elemente ::selection p::selection alle vom Nutzer markierten (selektierten) Teile eines <p> -Elementes","title":"Selektoren"},{"location":"css/#box-model","text":"Wenn Sie die Breite und die H\u00f6he eines Elementes mithilfe der width - und height -Eigenschaft von CSS angeben wollen, dann m\u00fcssen Sie beachten, dass Sie damit \"nur\" die H\u00f6he und Breite des Inahltes dieses Elementes angeben. Zur Gesamtbreite und -h\u00f6he eines Elementes z\u00e4hlen aber auch noch: padding : der Abstand des Inhaltes zum Rahmen ( border ) des Elementes, border : der Rahmen des Elementes (falls es einen gibt) und margin : der Abstand des Elementes zu den Nachbarelementen. Zusammen mit dem Inhalt des Elementes wird dieser Zusammenhang Box Model genannt. Folgende Darstellung zeigt das Box Model: Das Box Model besagt, dass alle HTML-Elemente als eine rechteckige \"Box\" verstanden werden k\u00f6nnen und diese Box aus dem Inhalt, padding , border und margin besteht. Beispiel Box Model - HTML Beispiel Box Model - CSS < body > < h3 > Box Model </ h3 > < img src = \"./images/fiw.jpg\" alt = \"fiw logo\" style = \"width:350px\" /> < div > Das FIW-Logo hat eine Breite von 350px (width:350px). Der Inhalt dieser Box hat eine Breite von 320px. Dazu kommt padding von 10px (auf beiden Seiten) und ein Rahmen mit der Breite von 5px. Macht zusammen 350px. </ div > </ body > div { width : 320 px ; padding : 10 px ; border : 5 px solid gray ; margin : 0 ; } Das Bild hat eine Breite von 350px (siehe style -Attribut von img ). Der Inhalt des div -Containers hat eine Breite von 320px . Der Abstand des Inhalts zum Rahmen ist links und rechts jeweils 10px und der Rahmen ist links und rechts jeweils 5px gro\u00df. Ergibt zusammen eine Breite von ( 320 + 10 + 10 + 5 + 5 = 350 ). Somit ist das div inklusive padding und border exakt so breit wie das Bild: Das hier beschriebene Box Model entspricht der CSS-Definition box-sizing: content-box; . Dies ist der Standard (muss also nicht angegeben werden). Daneben gibt es auch noch die M\u00f6glichkeit, anstelle von content-box den Wert border-box zu verwenden. Dann ist in der Angabe von width und height sowohl padding als auch border integriert - erweitern Sie obige CSS-Definition um * { box-sizing : border-box ; } Dann wird der Unterschied sichtbar. border-box kann aber zu Problemen bei der Verwendung anderer Frameworks f\u00fchren und sollte deshalb eher nicht verwendet werden.","title":"Box Model"},{"location":"css/#die-display-eigenschaft","text":"Mithilfe der display -Eigenschaft k\u00f6nnen Block-Elemente als Inline-Elemente definiert werden und umgedreht. display:block definiert ein Element als Block-Element, display: inline definiert ein Element als Inline-Element. Au\u00dferdem gibt es noch die M\u00f6glichkeit, mithilfe von display: none; ein Element unsichtbar zu schalten. Dieses Element nimmt dann im Viewport , also dem sichtbaren Bereich der Webseite, keinen Platz ein (im Gegensatz zu einem Element, das mithilfe von visibility: hidden; auf unsichtbar gesetzt wird). Hier ein Beispiel zur Verwendung der display -Eigenschaft. Fahren Sie unter dem Reiter Result mit der Maus \u00fcber das orange umrandete div . Es gibt noch viele weitere Werte f\u00fcr display , auf die wir aber nicht n\u00e4her eingehen wollen. Eine \u00dcbersicht finden Sie z.B. hier .","title":"Die display-Eigenschaft"},{"location":"css/#layout-gestalten-mithilfe-von-css","text":"Wir werden f\u00fcr das Layout unserer Webseiten in Zukunft CSS-Frameworks, wie z.B. Bootstrap oder Materialize oder SemanticUI verwenden. F\u00fcr das Layout stellen diese Frameworks insbesondere ein Grid-Konzept zur Verf\u00fcgung, das recht einfach nutzbar ist und sogar f\u00fcr eine responsive Darstellung sorgt. Zun\u00e4chst wollen wir jedoch die Prinzipien verstehen, auf denen diese Frameworks (und deren Grid-Konzept) basieren.","title":"Layout gestalten mithilfe von CSS"},{"location":"css/#mehrspaltig-mithilfe-von-float","text":"Generell werden Container untereinander dargestellt, in der Reihenfolge ihres Auftretens im HTML. Betrachten wir ein einfaches Beispiel: < body > < p id = \"p1\" >< img src = \"./images/fiw.jpg\" alt = \"fiw-logo\" style = \"width:100px;\" /></ p > < p id = \"p2\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > < p id = \"p3\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. </ p > </ body > Untereinander definiert sind 3 Block-Elemente ( <p> -Elemente), die jeweils eine eigene id besitzen. Der erste Absatz enth\u00e4lt ein Bild mit der Breite 100px . Dies f\u00fchrt zu folgender Ansicht: Alle drei Block-Elemente sind also, wie erwartet, untereinander.","title":"Mehrspaltig mithilfe von float"},{"location":"css/#umflieen-lassen-float","text":"Angenommen, wir wollen nun, dass das Bild von Text umflossen wird, dass also der Absatz mit dem Bild neben den danach folgenden Abs\u00e4tzen erscheint. Dann kommt die CSS-Eigenschaft float ins Spiel. Wir k\u00f6nnen entscheiden, ob das Bild links sein soll und umflossen wird ( float: left; ) oder rechts sein und dort vom Text umflossen werden soll ( float: right; ). Wir f\u00fcgen exemplarisch folgende Eigenschaft (f\u00fcr die id p1 ) hinzu: # p1 { float : left ; margin-right : 15 px ; } Damit legen wir fest, dass der erste Absatz umflossen werden soll (und links bleibt - float: left; ). Mit der margin-right -Eigenschaft sorgen wir f\u00fcr einen Abstand zum unflie\u00dfenden Text. Es entsteht folgende Ansicht: Das hei\u00dft, dass alle folgenden Abs\u00e4tze den ersten Absatz umflie\u00dfen.","title":"Umflie\u00dfen lassen: float"},{"location":"css/#umflieen-stoppen-clear","text":"Das Umflie\u00dfen kann auch wieder gestoppt werden. Dies geschieht mithilfe der clear -Eigenschaft. Um float: left zu stoppen, wird clear: left verwendet und um float: right zu stoppen, wird clear: right verwendet. Sollte es mehrere Elemente mit einer float -Eigenschaft geben, kann zum Stoppen clear: both verwendet werden. Wenn wir nun also f\u00fcr den dritten Absatz definieren: # p3 { clear : left ; } , dann beginnt der dritte Absatz wieder am Beginn einer neuen Zeile unterhalb der beiden Abs\u00e4tze p1 und p2 .","title":"Umflie\u00dfen stoppen: clear"},{"location":"css/#mehr-als-2-spalten","text":"Wenn wir nun alle 3 Abs\u00e4tze nebeneinander setzen wollen, dann definieren wir einfach f\u00fcr alle 3 Abs\u00e4tze float:left; . Damit alle 3 Abs\u00e4tze die gleiche Breite haben, geben wir noch f\u00fcr jeden Absatz an, dass er 33.33% des Viewports einnimmt ( width: 31.33% + padding:1% - links und rechts): # p1 , # p2 , # p3 { float : left ; width : 31.33 % ; padding : 1 % ; } Beachten Sie dazu noch folgende \u00c4nderung beim <img> -Element. Wir \u00e4ndern die Breite des Bildes von 100px (feste Breite) auf 100% (relative Breite - relativ zum Elternelement, das ist <p id=\"p1\"> ). < p id = \"p1\" >< img src = \"./images/fiw.jpg\" alt = \"fiw-logo\" style = \"width:100%;\" /></ p > Sch\u00f6ner - und \u00fcblicher, weil sp\u00e4ter auch so beim Grid-Konzept - ist es, den Elementen, die man nebeneinander anordnen m\u00f6chte, eine CSS-Klasse zuzuweisen, z.B. class=\"column\" und f\u00fcr diese Klasse dann die float -Eigenschaft mit zugeh\u00f6riger relativer Breite zu definieren. Au\u00dferdem f\u00fcgt man oft um die Spalten einen weiteren Container mit einer Klasse class=\"row\" (Beispiel) und kann dann f\u00fcr diese Klasse ( .row:after die clear -Eigenschaft definieren). Ein solches Beispiel nochmal hier:","title":"mehr als 2 Spalten"},{"location":"css/#flexbox","text":"Wir werden sehen, dass das Grid-Konzept, das wir zuk\u00fcnftig verwenden werden, auf der float -Eigenschaft (zusammen mit width ) basiert. Ein Konzept, welches von der Komplexit\u00e4t \"zwischen\" float und dem Grid-Konzept liegt, ist flexbox . Mit flexbox ist das Nebeneinanderpositionieren von Containern recht einfach - insbesondere lassen sich auch recht leicht unterschiedliche Spaltenbreiten definieren- Wir gehen hier nicht weiter auf flexbox ein, sondern verweisen auf z.B. A Guide to Flexbox .","title":"Flexbox"},{"location":"css/#grid","text":"flexbox verwendet float und CSS Grid (oder nur Grid ) verwendet flexbox . W\u00e4hrend flexbox nur in ein Dimension das Layout gestaltet (n\u00e4mlich horizontal), kann Grid f\u00fcr einen vollst\u00e4ndigen Layout-Entwurf verwendet werden (n\u00e4mlich horizontal und vertikal). Dazu wird unsere Webseite als eine Matrix verstanden, bestehend aus Zellen , die in Zeilen und Spalten angeordnet sind. Am besten, wir betrachten ein Beispiel : HTML CSS 1 2 3 4 5 6 7 8 < div class = \"wrapper\" > < div class = \"one orange\" > One </ div > < div class = \"two orange\" > Two </ div > < div class = \"three orange\" > Three </ div > < div class = \"four orange\" > Four </ div > < div class = \"five orange\" > Five </ div > < div class = \"six orange\" > Six </ div > </ div > . wrapper { display : grid ; grid-template-columns : repeat ( 3 , 1 fr ); grid-gap : 10 px ; grid-auto-rows : minmax ( 100 px , auto ); } . one { grid-column : 1 / 3 ; grid-row : 1 ; } . two { grid-column : 2 / 4 ; grid-row : 1 / 3 ; } . three { grid-column : 1 ; grid-row : 2 / 5 ; } . four { grid-column : 3 ; grid-row : 3 ; } . five { grid-column : 2 ; grid-row : 4 ; } . six { grid-column : 3 ; grid-row : 4 ; } . orange { background-color : orange ; opacity : 0.5 ; border : 2 px solid gray ; border-radius : 5 px ; padding : 30 px ; } Die Webseite sieht dann so aus: Hier nochmal in JSFiddle:","title":"Grid"},{"location":"css/#erlauterung-des-codes","text":"Wir erkennen, dass sechs Zellen in einer Matrix angeordnet werden. Umschlossen sind diese Zellen durch ein div der CSS-Klasse wrapper . F\u00fcr diese Klasse wrapper wird CSS-Grid wie folgt definiert: . wrapper { display : grid ; grid-template-columns : repeat ( 3 , 1 fr ); grid-gap : 10 px ; grid-auto-rows : minmax ( 100 px , auto ); } Der umschlie\u00dfende Container wird mithilfe von display: grid; als Grid-Container definiert. Mit grid-template-columns: repeat(3, 1fr); werden die Spalten definiert. Hier werden 3 Spalten festgelegt und jede dieser Spalten hat die gleiche Breite. Wir h\u00e4tten auch schreiben k\u00f6nnen grid-template-columns: 33% 33% 33%; . Allerdings ergibt sich dann ein kleines Problem: Da wir in der folgenden Zeile grid-gap: 10px; angeben, dass zwischen den Spalten ein Abstand von 10px eingehalten werden soll, w\u00fcrde die Breite insgesamt die 100% \u00fcbersteigen ( 3 x 33% + 2 * 10px ). Deshalb wird die Einheit fr ( fraction ) verwendet. Zur Einheit fr finden Sie n\u00e4here Informationen hier . Die Eigenschaft grid-auto-rows: minmax(100px, auto); beschreibt, dass die Zeilenh\u00f6he automatisch berechnet wird (aus dem Inhalt), aber mindestens 100px hoch ist. F\u00fcr die einzelnen Zellen wird nun mithilfe von grid-column: <start-line> / <end-line> und grid-row: <start-line> / <end-line> jeweils angegeben, wo die jeweilige Zelle beginnt und wo sie aufh\u00f6rt. Wird keine <end-line> angegeben, dann geht die Zelle \u00fcber genau eine Spalte bzw. genau eine Zeile. Wenn wir uns also das Grid wie folgt vergegenw\u00e4rtigen: dann geht One von Spaltenlinie 1 bis Spaltenlinie 3 und von Zeilenlinie 1 (bis Zeilenlinie 2 ), dann geht Two von Spaltenlinie 2 bis ans Ende (Speltenlinie 4 ) und von Zeilenlinie 1 bis Zeilenlinie 3 , dann geht Three von Spaltenlinie 1 (bis Spaltenlinie 2 ) und von Zeilenlinie 2 bis ans Ende Zeilenlinie 5 usw. CSS-Grid ist sehr m\u00e4chtig. Eine detaillierte Beschreibung finden Sie z.B. hier und auch hier .","title":"Erl\u00e4uterung des Codes"},{"location":"css/#wertangaben-in-css","text":"Numerische Werte k\u00f6nnen in CSS absolut oder relativ angegeben werden, je nach verwendeter Einheit. Folgende Tabelle gibt eine \u00dcbersicht \u00fcber die unterschiedlichen Einheiten f\u00fcr numerische Werte. Einheit Angabetyp Bedeutung % relativ relativ entweder zur elementeigenen Gr\u00f6\u00dfe, zur Gr\u00f6\u00dfe des Elternelements oder zum allegemeinen Kontext cm absolut Zentimenter em relativ Schriftgr\u00f6\u00dfe des Elements (bei font-size aber Schriftgr\u00f6\u00dfe des Elternelements) ex relativ H\u00f6he des Kleinbuchstabens x im Element (bei font-size aber die Schriftgr\u00f6\u00dfe von x im Elternelement) in absolut inch (1 inch = 2,54 cm) mm absolut Milimeter pc absolut pica (1 pc = 12 Punkt) pt absolut Punkt (1 Punkt = 1/72 inch) px absolut und relativ absolut auf ein und dasselbe Ausgabeger\u00e4t bezogen und relativ von Ausgabeger\u00e4t zu Ausgabeger\u00e4t (Pixeldichte) Sie sollten absolute Angaben nur in Ausnahmef\u00e4llen verwenden. Wann immer es geht, ist eine relative Gr\u00f6\u00dfenangabe vorzuziehen. Somit werden am h\u00e4ufigsten % -Angaben und am zweith\u00e4ufigsten px -Angaben verwendet. em sieht man auch noch recht h\u00e4ufig. Von allen anderen Einheiten ist eher abzuraten.","title":"Wertangaben in CSS"},{"location":"css/#custom-properties","text":"Sie k\u00f6nnen sich eigene Variablen f\u00fcr die Verwendung in CSS-Definitionen erstellen. Es ist \u00fcblich, solche Variablen in einem \"gro\u00dfen\" Scope zu definieren, da sie auf den definierten Scope beschr\u00e4nkt sind. D.h., dass man solche Variablen typischerweise f\u00fcr * (also alle Elemente) oder body definiert. Die Variablen beginnen stets mit -- , also z.B. --variablenname . Der Zugriff auf die Variablen erfolgt mit var() , also z.B. var(--variablenname) . Hier ein Beispiel f\u00fcr die Definition von HTW-Farben und -Font: * { --htw-gruen : #76B900 ; --htw-grau : #AFAFAF ; --htw-orange : #FF5F00 ; --htw-blau : #0082D1 ; --htw-font : Verdana , Geneva , sans-serif ; } body { font-family : var ( --htw-font ); } h1 { color : var ( --htw-gruen ); } li a : hover { background-color : var ( --htw-orange ); } . active { background-color : var ( --htw-gruen ); }","title":"Custom Properties"},{"location":"css/#gewichtung-der-selektoren","text":"Insbesondere, wenn Sie noch CSS-Frameworks einbinden und/oder viele CSS-Definitionen haben, stellt sich die Frage, welche der Definitionen \u00fcberhaupt wirken. Eine gro\u00dfe Hilfe sind hier die Entwicklertools der Browser . Im folgenden Screenshot sehen Sie die Developer tools von Chrome. Im rechten unteren Fenster sind die definierten Styles angezeigt. Die nicht wirksamen Styledefinitionen sind durchgestrichen. Um zu ermitteln, welche Definition Anwendung findet, gibt es eine Gewichtung der Selektoren . Wichtig ist zu wissen, dass die Reihenfolge der Definitionen, egal ob im <style> -Element oder in externen CSS-Dateien keine Rolle spielt! Wir betrachten folgendes Beispiel, um die Gewichtung der Selektoren zu bestimmen: Wenn Sie sich zun\u00e4chst nur die CSS-Definitionen anschauen, dann sehen Sie, dass einem Link f\u00fcnf verschiedene Farben zugewiesen werden. Die Links sind aber rot. Es muss also aus einem bestimmten Grund die Definition # navigation a . link { color : red ; } am st\u00e4rksten wirken, d.h. der Selektor #navigation a.link hat in unserem Beispiel die st\u00e4rkste Gewichtung. Um die Gewichtung der Selektoren zu ermitteln, werden diese kategorisiert: Kategorie A : erh\u00e4lt den Wert 1, wenn CSS-Definitionen direkt im style-Attribut eines HTML-Elementes notiert sind Kategorie B : erh\u00e4lt den Wert 1 bei Selektoren f\u00fcr Elemente mit id -Attributen Kategorie C : Anzahl der von einem Selektor betroffenen Klassen und Pseudoklassen Kategorie D : Anzahl der von einem Selektor betroffenen Elementnamen und Pseudo-Elemente Bei der Reihenfolge der Sortierung gilt: A > B > C > D , also z.B. 1 0 0 0 vor (gr\u00f6\u00dfer als) 0 1 2 2 . Betrachten wir unser Beispiel: a:link : 0 0 1 1 (eine Pseudoklasse (link) und ein Element (a)) .link : 0 0 1 0 (eine Klasse) #navigation a.link : 0 1 1 1 (Element mit id -Attribut, eine Klasse und eine Element) li a : 0 0 0 2 (zwei Elemente) #navigation li a : 0 1 0 2 (Element mit id -Attribut, zwei Elemente) Es gilt 0 1 1 1 > 0 1 0 2 > 0 0 1 1 > 0 0 1 0 > 0 0 0 2 und deshalb sind die Links rot. In unserem Beispiel kommt kein style -Attribut vor, deshalb ist bei keinem Selektor die Kategorie A besetzt. W\u00e4re bei einem Link im HTML beispielsweise: < li >< a href = \"startseite.html\" class = \"link\" style = \"color: orange;\" > Startseite </ a ></ li > dann w\u00e4re dieser Link orange.","title":"Gewichtung der Selektoren"},{"location":"css/#weitere-informationen-uber-css","text":"Folien CSS W3Schools - CSS Mozilla Developer - CSS Selfhtml - CSS W3C - CSS","title":"Weitere Informationen \u00fcber CSS"},{"location":"einfuehrung/","text":"Webtechnologien - Einf\u00fchrung \u00b6 Als ein wesentlicher Begr\u00fcnder des World Wide Webs gilt Tim Berners Lee . Er begann 1989 mit einem Projekt, dessen Ergebnisse der erste Browser, der erste Webserver, HTTP und HTML waren. Hier werden die wesentlichen Begriffe erl\u00e4utert, die bei den Webtechnologien eine Rolle spielen. Internet \u00b6 Das Internet ist ein Netzwerk von Rechnernetzen ( Interconnected Network - InterNet ). Es handelt sich also um miteinander verbundene Rechnernetze. Das Internet ist aus dem ARPANET ( Advanced Research Projects Agency Network ) entstanden, welches Ende der 1960er Jahre am MIT und im US-Verteidigungsministerium entwickelt wurde. Die folgende Abbildung zeigt das komplette ARPANET im Jahre 1973: Die erste Daten\u00fcbertragung im ARPANET erfolgte 1969. Zwei wesentliche Konzepte wurden daf\u00fcr (im Laufe der folgenden Jahre) entwickelt: die eindeutige Adressierbarkeit der einzelnen Rechner im ARPANET/Internet und das Transportprotokolle, das die Daten\u00fcbertragung (in Datenpaketen) erm\u00f6glichte. Es entstand eine Internetprotokollfamilie: das Internet Protocol ( IP ). Internet Protocol \u00b6 Das Internet Protocol ist im OSI-Schichtenmodell die erste Schicht, die unabh\u00e4ngig vom eigentlichen \u00dcbetragungsmedium ist. Ein wesentlicher Teil der Definition des Internet Protocols nehmen die IP-Adressen ein. Die IP-Adressen des Internet Protocols Version 4 ( v4 ) bestehen aus 32 Bits und sind in 4 Bl\u00f6cke unterteilt, die durch einen Punkt getrennt sind. In Dezimaldarstellung kann jeder dieser vier Bl\u00f6cke die Werte von 0 bis 255 annehmen. Eine IP-Adresse der HTW sieht z.B. so aus: 141 .45.66.214 Die ersten drei Zahlenbl\u00f6cke bilden den Netzanteil und der letzte Zahlenblock gibt den Hostanteil an. Die Aufteilung dieser Anteile kann allerdings durch eine Subnetzmaske festgelegt bzw. ge\u00e4ndert werden. Die genannte Aufteilung gilt f\u00fcr eine Subnetzmaske 255.244.255.0 . Die Kommunikation zwischen den Teilnetzen erfolgt \u00fcber einen Router . Unter Verwendung von IPv4 lassen sich 2^32 = 256^4 = 4.294.967.296 Adressen unterscheiden. Da die Anzahl der Rechner, die mit dem Internet verbunden sind, in den vergangenen Jahren enorm gestiegen ist und weitere Ger\u00e4te (siehe Internet of Things ) hinzukommen werden, reicht dieser Adressraum nicht mehr aus und es wurde IPv6 spezifiziert, in dem 128 Bit zur Adressierung verwendet werden und somit 2^128 Adressen zur Verf\u00fcgung stehen. Das gen\u00fcgt erstmal ( Diese Anzahl reicht aus, um f\u00fcr jeden Quadratmillimeter der Erdoberfl\u00e4che mindestens 665.570.793.348.866.944 (= 6,65 \u00b7 10^17) IP-Adressen bereitzustellen Wikipedia ). Die \u00dcbertragung der Datenpakete zwischen zwei Hosts (Rechner mit jeweiliger IP-Adresse) wird auf der Transportschicht durch das Transmission Control Protocol ( TCP ) geregelt. Dabei kommunizieren die beiden sich verbindenden Rechner im Vollduplex , d.h. beide Rechner k\u00f6nnen sowohl Daten empfangen als auch senden. Die herstellung der Verbindung zwischen den beiden Rechnern erfogt \u00fcber einen Handshake . Die jeweiligen Datenpakete bestehen aus einem Header und den eigentlichen Daten . Ein Paket wird so oft gesendet, bis der Empfang best\u00e4tigt wurde. TCP wird als Transportprotokoll f\u00fcr viele Internet-Dienste verwendet, z.B. f\u00fcr WWW und f\u00fcr E-Mail. Dabei darf das Transportprotokoll (Transportschicht) nicht mit einem Protokoll der Anwendungsschicht (ist \u00fcber der Transportschicht) verwechselt werden. Das HTTP (Anwendungsschicht) nutzt TCP genauso wie SMTP. Internet-Dienste \u00b6 Das Internet (der Verbund aus Rechnernetzen) stellt zusammen mit dem Internet Protocol eine Infrastruktur f\u00fcr verschiedene Dienste zur Verf\u00fcgung. Dienste stellen M\u00f6glichkeiten dar, das Internet zu nutzen. Zu solchen Diensten geh\u00f6ren z.B. (in Klammern die verwendteen Protokolle): E-Mail ( SMTP , POP3 , IMAP ), File Transfer ( FTP ), World Wide Web ( HTTP , HTTPS ), Secure Shell ( SSH ), Namensaufl\u00f6sung ( DNS ), Internet-Telefonie (VoIP), Video-Chat, Video on Demand usw. Das WWW ist also ein Dienst f\u00fcr die Infrastruktur Internet! Die beiden Begriffe werden h\u00e4ufig f\u00e4lschlicherweise synonym verwendet. Hypertext Transfer Protocol (HTTP) \u00b6 Das Hypertext Transfer Protocol ist ein Protokoll der Anwendungsschicht, aufbauend auf das TCP der Transportschicht. Es wird verwendet, um Daten von einem Rechner (dem Webserver ) auf einen anderen Rechner (dem Client mit einem Webbrowser ) zu \u00fcbetragen (und vice versa). Es wurde von Tim Berners Lee entwickelt und nun vom World Wide Web Consortium ( W3C ) standardisiert. Es unterscheidet nur wenige Anfragemethoden (folgende Liste nicht ganz vollst\u00e4ndig): GET : fragt eine Ressource (Daten/Datei) von einem Webserver an, POST : schickt Daten vom Client an den Webserver, PUT : schickt ebenfalls Daten an den Webserver, typischerweise, um Ressourcen zu aktualisieren, DELETE : schickt Daten an den Server, um sie dort zu l\u00f6schen. Die wichtigste Anfragemethode ist GET , denn sie wird in den allermeisten F\u00e4llen verwendet, um eine Webseite von einem Webserver anzufragen. Wenn wir in die Konsole bspw. curl https://www.htw-berlin.de/ eingeben, dann erhalten wir vom Webserver der HTW die Webseite der HTW. F\u00fcr curl siehe hier . Typischerweise werden die Anfragen an den Webserver aber von einem Browser aus durchgef\u00fchrt. Das hei\u00dft, die Anfrage GET https://www.htw-berlin.de/ wird von einem Browser durchgef\u00fchrt, wenn wir in das URL-Eingabefeld https://www.htw-berlin.de/ eingeben. Das prinzipielle Szenario ist also wie folgt: Der request beginnt mit einer der obigen Anfragemethoden und der angefragten Ressource (also z.B. GET https://www.htw-berlin.de/index.html ). Die response besteht dann genau aus der angefragten Ressource ( index.html ), wenn sie existiert. Die Ressource muss nicht zwingend eine html -Seite sein, es kann sich auch um eine xml , json oder irgendein anderes Dateiformat handeln. Ein konkreter request und eine konkrete response ist im folgenden Bild zu sehen: In der response wird ein sogenannter HTTP-Statuscode mitgesendet. Die folgende Tabelle gibt einen kurzen \u00dcberblick \u00fcber diese Codes (siehe auch hier ): Methode Beschreibung 1xx Verarbeitung des Requests dauert noch an. (Seltene) R\u00fcckmeldung, um Abbruch durch Zeit\u00fcberschreitung zu verhindern. 2xx Erfolgreiche Bearbeitung der Anfrage und R\u00fcckmeldung. 200 OK 3xx Angeforderte Ressource wurde verschoben (Umleitung). 301 Moved Permanently 4xx Client-Fehler. Z.B. Request auf ein Dokument, das nicht existiert. 404 Not Found 5xx Server-Fehler. Z.B. Server kann Anfrage nicht bearbeiten. 500 Internal Server Error Ganz wichtig ist, dass das HTTProtokoll zustandslos ist. Das bedeutet, dass keine Informationen aus fr\u00fcheren Anfragen gespeichert oder anderweitig verwaltet werden. Das bedeutet aber auch, dass bspw. ein bef\u00fcllter Warenkorb durch HTTP gar nicht unterst\u00fctzt w\u00fcrde (f\u00fchere \"K\u00e4ufe\" k\u00f6nnen durch das Protokoll nicht ber\u00fccksichtigt werden). Um dieses Zustandslosigkeit zu umgehen, werden z.B. Cookies oder Session-IDs verwendet, um eine Historie der Anfragen beim Webserver erstellen und den Nutzern zuordnen zu k\u00f6nnen. HTTPS funktioniert wie HTTP, nur dass die Verbindung zwischen Browser und Webserver mittels Transport Layer Security ( TLS ) verschl\u00fcsselt wird. Ein Programm, welches das HTTProtokoll implementiert hat, ist Curl . Wenn Sie Curl installiert haben und im Terminal bspw. curl -v http://freiheit.f4.htw-berlin.de/WT/index.html eingeben ( -v steht f\u00fcr den verbose -Modus), dann erhalten Sie * Trying 141 .45.146.146... * TCP_NODELAY set * Connected to freiheit.f4.htw-berlin.de ( 141 .45.146.146 ) port 80 ( #0) > GET /WT/index.html HTTP/1.1 > Host: freiheit.f4.htw-berlin.de > User-Agent: curl/7.64.1 > Accept: */* > < HTTP/1.1 301 Moved Permanently < Date: Fri, 08 Oct 2021 06 :35:13 GMT < Server: Apache/2.4.38 ( Debian ) < Location: https://freiheit.f4.htw-berlin.de/WT/index.html < Content-Length: 346 < Content-Type: text/html ; charset = iso-8859-1 < <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\" > <html><head> <title>301 Moved Permanently</title> </head><body> <h1>Moved Permanently</h1> <p>The document has moved <a href = \"https://freiheit.f4.htw-berlin.de/WT/index.html\" >here</a>.</p> <hr> <address>Apache/2.4.38 ( Debian ) Server at freiheit.f4.htw-berlin.de Port 80 </address> </body></html> * Connection #0 to host freiheit.f4.htw-berlin.de left intact * Closing connection 0 Sie erhalten also die Meldung vom Webserver, dass die Seite index.html nicht mehr unter dieser Adresse verf\u00fcgbar ist, sondern wegbewegt wurde ( Moved permanently ). Der Statuscode der Antwort ist 301 . Das ist anders, wenn die Anfrage an die Ressource https://freiheit.f4.htw-berlin.de/WT/index.html gestellt wird, also per Transport Layer Security (TLS) verschl\u00fcsselt wird: * Trying 141 .45.146.146... * TCP_NODELAY set * Connected to freiheit.f4.htw-berlin.de ( 141 .45.146.146 ) port 443 ( #0) * ALPN, offering h2 * ALPN, offering http/1.1 * successfully set certificate verify locations: * CAfile: /etc/ssl/cert.pem CApath: none * TLSv1.2 ( OUT ) , TLS handshake, Client hello ( 1 ) : * TLSv1.2 ( IN ) , TLS handshake, Server hello ( 2 ) : * TLSv1.2 ( IN ) , TLS handshake, Certificate ( 11 ) : * TLSv1.2 ( IN ) , TLS handshake, Server key exchange ( 12 ) : * TLSv1.2 ( IN ) , TLS handshake, Server finished ( 14 ) : * TLSv1.2 ( OUT ) , TLS handshake, Client key exchange ( 16 ) : * TLSv1.2 ( OUT ) , TLS change cipher, Change cipher spec ( 1 ) : * TLSv1.2 ( OUT ) , TLS handshake, Finished ( 20 ) : * TLSv1.2 ( IN ) , TLS change cipher, Change cipher spec ( 1 ) : * TLSv1.2 ( IN ) , TLS handshake, Finished ( 20 ) : * SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384 * ALPN, server accepted to use http/1.1 * Server certificate: * subject: CN = freiheit.f4.htw-berlin.de * start date: Aug 9 20 :15:57 2021 GMT * expire date: Nov 7 20 :15:55 2021 GMT * subjectAltName: host \"freiheit.f4.htw-berlin.de\" matched cert 's \"freiheit.f4.htw-berlin.de\" * issuer: C=US; O=Let' s Encrypt ; CN = R3 * SSL certificate verify ok. > GET /WT/index.html HTTP/1.1 > Host: freiheit.f4.htw-berlin.de > User-Agent: curl/7.64.1 > Accept: */* > < HTTP/1.1 200 OK < Date: Fri, 08 Oct 2021 06 :49:55 GMT < Server: Apache/2.4.38 ( Debian ) < Last-Modified: Wed, 17 Oct 2018 13 :09:16 GMT < ETag: \"f3-5786c60a5f2e6\" < Accept-Ranges: bytes < Content-Length: 243 < Vary: Accept-Encoding < Content-Type: text/html < <!DOCTYPE html> <html lang = \"de\" > <head> <meta charset = \"utf-8\" /> <meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> <title>Webtech</title> </head> <body> <p>Hallo FIW!</p> </body> </html> * Connection #0 to host freiheit.f4.htw-berlin.de left intact * Closing connection 0 Sie sehen darin, dass der Webserver freiheit.f4.htw-berlin.de unter der IP 141.45.146.146 l\u00e4uft, das die Verbindung \u00fcber TLSv1.2 hergestellt wird (Port 443 ) und dass f\u00fcr die GET -Anfrage das HTTProtokoll in der Version 1.1 verwendet wird. Als response wird die HTML-Seite index.html zur\u00fcckgesendet. Der Status-Code der Antwort ist nun 200 OK . F\u00fcr Curl siehe auch hier . Uniform Resource Identifier (URI) \u00b6 Uniform Resource Identifiers sind Zeichenfolgen, die Ressourcen eindeutig beschreiben und deren Zugriff darauf. Die bekannteste Unterart von URI sind Uniform Resource Locator (URL) . H\u00e4ufig werden URL und URI synonym verwendet, was nicht ganz korrekt ist. Generell beschreiben URI : Wie kann ich auf die Ressource zugreifen (Zugriffsmethode)? Um welche Ressource handelt es sich ( URI ) bzw. wo befindet sich die Ressource im Netzwerk ( URL )? Der generelle Aufbau einer URI ist wie folgt: scheme://authority/path?query#fragment scheme kann z.B. ftp , mailto , news , file oder http sein. authority beschreibt meistens einen Host , z.B. freiheit.f4.htw-berlin.de oder freiheit.f4.htw-berlin.de:443 oder 141.45.146.146 . path beschreibt den Pfad hin zur Ressource und die Ressource selbst, z.B. WT/index.html . query ist ein (oder mehrere) Schl\u00fcssel-Werte-Paare der Form key=value . Das erste Schl\u00fcssel-Werte-Paar steht nach einem ? , jedes weitere Schl\u00fcssel-Werte-Paar steht nach einem & , z.B. ?search=webtech&id=1234 . fragment steht f\u00fcr eine bestimmte Stelle innerhalb der Ressource (z.B. ein Anker im HTML-Dokument) Ganz wichtig ist, dass URI ( URL ) keine Leerzeichen enthalten d\u00fcrfen (auch keine Umlaute! und manche Sonderzeichen, wie z.B. ? und & eine Bedeutung haben). Daraus ergibt sich, dass solche Zeichen maskiert werden. Z.B. wird ein Leerzeichen als %20 maskiert. Domain Name System (DNS) \u00b6 Das Domain Name System (DNS) ist f\u00fcr die Aufl\u00f6sung von Namen nach IP-Adressen zust\u00e4ndig. Wenn wir bspw. in den Browser https://freiheit.f4.htw-berlin.de eingeben, dann wird eine GET -Anfrage an den Webserver mit dem Namen freiheit.f4.htw-berlin.de gestellt. Da die Kommunikation unter den Rechnern im Internet jedoch \u00fcber IP-Adressen erfolgt und nicht \u00fcber Namen, muss dieser Namen \"aufgel\u00f6st\" werden. Das \u00fcbernimmt das DNS. Es ermittelt f\u00fcr diesen Webserver die IP 141.45.146.146 . Das DNS funktioniert also wie eine Telefonauskunft, f\u00fcr einen konkreten Namen wird eine eindeutige IP ermittelt. Das DNS besteht aus sehr vielen Servern, die jeweils unabh\u00e4ngig voneinander (dezentral) arbeiten und die eine hierarchische Struktur des Namensraumes abbilden. F\u00fcr den Fall freiheit.f4.htw-berlin.de bedeutet das, dass zuerst die Server ( Root-Server ) angesprochen werden, die die Top-level-Domain de verwalten. Von diesen Servern wird man an die Server weitergelietet, die den Namensraum htw-berlin verwalten und so weiter bis die IP-Adresse vollst\u00e4ndig ermittelt und aufgel\u00f6st werden kann. Verfolgen l\u00e4sst sich diese Aufl\u00f6sung bspw. mithilfe des dig -Kommandos: dig +trace +additional -t A freiheit.f4.htw-berlin.de Dieses Kommande erzeugt z.B. folgende Ausgabe (gek\u00fcrzt): ; <<>> DiG 9 .10.6 <<>> +trace +additional -t A freiheit.f4.htw-berlin.de ;; global options: +cmd . 79476 IN NS d.root-servers.net. . 79476 IN NS f.root-servers.net. . 79476 IN NS c.root-servers.net. . 79476 IN NS k.root-servers.net. . 79476 IN NS i.root-servers.net. . 79476 IN NS g.root-servers.net. . 79476 IN NS h.root-servers.net. . 79476 IN NS j.root-servers.net. . 79476 IN NS b.root-servers.net. . 79476 IN NS a.root-servers.net. . 79476 IN NS e.root-servers.net. . 79476 IN NS l.root-servers.net. . 79476 IN NS m.root-servers.net. . 79476 IN RRSIG NS 8 0 518400 20211021050000 20211008040000 14748 . ;; Received 525 bytes from 192 .168.178.1#53 ( 192 .168.178.1 ) in 11 ms de. 172800 IN NS s.de.net. de. 172800 IN NS n.de.net. de. 172800 IN NS a.nic.de. de. 172800 IN NS f.nic.de. de. 172800 IN NS l.de.net. de. 172800 IN NS z.nic.de. de. 86400 IN DS 26755 8 2 F341357809A5954311CCB82ADE114C6C1D724A75C0395137AA397803 5425E78D de. 86400 IN RRSIG DS 8 1 86400 20211021050000 20211008040000 14748 . s.de.net. 172800 IN A 195 .243.137.26 s.de.net. 172800 IN AAAA 2003 :8:14::53 n.de.net. 172800 IN A 194 .146.107.6 n.de.net. 172800 IN AAAA 2001 :67c:1011:1::53 a.nic.de. 172800 IN A 194 .0.0.53 a.nic.de. 172800 IN AAAA 2001 :678:2::53 f.nic.de. 172800 IN A 81 .91.164.5 f.nic.de. 172800 IN AAAA 2a02:568:0:2::53 l.de.net. 172800 IN A 77 .67.63.105 l.de.net. 172800 IN AAAA 2001 :668:1f:11::105 z.nic.de. 172800 IN A 194 .246.96.1 z.nic.de. 172800 IN AAAA 2a02:568:fe02::de ;; Received 759 bytes from 198 .41.0.4#53 ( a.root-servers.net ) in 25 ms htw-berlin.de. 86400 IN NS dns-2.dfn.de. htw-berlin.de. 86400 IN NS infobloxv.htw-berlin.de. tjlb7qbojvmlf1s6gdriru7vsms1lg16.de. 7200 IN NSEC3 1 1 15 CA12B74ADB90591A TJLFG48H vkljn0takntiv7s3te6vlcveecv4kj34.de. 7200 IN NSEC3 1 1 15 CA12B74ADB90591A VKLN0C6F tjlb7qbojvmlf1s6gdriru7vsms1lg16.de. 7200 IN RRSIG NSEC3 8 2 7200 20211017040550 20211003023550 54729 de. vkljn0takntiv7s3te6vlcveecv4kj34.de. 7200 IN RRSIG NSEC3 8 2 7200 20211018032318 20211004015318 54729 de. infobloxv.htw-berlin.de. 86400 IN A 141 .45.65.100 ;; Received 628 bytes from 2003 :8:14::53#53 ( s.de.net ) in 17 ms freiheit.f4.htw-berlin.de. 28800 IN A 141 .45.146.146 ;; Received 70 bytes from 141 .45.65.100#53 ( infobloxv.htw-berlin.de ) in 35 ms Zuerst erfolgt die Abfrage \u00fcber die Root-Server und einige Weiterleitungsserver bis der Name vom DNS-Server der HTW infobloxv.htw-berlin.de (IP-Adresse 141.45.65.100 ) schlussendlich aufgel\u00f6st wird. Man sieht auch, dass die Anfragen an die DNS-Server \u00fcber den Port 53 gesendet werden. World Wide Web (WWW) \u00b6 Die Grundidee von Webservern ist es, HTML-Dokumente zum Lesen zur Verf\u00fcgung zu stellen. HTML steht f\u00fcr Hypertext Markup Language . Dabei steht Hypertext f\u00fcr die Idee, in den Textdokumenten Hyperlinks auf andere Textdokumente (die auf dem gleichen oder anderen Webservern liegen) zu definieren. Ein Klick auf diese Hyperlinks liest die Dokumente vom Webserver und \u00f6ffnet sie im Browser. Stellt man alle diese Dokumente als Knoten dar und fasst man die Hyperlinks als eine Verbindung zwischen diesen Dokumenten (Knoten) auf, so entsteht das Bild eines Netzes ( Web ). Da es Webserver auf der ganzen Welt umspannt, wird vom World Wide Web gesprochen. Das WWW ist also ein \u00fcber das Internet aufrufbares Hypertext-System aus lauter Webseiten. Heute spricht man eher von Hypermedien als von Hypertexten. Es ist eines von vielen Diensten des Internets. Tim Berners Lee \u00b6 Es ist beeindruckend, wie viele der Webtechnologien erstmalig von Tim Berners Lee umgesetzt wurden. Er entwickelte HTML HTTP URL den ersten Webbrowser ( WorldWideWeb ) und den ersten Webserver ( CERN httpd ) Keine dieser Entwicklungen wurden patentiert und konnten somit kostenfrei von allen genutzt werden, was der schnellen Verbreitung dieser Technologien diente. 1994 gr\u00fcndete er das World Wide Web Consortium (W3C), welches sich um die Standadisierung dieser und weiterer Webtechnologien k\u00fcmmert, siehe w3.org .","title":"Einf\u00fchrung"},{"location":"einfuehrung/#webtechnologien-einfuhrung","text":"Als ein wesentlicher Begr\u00fcnder des World Wide Webs gilt Tim Berners Lee . Er begann 1989 mit einem Projekt, dessen Ergebnisse der erste Browser, der erste Webserver, HTTP und HTML waren. Hier werden die wesentlichen Begriffe erl\u00e4utert, die bei den Webtechnologien eine Rolle spielen.","title":"Webtechnologien - Einf\u00fchrung"},{"location":"einfuehrung/#internet","text":"Das Internet ist ein Netzwerk von Rechnernetzen ( Interconnected Network - InterNet ). Es handelt sich also um miteinander verbundene Rechnernetze. Das Internet ist aus dem ARPANET ( Advanced Research Projects Agency Network ) entstanden, welches Ende der 1960er Jahre am MIT und im US-Verteidigungsministerium entwickelt wurde. Die folgende Abbildung zeigt das komplette ARPANET im Jahre 1973: Die erste Daten\u00fcbertragung im ARPANET erfolgte 1969. Zwei wesentliche Konzepte wurden daf\u00fcr (im Laufe der folgenden Jahre) entwickelt: die eindeutige Adressierbarkeit der einzelnen Rechner im ARPANET/Internet und das Transportprotokolle, das die Daten\u00fcbertragung (in Datenpaketen) erm\u00f6glichte. Es entstand eine Internetprotokollfamilie: das Internet Protocol ( IP ).","title":"Internet"},{"location":"einfuehrung/#internet-protocol","text":"Das Internet Protocol ist im OSI-Schichtenmodell die erste Schicht, die unabh\u00e4ngig vom eigentlichen \u00dcbetragungsmedium ist. Ein wesentlicher Teil der Definition des Internet Protocols nehmen die IP-Adressen ein. Die IP-Adressen des Internet Protocols Version 4 ( v4 ) bestehen aus 32 Bits und sind in 4 Bl\u00f6cke unterteilt, die durch einen Punkt getrennt sind. In Dezimaldarstellung kann jeder dieser vier Bl\u00f6cke die Werte von 0 bis 255 annehmen. Eine IP-Adresse der HTW sieht z.B. so aus: 141 .45.66.214 Die ersten drei Zahlenbl\u00f6cke bilden den Netzanteil und der letzte Zahlenblock gibt den Hostanteil an. Die Aufteilung dieser Anteile kann allerdings durch eine Subnetzmaske festgelegt bzw. ge\u00e4ndert werden. Die genannte Aufteilung gilt f\u00fcr eine Subnetzmaske 255.244.255.0 . Die Kommunikation zwischen den Teilnetzen erfolgt \u00fcber einen Router . Unter Verwendung von IPv4 lassen sich 2^32 = 256^4 = 4.294.967.296 Adressen unterscheiden. Da die Anzahl der Rechner, die mit dem Internet verbunden sind, in den vergangenen Jahren enorm gestiegen ist und weitere Ger\u00e4te (siehe Internet of Things ) hinzukommen werden, reicht dieser Adressraum nicht mehr aus und es wurde IPv6 spezifiziert, in dem 128 Bit zur Adressierung verwendet werden und somit 2^128 Adressen zur Verf\u00fcgung stehen. Das gen\u00fcgt erstmal ( Diese Anzahl reicht aus, um f\u00fcr jeden Quadratmillimeter der Erdoberfl\u00e4che mindestens 665.570.793.348.866.944 (= 6,65 \u00b7 10^17) IP-Adressen bereitzustellen Wikipedia ). Die \u00dcbertragung der Datenpakete zwischen zwei Hosts (Rechner mit jeweiliger IP-Adresse) wird auf der Transportschicht durch das Transmission Control Protocol ( TCP ) geregelt. Dabei kommunizieren die beiden sich verbindenden Rechner im Vollduplex , d.h. beide Rechner k\u00f6nnen sowohl Daten empfangen als auch senden. Die herstellung der Verbindung zwischen den beiden Rechnern erfogt \u00fcber einen Handshake . Die jeweiligen Datenpakete bestehen aus einem Header und den eigentlichen Daten . Ein Paket wird so oft gesendet, bis der Empfang best\u00e4tigt wurde. TCP wird als Transportprotokoll f\u00fcr viele Internet-Dienste verwendet, z.B. f\u00fcr WWW und f\u00fcr E-Mail. Dabei darf das Transportprotokoll (Transportschicht) nicht mit einem Protokoll der Anwendungsschicht (ist \u00fcber der Transportschicht) verwechselt werden. Das HTTP (Anwendungsschicht) nutzt TCP genauso wie SMTP.","title":"Internet Protocol"},{"location":"einfuehrung/#internet-dienste","text":"Das Internet (der Verbund aus Rechnernetzen) stellt zusammen mit dem Internet Protocol eine Infrastruktur f\u00fcr verschiedene Dienste zur Verf\u00fcgung. Dienste stellen M\u00f6glichkeiten dar, das Internet zu nutzen. Zu solchen Diensten geh\u00f6ren z.B. (in Klammern die verwendteen Protokolle): E-Mail ( SMTP , POP3 , IMAP ), File Transfer ( FTP ), World Wide Web ( HTTP , HTTPS ), Secure Shell ( SSH ), Namensaufl\u00f6sung ( DNS ), Internet-Telefonie (VoIP), Video-Chat, Video on Demand usw. Das WWW ist also ein Dienst f\u00fcr die Infrastruktur Internet! Die beiden Begriffe werden h\u00e4ufig f\u00e4lschlicherweise synonym verwendet.","title":"Internet-Dienste"},{"location":"einfuehrung/#hypertext-transfer-protocol-http","text":"Das Hypertext Transfer Protocol ist ein Protokoll der Anwendungsschicht, aufbauend auf das TCP der Transportschicht. Es wird verwendet, um Daten von einem Rechner (dem Webserver ) auf einen anderen Rechner (dem Client mit einem Webbrowser ) zu \u00fcbetragen (und vice versa). Es wurde von Tim Berners Lee entwickelt und nun vom World Wide Web Consortium ( W3C ) standardisiert. Es unterscheidet nur wenige Anfragemethoden (folgende Liste nicht ganz vollst\u00e4ndig): GET : fragt eine Ressource (Daten/Datei) von einem Webserver an, POST : schickt Daten vom Client an den Webserver, PUT : schickt ebenfalls Daten an den Webserver, typischerweise, um Ressourcen zu aktualisieren, DELETE : schickt Daten an den Server, um sie dort zu l\u00f6schen. Die wichtigste Anfragemethode ist GET , denn sie wird in den allermeisten F\u00e4llen verwendet, um eine Webseite von einem Webserver anzufragen. Wenn wir in die Konsole bspw. curl https://www.htw-berlin.de/ eingeben, dann erhalten wir vom Webserver der HTW die Webseite der HTW. F\u00fcr curl siehe hier . Typischerweise werden die Anfragen an den Webserver aber von einem Browser aus durchgef\u00fchrt. Das hei\u00dft, die Anfrage GET https://www.htw-berlin.de/ wird von einem Browser durchgef\u00fchrt, wenn wir in das URL-Eingabefeld https://www.htw-berlin.de/ eingeben. Das prinzipielle Szenario ist also wie folgt: Der request beginnt mit einer der obigen Anfragemethoden und der angefragten Ressource (also z.B. GET https://www.htw-berlin.de/index.html ). Die response besteht dann genau aus der angefragten Ressource ( index.html ), wenn sie existiert. Die Ressource muss nicht zwingend eine html -Seite sein, es kann sich auch um eine xml , json oder irgendein anderes Dateiformat handeln. Ein konkreter request und eine konkrete response ist im folgenden Bild zu sehen: In der response wird ein sogenannter HTTP-Statuscode mitgesendet. Die folgende Tabelle gibt einen kurzen \u00dcberblick \u00fcber diese Codes (siehe auch hier ): Methode Beschreibung 1xx Verarbeitung des Requests dauert noch an. (Seltene) R\u00fcckmeldung, um Abbruch durch Zeit\u00fcberschreitung zu verhindern. 2xx Erfolgreiche Bearbeitung der Anfrage und R\u00fcckmeldung. 200 OK 3xx Angeforderte Ressource wurde verschoben (Umleitung). 301 Moved Permanently 4xx Client-Fehler. Z.B. Request auf ein Dokument, das nicht existiert. 404 Not Found 5xx Server-Fehler. Z.B. Server kann Anfrage nicht bearbeiten. 500 Internal Server Error Ganz wichtig ist, dass das HTTProtokoll zustandslos ist. Das bedeutet, dass keine Informationen aus fr\u00fcheren Anfragen gespeichert oder anderweitig verwaltet werden. Das bedeutet aber auch, dass bspw. ein bef\u00fcllter Warenkorb durch HTTP gar nicht unterst\u00fctzt w\u00fcrde (f\u00fchere \"K\u00e4ufe\" k\u00f6nnen durch das Protokoll nicht ber\u00fccksichtigt werden). Um dieses Zustandslosigkeit zu umgehen, werden z.B. Cookies oder Session-IDs verwendet, um eine Historie der Anfragen beim Webserver erstellen und den Nutzern zuordnen zu k\u00f6nnen. HTTPS funktioniert wie HTTP, nur dass die Verbindung zwischen Browser und Webserver mittels Transport Layer Security ( TLS ) verschl\u00fcsselt wird. Ein Programm, welches das HTTProtokoll implementiert hat, ist Curl . Wenn Sie Curl installiert haben und im Terminal bspw. curl -v http://freiheit.f4.htw-berlin.de/WT/index.html eingeben ( -v steht f\u00fcr den verbose -Modus), dann erhalten Sie * Trying 141 .45.146.146... * TCP_NODELAY set * Connected to freiheit.f4.htw-berlin.de ( 141 .45.146.146 ) port 80 ( #0) > GET /WT/index.html HTTP/1.1 > Host: freiheit.f4.htw-berlin.de > User-Agent: curl/7.64.1 > Accept: */* > < HTTP/1.1 301 Moved Permanently < Date: Fri, 08 Oct 2021 06 :35:13 GMT < Server: Apache/2.4.38 ( Debian ) < Location: https://freiheit.f4.htw-berlin.de/WT/index.html < Content-Length: 346 < Content-Type: text/html ; charset = iso-8859-1 < <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\" > <html><head> <title>301 Moved Permanently</title> </head><body> <h1>Moved Permanently</h1> <p>The document has moved <a href = \"https://freiheit.f4.htw-berlin.de/WT/index.html\" >here</a>.</p> <hr> <address>Apache/2.4.38 ( Debian ) Server at freiheit.f4.htw-berlin.de Port 80 </address> </body></html> * Connection #0 to host freiheit.f4.htw-berlin.de left intact * Closing connection 0 Sie erhalten also die Meldung vom Webserver, dass die Seite index.html nicht mehr unter dieser Adresse verf\u00fcgbar ist, sondern wegbewegt wurde ( Moved permanently ). Der Statuscode der Antwort ist 301 . Das ist anders, wenn die Anfrage an die Ressource https://freiheit.f4.htw-berlin.de/WT/index.html gestellt wird, also per Transport Layer Security (TLS) verschl\u00fcsselt wird: * Trying 141 .45.146.146... * TCP_NODELAY set * Connected to freiheit.f4.htw-berlin.de ( 141 .45.146.146 ) port 443 ( #0) * ALPN, offering h2 * ALPN, offering http/1.1 * successfully set certificate verify locations: * CAfile: /etc/ssl/cert.pem CApath: none * TLSv1.2 ( OUT ) , TLS handshake, Client hello ( 1 ) : * TLSv1.2 ( IN ) , TLS handshake, Server hello ( 2 ) : * TLSv1.2 ( IN ) , TLS handshake, Certificate ( 11 ) : * TLSv1.2 ( IN ) , TLS handshake, Server key exchange ( 12 ) : * TLSv1.2 ( IN ) , TLS handshake, Server finished ( 14 ) : * TLSv1.2 ( OUT ) , TLS handshake, Client key exchange ( 16 ) : * TLSv1.2 ( OUT ) , TLS change cipher, Change cipher spec ( 1 ) : * TLSv1.2 ( OUT ) , TLS handshake, Finished ( 20 ) : * TLSv1.2 ( IN ) , TLS change cipher, Change cipher spec ( 1 ) : * TLSv1.2 ( IN ) , TLS handshake, Finished ( 20 ) : * SSL connection using TLSv1.2 / ECDHE-RSA-AES256-GCM-SHA384 * ALPN, server accepted to use http/1.1 * Server certificate: * subject: CN = freiheit.f4.htw-berlin.de * start date: Aug 9 20 :15:57 2021 GMT * expire date: Nov 7 20 :15:55 2021 GMT * subjectAltName: host \"freiheit.f4.htw-berlin.de\" matched cert 's \"freiheit.f4.htw-berlin.de\" * issuer: C=US; O=Let' s Encrypt ; CN = R3 * SSL certificate verify ok. > GET /WT/index.html HTTP/1.1 > Host: freiheit.f4.htw-berlin.de > User-Agent: curl/7.64.1 > Accept: */* > < HTTP/1.1 200 OK < Date: Fri, 08 Oct 2021 06 :49:55 GMT < Server: Apache/2.4.38 ( Debian ) < Last-Modified: Wed, 17 Oct 2018 13 :09:16 GMT < ETag: \"f3-5786c60a5f2e6\" < Accept-Ranges: bytes < Content-Length: 243 < Vary: Accept-Encoding < Content-Type: text/html < <!DOCTYPE html> <html lang = \"de\" > <head> <meta charset = \"utf-8\" /> <meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" /> <title>Webtech</title> </head> <body> <p>Hallo FIW!</p> </body> </html> * Connection #0 to host freiheit.f4.htw-berlin.de left intact * Closing connection 0 Sie sehen darin, dass der Webserver freiheit.f4.htw-berlin.de unter der IP 141.45.146.146 l\u00e4uft, das die Verbindung \u00fcber TLSv1.2 hergestellt wird (Port 443 ) und dass f\u00fcr die GET -Anfrage das HTTProtokoll in der Version 1.1 verwendet wird. Als response wird die HTML-Seite index.html zur\u00fcckgesendet. Der Status-Code der Antwort ist nun 200 OK . F\u00fcr Curl siehe auch hier .","title":"Hypertext Transfer Protocol (HTTP)"},{"location":"einfuehrung/#uniform-resource-identifier-uri","text":"Uniform Resource Identifiers sind Zeichenfolgen, die Ressourcen eindeutig beschreiben und deren Zugriff darauf. Die bekannteste Unterart von URI sind Uniform Resource Locator (URL) . H\u00e4ufig werden URL und URI synonym verwendet, was nicht ganz korrekt ist. Generell beschreiben URI : Wie kann ich auf die Ressource zugreifen (Zugriffsmethode)? Um welche Ressource handelt es sich ( URI ) bzw. wo befindet sich die Ressource im Netzwerk ( URL )? Der generelle Aufbau einer URI ist wie folgt: scheme://authority/path?query#fragment scheme kann z.B. ftp , mailto , news , file oder http sein. authority beschreibt meistens einen Host , z.B. freiheit.f4.htw-berlin.de oder freiheit.f4.htw-berlin.de:443 oder 141.45.146.146 . path beschreibt den Pfad hin zur Ressource und die Ressource selbst, z.B. WT/index.html . query ist ein (oder mehrere) Schl\u00fcssel-Werte-Paare der Form key=value . Das erste Schl\u00fcssel-Werte-Paar steht nach einem ? , jedes weitere Schl\u00fcssel-Werte-Paar steht nach einem & , z.B. ?search=webtech&id=1234 . fragment steht f\u00fcr eine bestimmte Stelle innerhalb der Ressource (z.B. ein Anker im HTML-Dokument) Ganz wichtig ist, dass URI ( URL ) keine Leerzeichen enthalten d\u00fcrfen (auch keine Umlaute! und manche Sonderzeichen, wie z.B. ? und & eine Bedeutung haben). Daraus ergibt sich, dass solche Zeichen maskiert werden. Z.B. wird ein Leerzeichen als %20 maskiert.","title":"Uniform Resource Identifier (URI)"},{"location":"einfuehrung/#domain-name-system-dns","text":"Das Domain Name System (DNS) ist f\u00fcr die Aufl\u00f6sung von Namen nach IP-Adressen zust\u00e4ndig. Wenn wir bspw. in den Browser https://freiheit.f4.htw-berlin.de eingeben, dann wird eine GET -Anfrage an den Webserver mit dem Namen freiheit.f4.htw-berlin.de gestellt. Da die Kommunikation unter den Rechnern im Internet jedoch \u00fcber IP-Adressen erfolgt und nicht \u00fcber Namen, muss dieser Namen \"aufgel\u00f6st\" werden. Das \u00fcbernimmt das DNS. Es ermittelt f\u00fcr diesen Webserver die IP 141.45.146.146 . Das DNS funktioniert also wie eine Telefonauskunft, f\u00fcr einen konkreten Namen wird eine eindeutige IP ermittelt. Das DNS besteht aus sehr vielen Servern, die jeweils unabh\u00e4ngig voneinander (dezentral) arbeiten und die eine hierarchische Struktur des Namensraumes abbilden. F\u00fcr den Fall freiheit.f4.htw-berlin.de bedeutet das, dass zuerst die Server ( Root-Server ) angesprochen werden, die die Top-level-Domain de verwalten. Von diesen Servern wird man an die Server weitergelietet, die den Namensraum htw-berlin verwalten und so weiter bis die IP-Adresse vollst\u00e4ndig ermittelt und aufgel\u00f6st werden kann. Verfolgen l\u00e4sst sich diese Aufl\u00f6sung bspw. mithilfe des dig -Kommandos: dig +trace +additional -t A freiheit.f4.htw-berlin.de Dieses Kommande erzeugt z.B. folgende Ausgabe (gek\u00fcrzt): ; <<>> DiG 9 .10.6 <<>> +trace +additional -t A freiheit.f4.htw-berlin.de ;; global options: +cmd . 79476 IN NS d.root-servers.net. . 79476 IN NS f.root-servers.net. . 79476 IN NS c.root-servers.net. . 79476 IN NS k.root-servers.net. . 79476 IN NS i.root-servers.net. . 79476 IN NS g.root-servers.net. . 79476 IN NS h.root-servers.net. . 79476 IN NS j.root-servers.net. . 79476 IN NS b.root-servers.net. . 79476 IN NS a.root-servers.net. . 79476 IN NS e.root-servers.net. . 79476 IN NS l.root-servers.net. . 79476 IN NS m.root-servers.net. . 79476 IN RRSIG NS 8 0 518400 20211021050000 20211008040000 14748 . ;; Received 525 bytes from 192 .168.178.1#53 ( 192 .168.178.1 ) in 11 ms de. 172800 IN NS s.de.net. de. 172800 IN NS n.de.net. de. 172800 IN NS a.nic.de. de. 172800 IN NS f.nic.de. de. 172800 IN NS l.de.net. de. 172800 IN NS z.nic.de. de. 86400 IN DS 26755 8 2 F341357809A5954311CCB82ADE114C6C1D724A75C0395137AA397803 5425E78D de. 86400 IN RRSIG DS 8 1 86400 20211021050000 20211008040000 14748 . s.de.net. 172800 IN A 195 .243.137.26 s.de.net. 172800 IN AAAA 2003 :8:14::53 n.de.net. 172800 IN A 194 .146.107.6 n.de.net. 172800 IN AAAA 2001 :67c:1011:1::53 a.nic.de. 172800 IN A 194 .0.0.53 a.nic.de. 172800 IN AAAA 2001 :678:2::53 f.nic.de. 172800 IN A 81 .91.164.5 f.nic.de. 172800 IN AAAA 2a02:568:0:2::53 l.de.net. 172800 IN A 77 .67.63.105 l.de.net. 172800 IN AAAA 2001 :668:1f:11::105 z.nic.de. 172800 IN A 194 .246.96.1 z.nic.de. 172800 IN AAAA 2a02:568:fe02::de ;; Received 759 bytes from 198 .41.0.4#53 ( a.root-servers.net ) in 25 ms htw-berlin.de. 86400 IN NS dns-2.dfn.de. htw-berlin.de. 86400 IN NS infobloxv.htw-berlin.de. tjlb7qbojvmlf1s6gdriru7vsms1lg16.de. 7200 IN NSEC3 1 1 15 CA12B74ADB90591A TJLFG48H vkljn0takntiv7s3te6vlcveecv4kj34.de. 7200 IN NSEC3 1 1 15 CA12B74ADB90591A VKLN0C6F tjlb7qbojvmlf1s6gdriru7vsms1lg16.de. 7200 IN RRSIG NSEC3 8 2 7200 20211017040550 20211003023550 54729 de. vkljn0takntiv7s3te6vlcveecv4kj34.de. 7200 IN RRSIG NSEC3 8 2 7200 20211018032318 20211004015318 54729 de. infobloxv.htw-berlin.de. 86400 IN A 141 .45.65.100 ;; Received 628 bytes from 2003 :8:14::53#53 ( s.de.net ) in 17 ms freiheit.f4.htw-berlin.de. 28800 IN A 141 .45.146.146 ;; Received 70 bytes from 141 .45.65.100#53 ( infobloxv.htw-berlin.de ) in 35 ms Zuerst erfolgt die Abfrage \u00fcber die Root-Server und einige Weiterleitungsserver bis der Name vom DNS-Server der HTW infobloxv.htw-berlin.de (IP-Adresse 141.45.65.100 ) schlussendlich aufgel\u00f6st wird. Man sieht auch, dass die Anfragen an die DNS-Server \u00fcber den Port 53 gesendet werden.","title":"Domain Name System (DNS)"},{"location":"einfuehrung/#world-wide-web-www","text":"Die Grundidee von Webservern ist es, HTML-Dokumente zum Lesen zur Verf\u00fcgung zu stellen. HTML steht f\u00fcr Hypertext Markup Language . Dabei steht Hypertext f\u00fcr die Idee, in den Textdokumenten Hyperlinks auf andere Textdokumente (die auf dem gleichen oder anderen Webservern liegen) zu definieren. Ein Klick auf diese Hyperlinks liest die Dokumente vom Webserver und \u00f6ffnet sie im Browser. Stellt man alle diese Dokumente als Knoten dar und fasst man die Hyperlinks als eine Verbindung zwischen diesen Dokumenten (Knoten) auf, so entsteht das Bild eines Netzes ( Web ). Da es Webserver auf der ganzen Welt umspannt, wird vom World Wide Web gesprochen. Das WWW ist also ein \u00fcber das Internet aufrufbares Hypertext-System aus lauter Webseiten. Heute spricht man eher von Hypermedien als von Hypertexten. Es ist eines von vielen Diensten des Internets.","title":"World Wide Web (WWW)"},{"location":"einfuehrung/#tim-berners-lee","text":"Es ist beeindruckend, wie viele der Webtechnologien erstmalig von Tim Berners Lee umgesetzt wurden. Er entwickelte HTML HTTP URL den ersten Webbrowser ( WorldWideWeb ) und den ersten Webserver ( CERN httpd ) Keine dieser Entwicklungen wurden patentiert und konnten somit kostenfrei von allen genutzt werden, was der schnellen Verbreitung dieser Technologien diente. 1994 gr\u00fcndete er das World Wide Web Consortium (W3C), welches sich um die Standadisierung dieser und weiterer Webtechnologien k\u00fcmmert, siehe w3.org .","title":"Tim Berners Lee"},{"location":"html/","text":"HTML \u00b6 Einleitung \u00b6 HTML steht f\u00fcr H yper T ext M arkup L anguage. HTML ist eine sogenannte Auszeichnungssprache . Das bedeutet, dass Textelementen sogenannte Tags (HTML-Elemente) zugeordnet werden, um dem Text, der von einem solchen Tag umschlossen wird, eine Bedeutung zuzuweisen - der Text wird ausgezeichnet. Beispiel: < h1 > Gro\u00dfe \u00dcberschrift </ h1 > Im obigen Beispiel wurde der Text Gro\u00dfe \u00dcberschrift durch das HTML-Element h1 ausgezeichnet. Die Bedeutung dieses Elementes ist, dass es sich bei dem ausgezeichneten Text um eine \u00dcberschrift handelt. Es gibt 6 HTML-Elemente, die \u00dcberschriften charakterisieren: h1 , h2 , h3 , h4 , h5 , h6 . Die Nummern geben die Gr\u00f6\u00dfe der \u00dcberschrift an: h1 ist die gr\u00f6\u00dfte \u00dcberschrift, h6 die kleinste. Klicken Sie im folgenden Fenster auf den Reiter \"Result\" , um die Unterschiede zu sehen: Hierarchische Anordnung der HTML-Elemente \u00b6 HTML-Elemente bestehen - bis auf wenige Ausnahmen - aus einem Start-Tag <tag> und einem Ende-Tag </tag> (tag steht hier f\u00fcr den Namen eines beliebigen Elementes). Wird ein neues HTML-Element el2 innerhalb eines anderen HTML-Elementes el1 ge\u00f6ffnet, so muss el2 auch geschlossen werden, bevor el1 geschlossen wird. Success < el1 > diese Anordnung der < el2 > Elemente ist korrekt </ el2 > </ el1 > Failure < el1 > diese Anordnung der < el2 > Elemente ist falsch </ el1 > </ el2 > Es gibt nur wenige HTML-Elemente, die nicht aus einem Start- und einem Ende-Tag bestehen, sondern sogenannte stand alone Tags sind. Ein typisches Beispiel ist der Zeilenumbruch <br> . Um einerseits zu symbolisieren, dass es sich um Start- und Ende-Tag in einem handelt, insbesondere aber, um XHTML -konform zu sein, geben wir f\u00fcr solche stand-alone Tags den Slash vor der schlie\u00dfenden spitzen Klammer an, d.h. wir schreiben <br /> . Grundger\u00fcst einer HTML-Seite \u00b6 Prinzipiell besteht eine HTML-Seite aus einem <head> - und einem <body> -Bereich. Im <head> -Bereich k\u00f6nnen Metadaten \u00fcber die Seite definiert werden. Der <body> -Bereich definiert den sichtbaren Bereich der Seite, also das, was im Browser dargestellt wird. Eingeschlossen werden der <head> - und der <body> -Bereich von einem <html> -Element. <!DOCTYPE html> < html > < head > < title > Seitentitel </ title > </ head > < body > < h1 > Das ist eine gro\u00dfe \u00dcberschrift </ h1 > < p > Das ist ein Absatz. </ p > </ body > </ html > Das obige Beispiel zeigt ein Grundger\u00fcst einer HTML-Seite. <!DOCTYPE html> gibt dem Browser an, dass es sich um eine HTML-Datei handelt, die vom Browser \"gerendert\" , d.h. dargestellt wird. Der <head> -Bereich enth\u00e4lt in diesem Beispiel nur ein <title> -Element. Dieser Titel wird im Browser im Reiter (Tab) gezeigt. Au\u00dferdem wird der Titel in der Ergebnisliste einer Suchmaschine verwendet. Das <body> -Element, also der im Browser dargestellte Bereich, enth\u00e4lt eine \u00dcberschrift ( <h1> ) und einen Absatz ( <p> ). Aufgabe: Erstellen Sie eine Datei index.html und f\u00fcgen Sie obigen HTML-Code ein. Rufen Sie die Datei im Browser auf. Metadaten im Head \u00b6 Das <head> -Element ist der Container f\u00fcr (Meta-)Daten \u00fcber das Webdokument. Das <head> -Element kommt in das <html> -Element und vor das <body> -Element. Die Metadaten werden nicht dargestellt. Typische HTML-Elemente f\u00fcr Metadaten sind: <title> : Titel des Dokumentes (im Tab und in der Such-Ergebnisliste, <style> : f\u00fcr Format-Angaben (CSS), <meta> : f\u00fcr die Festlegung von Zeichenkodierungen, Schl\u00fcsselw\u00f6rter, Autor usw., <link> : zum Einbinden externer CSS-Dateien, <script> : zum Definieren von Client-seitigen JavaScript-Funktionen, <base> : zum Festlegen, der URL, von der aus alle Pfadangaben relativ sind. Beispiel Metadaten < head > < meta charset = \"UTF-8\" > < meta name = \"description\" content = \"meta data\" > < meta name = \"keywords\" content = \"HTML, head, title, meta, link, style\" > < meta name = \"author\" content = \"J\u00f6rn Freiheit\" > < meta http-equiv = \"refresh\" content = \"30\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"stylesheet\" href = \"mystyle.css\" > < style > body { background-color : #29e0e6 ;} h1 { color : #ff6a3b ;} ul { color : #0000ff ;} </ style > < script > function myFunction () { document . getElementById ( \"demo\" ). innerHTML = \"Hallo FIW!\" ; } </ script > < base href = \"localhost/Webtech20\" target = \"_blank\" > < title > Metadaten </ title > </ head > Block- und Inline-Elemente \u00b6 Generell wird zwischen zwei Arten von HTML-Elementen unterschieden: Blockelemente Inline-Elemente Blockelemente verwenden die gesamte Breite der Browseransicht (des sogenannten Viewports ). Das bedeutet, dass ein Blockelement stets in einer neuen Zeile beginnt und neben einem Blockelement kein weiteres Element ist (sondern in einer neuen Zeile beginnt). Inline-Elemente nehmen genau so viel Breite ein, wie n\u00f6tig (Breite des Inhalts) und beginnen nicht in einer neuen Zeile und enden auch nicht mit einem Zeilenumbruch. Beispiele f\u00fcr Inline- und Blockelemente (Reiter \"Result\" w\u00e4hlen, um Ergebnis zu sehen): Eine \u00dcbersicht \u00fcber alle HTML-Elemente mit Erl\u00e4uterungen findet sich hier . kleine \u00dcbungsaufgabe: Erweitern Sie Ihre Datei index.html und f\u00fcgen Sie mindestens folgende Elemente ein: 2 verschiedene \u00dcberschriften ( h1 , ..., h6 ) eine nummerierte Liste (ordered list - ol ) mit 3 Eintr\u00e4gen (list items - li ) eine Strichpunktliste (unordered list - ul ) mit 3 Eintr\u00e4gen ( li ) eine Tabelle ( table ); diese besteht aus einem Tabellenkopf (table head - thead ) und einem Tabellenk\u00f6rper (table body - tbody ) der thead enth\u00e4lt eine Zeile (table row - tr ) als Tabellen\u00fcberschrift, wobei jede einzelne \u00dcberschrift (eine Spalte) als th definiert wird der tbody enth\u00e4lt mehrere Zeilen ( tr ); jede Zeile enth\u00e4lt so viele Dateneintr\u00e4ge (table data - td ) wie es Spalten gibt einen Hyperlink (anchor - a ), der ein Verweis auf die HTW-Seite enth\u00e4lt ein Bild (image - img ) Rufen Sie die Datei im Browser auf. Einige ausgew\u00e4hlte Elemente \u00b6 Hyperlinks (Anchorelement) \u00b6 Das HTML-Element f\u00fcr Hyperlinks ist <a> . Ein Beispiel f\u00fcr die Anwendung dieses Elementes ist < a href = \"http://www.htw-berlin.de\" target = \"_blank\" > HTW Berlin </ a > Das Beispiel erstellt einen Hyperlink. Auf der Webseite sichtbar ist der Inhalt des Elementes, n\u00e4mlich HTW Berlin . Wird auf den Link geklickt, so \u00f6ffnet sich die Webseite der HTW ( www.htw-berlin.de ) in einem neuen Browser-Reiter ( target=\"_blank\" ). Weitere Beispiele: < a href = \"https://fiw.htw-berlin.de/fileadmin/HTW/Zentral/Rechtsstelle/Amtliche_Mitteilungsblaetter/2014/17_14.pdf\" > Studienordnung FIW </ a > < a href = \"mailto:freiheit@htw-berlin.de\" > E-Mail an J\u00f6rn Freiheit </ a > Das Anchorelement ist ein Inline-Element. Bilder (Image) \u00b6 Das HTML-Element f\u00fcr Bilder ist <img> . Ein Beispiel f\u00fcr die Anwendung dieses Elementes ist < img src = \"../Logos/fiw.jpg\" alt = \"FIW-Logo\" /> Das Beispiel zeigt das FIW-Logo auf der Webseite an. Es ist in der Datei fiw.jpg gespeichert, welche im Ordner Logos liegt. Der Ordner Logos befindet sich auf der gleichen Ordnerebene wie der Ordner, der die HTML-Datei enth\u00e4lt. Diesen Ordner muss man deshalb zun\u00e4chst mithilfe von .. verlassen. Das Attribut alt wird verwendet, um einen alternatioven Text anzugeben, der angezeigt wird, falls das Bild nicht geladen werden kann. Wichtig ist das alt -Attribut aber insbesondere f\u00fcr die Barrierefreiheit. Ein Screenreader liest diesen Alternativtext vor. Sollte es sich bei dem Bild nur um ein dekoratives Element handeln (also nicht wirklich einen sinnvollen Inhalt haben), sollte man aus Gr\u00fcnden der Barrierfreiheit daf\u00fcr alt=\"\" angeben, dann \u00fcberspringt der Screenreader dieses Bild. Es sei erw\u00e4hnt, dass es auch sowohl das height - als auch das width -Attribut f\u00fcr <img> gibt, um die H\u00f6he bzw. die Breite des Bildes zu setzen. Dies sollte aber besser CSS \u00fcberlassen werden. Beachten Sie auch, dass es sich bei dem <img> -Element um ein stand alone Element handelt. Wir beenden das Element deshalb mit /> , um XML-konform zu sein. Das <img> -Element ist ein Inline-Element. Tabellen \u00b6 Tabellen ( <table> ) bestehen aus einen Tabellenkopf ( <thead> ) und einem Tabellenk\u00f6rper ( <tbody> ). Der Tabellenkopf enth\u00e4lt eine Tabellenzeile ( <tr> ) mit beliebig vielen Eintr\u00e4gen, den jeweiligen Spalten\u00fcberschriften ( <th> ). Der Tabellenk\u00f6rper enth\u00e4lt beliebig viele Zeilen ( <tr> ), die in jeder Spalten Dateneintr\u00e4ge ( <td> ) enthalten. Ein Beispiel f\u00fcr eine Tabelle: < table > < thead > < tr > < th > Spalte 1 </ th > < th > Spalte 2 </ th > < th > Spalte 3 </ th > </ tr > </ thead > < tbody > < tr > < td > 1_1 </ td > < td > 1_2 </ td > < td > 1_3 </ td > </ tr > < tr > < td > 2_1 </ td > < td > 2_2 </ td > < td > 2_3 </ td > </ tr > < tr > < td > 3_1 </ td > < td > 3_2 </ td > < td > 3_3 </ td > </ tr > </ tbody > </ table > Das Formatieren der Tabellen (Rahmen, rechtsb\u00fcndig usw.) sollte stets CSS \u00fcberlassen werden. Listen \u00b6 Es gibt nummerierte Listen ( ordered list <ol> ) und nicht-nummerierte Listen ( unordered list <ul> ). Die Eintr\u00e4ge in einer Liste sind die list items <li> . Listen k\u00f6nnen auch ineinander verschachtelt werden. Dabei ist nur zu beachten, dass Listen immer nur list items enthalten sollen und die list items dann selbst wieder eine neue Liste enthalten k\u00f6nnen. ordered list unordered list verschachtelte Liste < ol > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ol > < ul > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ul > < ol > < li > < ol > < li > eins_eins </ li > < li > eins_zwei </ li > < li > eins_drei </ li > </ ol > </ li > < li > zwei </ li > < li > < ul > < li > drei_eins </ li > < li > drei_zwei </ li > < li > drei_drei </ li > </ ul > </ li > </ ol > Container-Elemente \u00b6 Einige Elemente dienen nur der besseren Strukturierung des HTML-Codes und der besseren \"Ansprechbarkeit\" im CSS (d.h. f\u00fcr diese Elemente k\u00f6nnen dann eigene CSS-Eigenschaften zugewisen werden). Vor HTML 5 wurde daf\u00fcr das Element <div> verwendet. Es existiert noch immer. Mit HTML 5 wurden aber weitere Container-Elemente hinzugef\u00fcgt: <main> - f\u00fcr den Hauptinhalt, sollte genau einmal im Dokument vorkommen <section> - f\u00fcr gr\u00f6\u00dfere Abschnitte (Teile); kann z.B. article enthalten <article> - f\u00fcr Abschnitte (z.B. Blog-Eintr\u00e4ge) in main <aside> - f\u00fcr z.B. News an der Seite <footer> - f\u00fcr die Fu\u00dfzeile (mit Impressum, Copyright, usw.) <header> - f\u00fcr die Kopfzeile (mit Logo, Navigation usw.) <nav> - f\u00fcr das Navigationsmen\u00fc Container-Elemente sind nicht \"sichtbar\", jedoch Block-Elemente. Es ist empfehlenswert, die eigene Webseite mit solchen Container-Elementen zu strukturieren, um erstens einen besseren \u00dcberblick \u00fcber die Seite zu bewahren und insbesondere gezielter die Formatierungseigenschaften von CSS verwenden zu k\u00f6nnen. Dies schlie\u00dft das Layout ein. Die folgende Abbildung zeigt, wof\u00fcr solche Container-Elemente gedacht sind. Die Elemente ordnen sich aber z.B. nicht von alleine nebeneinander an. Daf\u00fcr verwenden wir sp\u00e4ter CSS. Mithilfe von Container strukturieren wir jedoch den HTML-Code (vergleichbar mit JPanel in Java). Beispiel (aus W3School ): <!DOCTYPE html> < html lang = \"en\" > < head > < title > CSS Template </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > </ head > < body > < h2 > CSS Layout Float </ h2 > < p > In this example, we have created a header, two columns/boxes and a footer. On smaller screens, the columns will stack on top of each other. </ p > < p > Resize the browser window to see the responsive effect (you will learn more about this in our next chapter - HTML Responsive.) </ p > < header > < h2 > Cities </ h2 > </ header > < section > < nav > < ul > < li >< a href = \"#\" > London </ a ></ li > < li >< a href = \"#\" > Paris </ a ></ li > < li >< a href = \"#\" > Tokyo </ a ></ li > </ ul > </ nav > < article > < h1 > London </ h1 > < p > London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants. </ p > < p > Standing on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium. </ p > </ article > </ section > < footer > < p > Footer </ p > </ footer > </ body > </ html > In dem Beispiel dienen die Container nur der Strukturierung. Alles, was in den Header geh\u00f6rt, ist im <header> -Element (nicht zu verwechseln mit <head> !) und alles, was zum Footer geh\u00f6rt, kommt in das <footer> -Element. Der Hauptteil ist im <section> -Element, welches noch in <nav> und <article> unterteilt ist. Eingabe- bzw. Steuerelemente \u00b6 Es gibt viele Steuerelemente in HTML und die Auswahl wird kontinuierlich gr\u00f6\u00dfer. Steuerelemente werden mit dem HTML-Element <input> definiert. Der Typ des Steuerelementes wird mit Attribut type definiert. Beispiele: < input type = \"button\" value = \"Click\" /> < input type = \"reset\" /> < input type = \"submit\" /> < input type = \"checkbox\" /> < input type = \"color\" /> < input type = \"date\" /> < input type = \"file\" /> < input type = \"number\" /> < input type = \"radio\" /> < input type = \"image\" src = \"../Logos/fiw.jpg\" width = \"40\" alt = \"FIW-Logo\" /> < input type = \"range\" min = \"10\" max = \"100\" /> < input type = \"text\" placeholder = \"Name\" /> < input type = \"email\" placeholder = \"E-Mail\" /> < input type = \"password\" /> Probieren Sie am besten diese Beispiele aus und schauen Sie sich die Darstellung an. Beachten Sie auch, dass die Elemente in den unterschiedlichen Browsern unterschiedlich dargestellt werden. Attribute \u00b6 Wir haben in den obigen Beispielen bereits Attribute gesehen. In <a> wurden z.B. die Attribute href und target verwendet und in <img> die Attribute src und alt . Attribute werden innerhalb der spitzen Klammern des Begin-Tags angegeben und haben die Form: attribut = \"wert\" Das hei\u00dft, auf der linken Seite steht das Attribut und auf der rechten Seite der Wert des Attributs in doppelten Hochkommata. Es gibt Attribute, die ohne Wert verwendet werden k\u00f6nnen, z.B. checked f\u00fcr ein Eingabeelement <input> , z.B. < input type = \"checkbox\" name = \"SG\" value = \"FIW\" checked /> FIW < br > Um XML-konform zu sein, sollte man eigentlich besser <input type=\"checkbox\" name=\"SG\" value=\"FIW\" checked=\"checked\" /> verwenden, macht aber niemand. Das Attribut checked ist ein Beispiel f\u00fcr ein Attribut, das speziell f\u00fcr ein HTML-Element zur Verf\u00fcgung steht (hier f\u00fcr <input> ). Die meisten Attribute existieren speziell f\u00fcr HTML-Elemente. Dar\u00fcber hinaus gibt es noch sogenannte globale Attribute, die f\u00fcr alle HTML-Elemente verwendet werden k\u00f6nnen. Beispiele solcher Attribute sind globales Attribut Erl\u00e4uterung id weist dem Element eine id zu; eine id sollte innerhalb eines HTML-Dokumentes eindeutig sein class weist dem Element eine oder mehrere Klassen zu, deren Eigenschaften in CSS definiert werden k\u00f6nnen hidden setzt das Element auf unsichtbar, es wird nicht angezeigt title weist einem Element textuelle Informationen zu, die bei l\u00e4ngerem Mouseover angezeigt werden (tooltip) Besondere Zeichen \u00b6 F\u00fcr einige Sonderzeichen gibt es vordefinierte Entit\u00e4ten. Die folgende Tabelle zeigt ein paar Sonderzeichen. Sie k\u00f6nnen Sie beispielsweise per <span>&euro;</span> ergibt \u20ac aufrufen. Es beginnt also immer mit einem & und endet mit einem ; . Entit\u00e4t Zeichen &euro; \u20ac &amp; & &lt; < &gt; > &quot; \" &forall; \u2200 &exist; \u2203 &empty; \u2205 &isin; \u2208 &notin; \u2209 &ni; \u220b &prod; \u220f &sum; \u2211 &copy; \u00a9 &reg; \u00ae &trade; \u2122 &larr; \u2190 &uarr; \u2191 &rarr; \u2192 &darr; \u2193 &harr; \u2194 &crarr; \u21b5 &spades; \u2660 &clubs; \u2663 &hearts; \u2665 &diams; \u2666 \u00dcbung Erstellen Sie die obige Tabelle in HTML (die ersten paar Zeilen gen\u00fcgen). Die Herausforderung besteht darin, einerseits den Code darzustellen und andererseits das Zeichen. In der UTF-8-Tabelle sind nicht nur Sonderzeichen enthalten, sondern auch Emojis. Diese werden \u00fcber den Hexadezimalcode eingebunden, z.B. &#x1F600; ergibt \ud83d\ude00. Das Vorgehen ist das Folgende: Sie schauen z.B. hier nach und suchen sich das passende Emoji in der Spalte Browser . Von dem links daneben stehenden Unicode (z.B. U+1F600 ) ben\u00f6tigen Sie nur den Hexadezimalwert ( 1F600 ). Diesen f\u00fcgen Sie nach &#x ein und h\u00e4ngen ein ; an. Also bspw. &#x1F44D; ergibt \ud83d\udc4d. Relative Pfade \u00b6 Wenn Sie z.B. Bilder in den HTML-Code einbinden oder Hyperlinks auf andere HTML-Dokumente angeben, dann m\u00fcssen Sie angeben, wo diese jeweilige Ressource verf\u00fcgbar ist. Beispiel: < img src = \"fiw.jpg\" alt = \"FIW-Logo\" /> < a href = \"index.html\" > Home </ a > Beachten Sie, dass sowohl in dem src -Attribut als auch in dem href -Attribut Pfade zur Ressource angegeben werden. Das hei\u00dft, dass z.B. fiw.jpg entspricht ./fiw.jpg bzw. index.html entspricht ./index.html . Das wiederum bedeutet, dass beide Ressourcen in demselben Ordner leigen m\u00fcssen, in dem auch das aufrufende Dokument liegt. Das ist nat\u00fcrlich nur (sehr) selten der Fall. Angenommen, wir haben eine Verzeichnisstruktur wie in der folgenden Abbildung gezeigt: Angenommen, wir wollen aus der index.html heraus auf die uebung1.html verlinken, dann ist der Pfad Uebung1/uebung1.html , denn der Ordner Uebung1 befindet sich direkt neben der index.html . Angenommen, wir wollen aus der uebung1.html heraus auf die uebung2.html verlinken, dann ist der Pfad ../Uebung2/uebung2.html , denn der Ordner Uebung2 befindet sich direkt neben dem Ordner Uebung1 (aus dem wir zun\u00e4chst heraus m\u00fcssen) und darin die uebung2.html . Angenommen, wir wollen in der uebung3.html das Bild fiw.jpg einbinden, dann ist der Pfad ../Uebung1/images/fiw.jpg , denn der Ordner Uebung1 befindet sich direkt neben dem Ordner Uebung3 (aus dem wir zun\u00e4chst heraus m\u00fcssen) und darin der Ordner images und darin das fiw.jpg . Geben Sie innerhalb Ihrer Webanwendung alle Pfade stets relativ und nie absolut an! Solche Pfade, wie z.B. C:\\Documents\\xampp\\htdocs\\WT\\Uebung1\\uebung1.html d\u00fcrfen keinesfalls verwendet werden, denn sobald Sie Ihre Anwendung auf einen anderen Server \u00fcberf\u00fchren, w\u00fcrden solche absoluten Pfade nicht mehr stimmen. Clean Code HTML \u00b6 Es ist noch nicht so lange her, da gab es zwei unterschiedliche Str\u00f6mungen in der Weiterentwicklung von HTML: einerseits sollte HTML als Standard weiterentwickelt werden und andererseits gab es Bestrebungen, HTML dichter an XML zu koppeln. So entstand zun\u00e4chst XHTML. Zum Gl\u00fcck wurden diese beiden Entwicklungen jedoch wieder zusammengef\u00fchrt. \u00dcbrig blieben Konventionen , die eingehalten werden sollten, damit HTML auch XHTML-konform ist. Wir wollen diese Konventionen unbedingt beachten: alle HTML-Dokumente beginnen mit <!DOCTYPE html> die Elemente <html> , <head> , <title> und <body> sind Pflicht, alle Elemente m\u00fcssen korrekt verschachtelt sein (also innere Elemente erst schlie\u00dfen bevor das \u00e4u\u00dfere Element geschlossen wird), alle Elemente m\u00fcssen geschlossen werden ( Stand-alone-Elemente sollten dann z.B. so geschrieben werden: <br/> ), alle Elementnamen sollen vollst\u00e4ndig kleingeschrieben werden, jedes Attribut sollte einen Wert haben und die Werte sollten in Anf\u00fchrungsstrichen stehen. \u00dcbung Was ist hier jeweils falsch? <b><i>Some text</b></i> <p>This is a paragraph <p>This is another paragraph A break: <br> A horizontal rule: <hr> An image: <img src=\"happy.gif\" alt=\"Happy face\"> <P>This is a paragraph</P> <input type=\"checkbox\" name=\"vehicle\" value=\"car\" checked /> <input type=\"text\" name=\"lastname\" disabled /> Sie k\u00f6nnen Ihre HTML-Seite validieren lassen. Dazu gibt es Online-Validatoren, z.B. hier . Weitere Informationen \u00fcber HTML \u00b6 Folien HTML um das untenstehende Beispiel auszuf\u00fchren, ben\u00f6tigen Sie die Datei fiw.jpg , die Sie in einem Logos -Ordner ablegen sollten, um wenig \u00c4nderungsaufwand bei der folgenden HTML-Datei zu haben alle Beispiele in einem <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > HTML Einf\u00fchrung </ title > </ head > < body > < h3 > Hyperlinks </ h3 > < a href = \"http://www.htw-berlin.de\" target = \"_blank\" > HTW Berlin </ a > < a href = \"https://fiw.htw-berlin.de/fileadmin/HTW/Zentral/Rechtsstelle/Amtliche_Mitteilungsblaetter/2014/17_14.pdf\" > Studienordnung FIW </ a > < a href = \"mailto:freiheit@htw-berlin.de\" > E-Mail an J\u00f6rn Freiheit </ a > < h3 > Bilder </ h3 > < img src = \"../Logos/fiw.jpg\" alt = \"FIW-Logo\" /> < h3 > Tabelle </ h3 > < table > < thead > < tr > < th > Spalte 1 </ th > < th > Spalte 2 </ th > < th > Spalte 3 </ th > </ tr > </ thead > < tbody > < tr > < td > 1_1 </ td > < td > 1_2 </ td > < td > 1_3 </ td > </ tr > < tr > < td > 2_1 </ td > < td > 2_2 </ td > < td > 2_3 </ td > </ tr > < tr > < td > 3_1 </ td > < td > 3_2 </ td > < td > 3_3 </ td > </ tr > </ tbody > </ table > < h3 > Listen </ h3 > < ol > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ol > < ul > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ul > < ol > < li > < ol > < li > eins_eins </ li > < li > eins_zwei </ li > < li > eins_drei </ li > </ ol > </ li > < li > zwei </ li > < li > < ul > < li > drei_eins </ li > < li > drei_zwei </ li > < li > drei_drei </ li > </ ul > </ li > </ ol > < h3 > Eingabeelemente </ h3 > < input type = \"checkbox\" name = \"SG\" value = \"AI\" /> AI < br > < input type = \"checkbox\" name = \"SG\" value = \"FIW\" checked /> FIW < br > < input type = \"button\" value = \"Click\" /> < input type = \"reset\" /> < input type = \"submit\" /> < input type = \"checkbox\" /> < input type = \"color\" /> < input type = \"date\" /> < input type = \"file\" /> < input type = \"number\" /> < input type = \"radio\" /> < input type = \"image\" src = \"../Logos/fiw.jpg\" width = \"40\" alt = \"FIW-Logo\" /> < input type = \"range\" min = \"10\" max = \"100\" /> < input type = \"text\" placeholder = \"Name\" /> < input type = \"email\" placeholder = \"E-Mail\" /> < input type = \"password\" /> </ body > </ html > HTTP (Vertiefung) \u00b6 HTTP steht f\u00fcr Hypertext Transfer Protocol. Es wurde von Tim Berners Lee zusammen mit HTML, dem ersten Webserver und dem ersten Browser Anfang der 1990er Jahre am CERN entwickelt. Die Idee von HTTP ist einfach: der Nutzer stellt unter Eingabe einer URL (die Adresse des Webservers) eine Anfrage ( request ) an den Webserver. Der Webserver antwortet darauf mit einer response . Diese enth\u00e4lt einige Metadaten und die angefragte Webseite (im HTML-Format), wenn die Anfrage ordnungsgem\u00e4\u00df beantwortet werden kann. HTTP-Anfragemethoden \u00b6 F\u00fcr die Anfrage des Browsers an den Webserver stellt HTTP verschiedene Anfragemethoden zur Verf\u00fcgung. Diese unterscheiden sich in ihrer Bedeutung dahingehend, was mit der angefragten Ressource (den Daten oder der Webseite) geschehen soll. Anfragemethode Erl\u00e4uterung GET ist die einfachste und meistverwendete Anfragemethode; dient dazu, eine Ressource (typischerweise eine HTML-Datei) vom Webserver anzufordern; z.B. `GET /index.html` fordert die `index.html` vom Webserver an. POST fordert ebenfalls eine Ressource vom Webserver an; der Unterschied zwischen GET und POST besteht beim Mitsenden von Daten, z.B. Suchanfragen oder Login-Daten. W\u00e4hrend beim GET die \u00fcbermittelten Daten in die URL geschrieben werden, werden diese bei einem POST in den HTTP-Header eingef\u00fcgt. Das hei\u00dft, dass beim `GET` die an den Webserver \u00fcbergebenen Daten sichtbar sind, beim POST nicht. F\u00fcr die \u00dcbertragung sensibler Daten sollte also POST verwendet werden. HEAD fragt nur den Response-Header ab, nicht die Daten selbst. So kann z.B. bei einem Download zun\u00e4chst die Gr\u00f6\u00dfe der Datei abgefragt werden, bevor man die Datei selbst (mit GET oder POST ) herunterl\u00e4dt. Neben diesen \"HTTP-Standardmethoden\" gibt es noch spezielle Anfragemethoden, die beim einfachen Surfen keine Rolle spielen, f\u00fcr uns in der Webprogrammierung jedoch von Bedeutung sind. Wir werden diese im Zusammenhang mit dem Programmierparadigma REST ( Representational State Transfer ) verwenden. Sie unterscheiden sich dahingehend, wie mit den angeforderten Ressourcen umgegangen wird, also ob sie unver\u00e4ndert bleiben, angelegt oder ge\u00e4ndert werden. Anfragemethode Erl\u00e4uterung GET l\u00e4sst die angefragte Ressource unver\u00e4ndert und ruft sie nur ab POST erstellt eine neue Ressource oder ver\u00e4ndert sie; wir werden POST zum Erstellen verwenden PUT sehr \u00e4hnlich zu POST , aber POST ist ein wenig genereller. Wird mit PUT eine neue Ressource angelegt, so wird der Name in der URL angegeben, w\u00e4hrend bei POST der Name durch den Server vergeben kann; wir werden PUT zum \u00c4ndern verwenden DELETE l\u00f6scht die angegebene Ressource vom Server Wichtig ist zu beachten, dass HTTP ein zustandsloses Protokoll ist. Das bedeutet, dass die Anfragen prinzipiell unabh\u00e4ngig voneinander sind und dass es keine Anfragehostorie gibt. Wird soetwas ben\u00f6tigt, wie z.B. beim Online-Einkauf, dann muss dies \u00fcber andere Mechanismen (z.B. Anmelden/Registrieren) realisiert werden. HTTP-Statusmeldungen \u00b6 HTTP sieht verschiedene Meldungen des Servers an den Client vor. Diese werden im Response-Header versendet. Hier ein paar Beispiele: HTTP Statusmeldung Erl\u00e4uterung 200 OK Request wurde vollst\u00e4ndig und erfolgreich bearbeitet 201 Created Request wurde bearbeitet und die neue Ressource wurde erstellt 301 Moved Permanently die angeforderte Ressource wurde an eine andere URL bewegt 400 Bad Request Der Request kann nicht bearbeitet werden, da er (syntaktische) Fehler enth\u00e4lt. 401 Unauthorized Request ist ok, aber der Zugriff auf die Ressource ist nicht autorisiert 404 Not Found die angegebene Ressource existiert nicht 500 Internal Server Error der Webserver ist down bzw. hat einen Fehler URLs \u00b6 URL steht f\u00fcr Uniform Resource Locator und ist eine Adresse, die auf eine Ressource auf einem Server zeigt sowie das Protokoll, mit dem auf diese Adresse zugegriffen wird. Der allgemeine Aufbau einer URL sieht so aus: <schema>:<ressourcen-adresse> <schema> k\u00f6nnen verschiedene Protokolle sein, z.B. http , https , ftp , mailto , news , file usw. F\u00fcr die Zugriffe auf Webservern wierden http bzw. https verwendet. Die <ressourcen-adresse> kann unterschiedlich komplex sein. Der allgemeine Fall f\u00fcr den Zugriff auf eine Ressource auf einem Webserver kann so aussehen: //user:password@www.example.org:80/index.html?key1=value1&key2=value2 Darin m\u00f6chte ein Nutzer user mit dem Passwort password auf den Server (host) www.example.org \u00fcber den Port 80 auf die Ressource index.html zugreifen (mit GET) und \u00fcbergibt dabei 2 Werte, n\u00e4mlich value1 f\u00fcr den Schl\u00fcssel (die Variable) key1 und value2 f\u00fcr den Schl\u00fcssel key2 . In den meisten F\u00e4llen wird weder user noch password angegeben, oft auch nicht der Port und viele Anfragen auch ohne angeh\u00e4ngte Schl\u00fcssel-Werte-Paare. Die URL darf bestimmte Zeichen nicht enthalten, z.B. Leerzeichen, Klammern usw. Diese werden maskiert , d.h. in sogenante Prozentdarstellung umgewandelt. Ein Leerzeichen wird in %20 umgewandelt, ein Punkt in %2E usw. Daraus ergeben sich manchmal etwas \"kryptische\" URLs (siehe z.B. https://www.w3schools.com/tags/ref_urlencode.ASP ). Domain Name Service (DNS) \u00b6 Prinzipiell sind die Rechner im Internet durch IP-Adressen adressiert. IPv4 -Adressen bestehen aus vier Zahlenbl\u00f6cken (jeweils im Bereich von 0 bis 255), die durch einen Punkt getrennt sind. IPv4 -Adressen werden in 32 Bit gespeichert. Es gibt somit theoretisch 2^32 = 4.294.967.296 verschiedene Adressen, d.h. gut 4 Mrd adressierbare Rechner im Internet. Da dies nicht ausreicht, wurde in Version 6 des IP-Protokolls eine neue Dressierbarkeit eingef\u00fchrt, in dem nun 128 Bit f\u00fcr die Speicherung einer Adresse zur Verf\u00fcgung stehen. Eine IPv6 -Adresse besteht aus acht Bl\u00f6cken, welche durch Doppelpunkte getrennt sind. Jeder Block besteht aus 4 Hexadezimalstellen. Damit man sich zum Surfen im World Wide Web nicht IP-Adressen merken muss, wurden Webservern Namen zugeordnet. Somit muss man nicht die IP-Adressen in das Adressfeld als URL eingeben, sondern kann sprechende Namen verwenden, wie z.B. htw-berlin.de . de ist dabei eine sogenannte Top-Level-Domain und htw-berlin eine Subdomain. Den DNS kann man sich wie ein Telefonbuch vorstellen, in dem f\u00fcr eine sprechende Adresse die zuegh\u00f6rige IP-Adresse steht. Die Anfrage wird dann per TCP/IP an die IP-Adresse geschickt. Abfrage nach dem Root-DNS-Server f\u00fcr die Domain htw-berlin.de : % dig htw-berlin.de @a.root-servers.net ; <<>> DiG 9 .10.6 <<>> htw-berlin.de @a.root-servers.net ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opco de: QUERY, status: NOERROR, id: 38694 ;; flags: qr rd ; QUERY: 1 , ANSWER: 0 , AUTHORITY: 6 , ADDITIONAL: 13 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0 , flags: ; udp: 4096 ;; QUESTION SECTION: ; htw-berlin.de. IN A ;; AUTHORITY SECTION: de. 172800 IN NS s.de.net. de. 172800 IN NS n.de.net. de. 172800 IN NS a.nic.de. de. 172800 IN NS f.nic.de. de. 172800 IN NS l.de.net. de. 172800 IN NS z.nic.de. ;; ADDITIONAL SECTION: s.de.net. 172800 IN A 195 .243.137.26 s.de.net. 172800 IN AAAA 2003 :8:14::53 n.de.net. 172800 IN A 194 .146.107.6 n.de.net. 172800 IN AAAA 2001 :67c:1011:1::53 a.nic.de. 172800 IN A 194 .0.0.53 a.nic.de. 172800 IN AAAA 2001 :678:2::53 f.nic.de. 172800 IN A 81 .91.164.5 f.nic.de. 172800 IN AAAA 2a02:568:0:2::53 l.de.net. 172800 IN A 77 .67.63.105 l.de.net. 172800 IN AAAA 2001 :668:1f:11::105 z.nic.de. 172800 IN A 194 .246.96.1 z.nic.de. 172800 IN AAAA 2a02:568:fe02::de ;; Query time: 140 msec ;; SERVER: 198 .41.0.4#53 ( 198 .41.0.4 ) ;; WHEN: Tue Sep 29 08 :44:58 CEST 2020 ;; MSG SIZE rcvd: 412 Die Domain htw-berlin.de wird von mehreren DNS verwaltet: s.de.net , n.de.net , a.nic.de , ... (siehe AUTHORITY SECTION). Beispielsweise leitet der Root-DNS-Server a.nic.de die Aufl\u00f6sung der Domain an die beiden DNS infobloxv.htw-berlin.de (IP-Adresse 141.45.65.100 ) und dns-2.dfn.de weiter: % dig htw-berlin.de @a.nic.de ; <<>> DiG 9 .10.6 <<>> htw-berlin.de @a.nic.de ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opco de: QUERY, status: NOERROR, id: 1455 ;; flags: qr rd ; QUERY: 1 , ANSWER: 0 , AUTHORITY: 2 , ADDITIONAL: 2 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0 , flags: ; udp: 4096 ;; QUESTION SECTION: ; htw-berlin.de. IN A ;; AUTHORITY SECTION: htw-berlin.de. 86400 IN NS infobloxv.htw-berlin.de. htw-berlin.de. 86400 IN NS dns-2.dfn.de. ;; ADDITIONAL SECTION: infobloxv.htw-berlin.de. 86400 IN A 141 .45.65.100 ;; Query time: 2 msec ;; SERVER: 194 .0.0.53#53 ( 194 .0.0.53 ) ;; WHEN: Tue Sep 29 08 :45:47 CEST 2020 ;; MSG SIZE rcvd: 106 Die aktuelle IP-Adresse des Servers htw-berlin.de ist 141.45.66.214 : % dig htw-berlin.de @dns-2.dfn.de ; <<>> DiG 9 .10.6 <<>> htw-berlin.de @dns-2.dfn.de ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opco de: QUERY, status: NOERROR, id: 21529 ;; flags: qr aa rd ; QUERY: 1 , ANSWER: 1 , AUTHORITY: 0 , ADDITIONAL: 1 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0 , flags: ; udp: 4096 ;; QUESTION SECTION: ; htw-berlin.de. IN A ;; ANSWER SECTION: htw-berlin.de. 28800 IN A 141 .45.66.214 ;; Query time: 11 msec ;; SERVER: 193 .174.75.54#53 ( 193 .174.75.54 ) ;; WHEN: Tue Sep 29 08 :46:53 CEST 2020 ;; MSG SIZE rcvd: 58 Die IP-Adresse der Domain (und die verantwortlichen DNS) h\u00e4tte man auch mit nslookup herausbekommen: % nslookup -q = any htw-berlin.de Server: 141 .45.2.100 Address: 141 .45.2.100#53 htw-berlin.de origin = infoblox1.htw-berlin.de mail addr = net-rz.htw-berlin.de serial = 2009121336 refresh = 10800 retry = 3600 expire = 2419200 minimum = 900 Name: htw-berlin.de Address: 141 .45.66.214 htw-berlin.de mail exchanger = 50 mail1.rz.htw-berlin.de. htw-berlin.de text = \"ZOOM_verify_stchLGrGQgO-9ACdBPKPRw\" htw-berlin.de text = \"v=spf1 ip4:141.45.10.64/26 ip4:141.45.70.64/26 ~all\" htw-berlin.de nameserver = dns-2.dfn.de. htw-berlin.de nameserver = infobloxv.htw-berlin.de.","title":"HTML"},{"location":"html/#html","text":"","title":"HTML"},{"location":"html/#einleitung","text":"HTML steht f\u00fcr H yper T ext M arkup L anguage. HTML ist eine sogenannte Auszeichnungssprache . Das bedeutet, dass Textelementen sogenannte Tags (HTML-Elemente) zugeordnet werden, um dem Text, der von einem solchen Tag umschlossen wird, eine Bedeutung zuzuweisen - der Text wird ausgezeichnet. Beispiel: < h1 > Gro\u00dfe \u00dcberschrift </ h1 > Im obigen Beispiel wurde der Text Gro\u00dfe \u00dcberschrift durch das HTML-Element h1 ausgezeichnet. Die Bedeutung dieses Elementes ist, dass es sich bei dem ausgezeichneten Text um eine \u00dcberschrift handelt. Es gibt 6 HTML-Elemente, die \u00dcberschriften charakterisieren: h1 , h2 , h3 , h4 , h5 , h6 . Die Nummern geben die Gr\u00f6\u00dfe der \u00dcberschrift an: h1 ist die gr\u00f6\u00dfte \u00dcberschrift, h6 die kleinste. Klicken Sie im folgenden Fenster auf den Reiter \"Result\" , um die Unterschiede zu sehen:","title":"Einleitung"},{"location":"html/#hierarchische-anordnung-der-html-elemente","text":"HTML-Elemente bestehen - bis auf wenige Ausnahmen - aus einem Start-Tag <tag> und einem Ende-Tag </tag> (tag steht hier f\u00fcr den Namen eines beliebigen Elementes). Wird ein neues HTML-Element el2 innerhalb eines anderen HTML-Elementes el1 ge\u00f6ffnet, so muss el2 auch geschlossen werden, bevor el1 geschlossen wird. Success < el1 > diese Anordnung der < el2 > Elemente ist korrekt </ el2 > </ el1 > Failure < el1 > diese Anordnung der < el2 > Elemente ist falsch </ el1 > </ el2 > Es gibt nur wenige HTML-Elemente, die nicht aus einem Start- und einem Ende-Tag bestehen, sondern sogenannte stand alone Tags sind. Ein typisches Beispiel ist der Zeilenumbruch <br> . Um einerseits zu symbolisieren, dass es sich um Start- und Ende-Tag in einem handelt, insbesondere aber, um XHTML -konform zu sein, geben wir f\u00fcr solche stand-alone Tags den Slash vor der schlie\u00dfenden spitzen Klammer an, d.h. wir schreiben <br /> .","title":"Hierarchische Anordnung der HTML-Elemente"},{"location":"html/#grundgerust-einer-html-seite","text":"Prinzipiell besteht eine HTML-Seite aus einem <head> - und einem <body> -Bereich. Im <head> -Bereich k\u00f6nnen Metadaten \u00fcber die Seite definiert werden. Der <body> -Bereich definiert den sichtbaren Bereich der Seite, also das, was im Browser dargestellt wird. Eingeschlossen werden der <head> - und der <body> -Bereich von einem <html> -Element. <!DOCTYPE html> < html > < head > < title > Seitentitel </ title > </ head > < body > < h1 > Das ist eine gro\u00dfe \u00dcberschrift </ h1 > < p > Das ist ein Absatz. </ p > </ body > </ html > Das obige Beispiel zeigt ein Grundger\u00fcst einer HTML-Seite. <!DOCTYPE html> gibt dem Browser an, dass es sich um eine HTML-Datei handelt, die vom Browser \"gerendert\" , d.h. dargestellt wird. Der <head> -Bereich enth\u00e4lt in diesem Beispiel nur ein <title> -Element. Dieser Titel wird im Browser im Reiter (Tab) gezeigt. Au\u00dferdem wird der Titel in der Ergebnisliste einer Suchmaschine verwendet. Das <body> -Element, also der im Browser dargestellte Bereich, enth\u00e4lt eine \u00dcberschrift ( <h1> ) und einen Absatz ( <p> ). Aufgabe: Erstellen Sie eine Datei index.html und f\u00fcgen Sie obigen HTML-Code ein. Rufen Sie die Datei im Browser auf.","title":"Grundger\u00fcst einer HTML-Seite"},{"location":"html/#metadaten-im-head","text":"Das <head> -Element ist der Container f\u00fcr (Meta-)Daten \u00fcber das Webdokument. Das <head> -Element kommt in das <html> -Element und vor das <body> -Element. Die Metadaten werden nicht dargestellt. Typische HTML-Elemente f\u00fcr Metadaten sind: <title> : Titel des Dokumentes (im Tab und in der Such-Ergebnisliste, <style> : f\u00fcr Format-Angaben (CSS), <meta> : f\u00fcr die Festlegung von Zeichenkodierungen, Schl\u00fcsselw\u00f6rter, Autor usw., <link> : zum Einbinden externer CSS-Dateien, <script> : zum Definieren von Client-seitigen JavaScript-Funktionen, <base> : zum Festlegen, der URL, von der aus alle Pfadangaben relativ sind. Beispiel Metadaten < head > < meta charset = \"UTF-8\" > < meta name = \"description\" content = \"meta data\" > < meta name = \"keywords\" content = \"HTML, head, title, meta, link, style\" > < meta name = \"author\" content = \"J\u00f6rn Freiheit\" > < meta http-equiv = \"refresh\" content = \"30\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link rel = \"stylesheet\" href = \"mystyle.css\" > < style > body { background-color : #29e0e6 ;} h1 { color : #ff6a3b ;} ul { color : #0000ff ;} </ style > < script > function myFunction () { document . getElementById ( \"demo\" ). innerHTML = \"Hallo FIW!\" ; } </ script > < base href = \"localhost/Webtech20\" target = \"_blank\" > < title > Metadaten </ title > </ head >","title":"Metadaten im Head"},{"location":"html/#block-und-inline-elemente","text":"Generell wird zwischen zwei Arten von HTML-Elementen unterschieden: Blockelemente Inline-Elemente Blockelemente verwenden die gesamte Breite der Browseransicht (des sogenannten Viewports ). Das bedeutet, dass ein Blockelement stets in einer neuen Zeile beginnt und neben einem Blockelement kein weiteres Element ist (sondern in einer neuen Zeile beginnt). Inline-Elemente nehmen genau so viel Breite ein, wie n\u00f6tig (Breite des Inhalts) und beginnen nicht in einer neuen Zeile und enden auch nicht mit einem Zeilenumbruch. Beispiele f\u00fcr Inline- und Blockelemente (Reiter \"Result\" w\u00e4hlen, um Ergebnis zu sehen): Eine \u00dcbersicht \u00fcber alle HTML-Elemente mit Erl\u00e4uterungen findet sich hier . kleine \u00dcbungsaufgabe: Erweitern Sie Ihre Datei index.html und f\u00fcgen Sie mindestens folgende Elemente ein: 2 verschiedene \u00dcberschriften ( h1 , ..., h6 ) eine nummerierte Liste (ordered list - ol ) mit 3 Eintr\u00e4gen (list items - li ) eine Strichpunktliste (unordered list - ul ) mit 3 Eintr\u00e4gen ( li ) eine Tabelle ( table ); diese besteht aus einem Tabellenkopf (table head - thead ) und einem Tabellenk\u00f6rper (table body - tbody ) der thead enth\u00e4lt eine Zeile (table row - tr ) als Tabellen\u00fcberschrift, wobei jede einzelne \u00dcberschrift (eine Spalte) als th definiert wird der tbody enth\u00e4lt mehrere Zeilen ( tr ); jede Zeile enth\u00e4lt so viele Dateneintr\u00e4ge (table data - td ) wie es Spalten gibt einen Hyperlink (anchor - a ), der ein Verweis auf die HTW-Seite enth\u00e4lt ein Bild (image - img ) Rufen Sie die Datei im Browser auf.","title":"Block- und Inline-Elemente"},{"location":"html/#einige-ausgewahlte-elemente","text":"","title":"Einige ausgew\u00e4hlte Elemente"},{"location":"html/#hyperlinks-anchorelement","text":"Das HTML-Element f\u00fcr Hyperlinks ist <a> . Ein Beispiel f\u00fcr die Anwendung dieses Elementes ist < a href = \"http://www.htw-berlin.de\" target = \"_blank\" > HTW Berlin </ a > Das Beispiel erstellt einen Hyperlink. Auf der Webseite sichtbar ist der Inhalt des Elementes, n\u00e4mlich HTW Berlin . Wird auf den Link geklickt, so \u00f6ffnet sich die Webseite der HTW ( www.htw-berlin.de ) in einem neuen Browser-Reiter ( target=\"_blank\" ). Weitere Beispiele: < a href = \"https://fiw.htw-berlin.de/fileadmin/HTW/Zentral/Rechtsstelle/Amtliche_Mitteilungsblaetter/2014/17_14.pdf\" > Studienordnung FIW </ a > < a href = \"mailto:freiheit@htw-berlin.de\" > E-Mail an J\u00f6rn Freiheit </ a > Das Anchorelement ist ein Inline-Element.","title":"Hyperlinks (Anchorelement)"},{"location":"html/#bilder-image","text":"Das HTML-Element f\u00fcr Bilder ist <img> . Ein Beispiel f\u00fcr die Anwendung dieses Elementes ist < img src = \"../Logos/fiw.jpg\" alt = \"FIW-Logo\" /> Das Beispiel zeigt das FIW-Logo auf der Webseite an. Es ist in der Datei fiw.jpg gespeichert, welche im Ordner Logos liegt. Der Ordner Logos befindet sich auf der gleichen Ordnerebene wie der Ordner, der die HTML-Datei enth\u00e4lt. Diesen Ordner muss man deshalb zun\u00e4chst mithilfe von .. verlassen. Das Attribut alt wird verwendet, um einen alternatioven Text anzugeben, der angezeigt wird, falls das Bild nicht geladen werden kann. Wichtig ist das alt -Attribut aber insbesondere f\u00fcr die Barrierefreiheit. Ein Screenreader liest diesen Alternativtext vor. Sollte es sich bei dem Bild nur um ein dekoratives Element handeln (also nicht wirklich einen sinnvollen Inhalt haben), sollte man aus Gr\u00fcnden der Barrierfreiheit daf\u00fcr alt=\"\" angeben, dann \u00fcberspringt der Screenreader dieses Bild. Es sei erw\u00e4hnt, dass es auch sowohl das height - als auch das width -Attribut f\u00fcr <img> gibt, um die H\u00f6he bzw. die Breite des Bildes zu setzen. Dies sollte aber besser CSS \u00fcberlassen werden. Beachten Sie auch, dass es sich bei dem <img> -Element um ein stand alone Element handelt. Wir beenden das Element deshalb mit /> , um XML-konform zu sein. Das <img> -Element ist ein Inline-Element.","title":"Bilder (Image)"},{"location":"html/#tabellen","text":"Tabellen ( <table> ) bestehen aus einen Tabellenkopf ( <thead> ) und einem Tabellenk\u00f6rper ( <tbody> ). Der Tabellenkopf enth\u00e4lt eine Tabellenzeile ( <tr> ) mit beliebig vielen Eintr\u00e4gen, den jeweiligen Spalten\u00fcberschriften ( <th> ). Der Tabellenk\u00f6rper enth\u00e4lt beliebig viele Zeilen ( <tr> ), die in jeder Spalten Dateneintr\u00e4ge ( <td> ) enthalten. Ein Beispiel f\u00fcr eine Tabelle: < table > < thead > < tr > < th > Spalte 1 </ th > < th > Spalte 2 </ th > < th > Spalte 3 </ th > </ tr > </ thead > < tbody > < tr > < td > 1_1 </ td > < td > 1_2 </ td > < td > 1_3 </ td > </ tr > < tr > < td > 2_1 </ td > < td > 2_2 </ td > < td > 2_3 </ td > </ tr > < tr > < td > 3_1 </ td > < td > 3_2 </ td > < td > 3_3 </ td > </ tr > </ tbody > </ table > Das Formatieren der Tabellen (Rahmen, rechtsb\u00fcndig usw.) sollte stets CSS \u00fcberlassen werden.","title":"Tabellen"},{"location":"html/#listen","text":"Es gibt nummerierte Listen ( ordered list <ol> ) und nicht-nummerierte Listen ( unordered list <ul> ). Die Eintr\u00e4ge in einer Liste sind die list items <li> . Listen k\u00f6nnen auch ineinander verschachtelt werden. Dabei ist nur zu beachten, dass Listen immer nur list items enthalten sollen und die list items dann selbst wieder eine neue Liste enthalten k\u00f6nnen. ordered list unordered list verschachtelte Liste < ol > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ol > < ul > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ul > < ol > < li > < ol > < li > eins_eins </ li > < li > eins_zwei </ li > < li > eins_drei </ li > </ ol > </ li > < li > zwei </ li > < li > < ul > < li > drei_eins </ li > < li > drei_zwei </ li > < li > drei_drei </ li > </ ul > </ li > </ ol >","title":"Listen"},{"location":"html/#container-elemente","text":"Einige Elemente dienen nur der besseren Strukturierung des HTML-Codes und der besseren \"Ansprechbarkeit\" im CSS (d.h. f\u00fcr diese Elemente k\u00f6nnen dann eigene CSS-Eigenschaften zugewisen werden). Vor HTML 5 wurde daf\u00fcr das Element <div> verwendet. Es existiert noch immer. Mit HTML 5 wurden aber weitere Container-Elemente hinzugef\u00fcgt: <main> - f\u00fcr den Hauptinhalt, sollte genau einmal im Dokument vorkommen <section> - f\u00fcr gr\u00f6\u00dfere Abschnitte (Teile); kann z.B. article enthalten <article> - f\u00fcr Abschnitte (z.B. Blog-Eintr\u00e4ge) in main <aside> - f\u00fcr z.B. News an der Seite <footer> - f\u00fcr die Fu\u00dfzeile (mit Impressum, Copyright, usw.) <header> - f\u00fcr die Kopfzeile (mit Logo, Navigation usw.) <nav> - f\u00fcr das Navigationsmen\u00fc Container-Elemente sind nicht \"sichtbar\", jedoch Block-Elemente. Es ist empfehlenswert, die eigene Webseite mit solchen Container-Elementen zu strukturieren, um erstens einen besseren \u00dcberblick \u00fcber die Seite zu bewahren und insbesondere gezielter die Formatierungseigenschaften von CSS verwenden zu k\u00f6nnen. Dies schlie\u00dft das Layout ein. Die folgende Abbildung zeigt, wof\u00fcr solche Container-Elemente gedacht sind. Die Elemente ordnen sich aber z.B. nicht von alleine nebeneinander an. Daf\u00fcr verwenden wir sp\u00e4ter CSS. Mithilfe von Container strukturieren wir jedoch den HTML-Code (vergleichbar mit JPanel in Java). Beispiel (aus W3School ): <!DOCTYPE html> < html lang = \"en\" > < head > < title > CSS Template </ title > < meta charset = \"utf-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > </ head > < body > < h2 > CSS Layout Float </ h2 > < p > In this example, we have created a header, two columns/boxes and a footer. On smaller screens, the columns will stack on top of each other. </ p > < p > Resize the browser window to see the responsive effect (you will learn more about this in our next chapter - HTML Responsive.) </ p > < header > < h2 > Cities </ h2 > </ header > < section > < nav > < ul > < li >< a href = \"#\" > London </ a ></ li > < li >< a href = \"#\" > Paris </ a ></ li > < li >< a href = \"#\" > Tokyo </ a ></ li > </ ul > </ nav > < article > < h1 > London </ h1 > < p > London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants. </ p > < p > Standing on the River Thames, London has been a major settlement for two millennia, its history going back to its founding by the Romans, who named it Londinium. </ p > </ article > </ section > < footer > < p > Footer </ p > </ footer > </ body > </ html > In dem Beispiel dienen die Container nur der Strukturierung. Alles, was in den Header geh\u00f6rt, ist im <header> -Element (nicht zu verwechseln mit <head> !) und alles, was zum Footer geh\u00f6rt, kommt in das <footer> -Element. Der Hauptteil ist im <section> -Element, welches noch in <nav> und <article> unterteilt ist.","title":"Container-Elemente"},{"location":"html/#eingabe-bzw-steuerelemente","text":"Es gibt viele Steuerelemente in HTML und die Auswahl wird kontinuierlich gr\u00f6\u00dfer. Steuerelemente werden mit dem HTML-Element <input> definiert. Der Typ des Steuerelementes wird mit Attribut type definiert. Beispiele: < input type = \"button\" value = \"Click\" /> < input type = \"reset\" /> < input type = \"submit\" /> < input type = \"checkbox\" /> < input type = \"color\" /> < input type = \"date\" /> < input type = \"file\" /> < input type = \"number\" /> < input type = \"radio\" /> < input type = \"image\" src = \"../Logos/fiw.jpg\" width = \"40\" alt = \"FIW-Logo\" /> < input type = \"range\" min = \"10\" max = \"100\" /> < input type = \"text\" placeholder = \"Name\" /> < input type = \"email\" placeholder = \"E-Mail\" /> < input type = \"password\" /> Probieren Sie am besten diese Beispiele aus und schauen Sie sich die Darstellung an. Beachten Sie auch, dass die Elemente in den unterschiedlichen Browsern unterschiedlich dargestellt werden.","title":"Eingabe- bzw. Steuerelemente"},{"location":"html/#attribute","text":"Wir haben in den obigen Beispielen bereits Attribute gesehen. In <a> wurden z.B. die Attribute href und target verwendet und in <img> die Attribute src und alt . Attribute werden innerhalb der spitzen Klammern des Begin-Tags angegeben und haben die Form: attribut = \"wert\" Das hei\u00dft, auf der linken Seite steht das Attribut und auf der rechten Seite der Wert des Attributs in doppelten Hochkommata. Es gibt Attribute, die ohne Wert verwendet werden k\u00f6nnen, z.B. checked f\u00fcr ein Eingabeelement <input> , z.B. < input type = \"checkbox\" name = \"SG\" value = \"FIW\" checked /> FIW < br > Um XML-konform zu sein, sollte man eigentlich besser <input type=\"checkbox\" name=\"SG\" value=\"FIW\" checked=\"checked\" /> verwenden, macht aber niemand. Das Attribut checked ist ein Beispiel f\u00fcr ein Attribut, das speziell f\u00fcr ein HTML-Element zur Verf\u00fcgung steht (hier f\u00fcr <input> ). Die meisten Attribute existieren speziell f\u00fcr HTML-Elemente. Dar\u00fcber hinaus gibt es noch sogenannte globale Attribute, die f\u00fcr alle HTML-Elemente verwendet werden k\u00f6nnen. Beispiele solcher Attribute sind globales Attribut Erl\u00e4uterung id weist dem Element eine id zu; eine id sollte innerhalb eines HTML-Dokumentes eindeutig sein class weist dem Element eine oder mehrere Klassen zu, deren Eigenschaften in CSS definiert werden k\u00f6nnen hidden setzt das Element auf unsichtbar, es wird nicht angezeigt title weist einem Element textuelle Informationen zu, die bei l\u00e4ngerem Mouseover angezeigt werden (tooltip)","title":"Attribute"},{"location":"html/#besondere-zeichen","text":"F\u00fcr einige Sonderzeichen gibt es vordefinierte Entit\u00e4ten. Die folgende Tabelle zeigt ein paar Sonderzeichen. Sie k\u00f6nnen Sie beispielsweise per <span>&euro;</span> ergibt \u20ac aufrufen. Es beginnt also immer mit einem & und endet mit einem ; . Entit\u00e4t Zeichen &euro; \u20ac &amp; & &lt; < &gt; > &quot; \" &forall; \u2200 &exist; \u2203 &empty; \u2205 &isin; \u2208 &notin; \u2209 &ni; \u220b &prod; \u220f &sum; \u2211 &copy; \u00a9 &reg; \u00ae &trade; \u2122 &larr; \u2190 &uarr; \u2191 &rarr; \u2192 &darr; \u2193 &harr; \u2194 &crarr; \u21b5 &spades; \u2660 &clubs; \u2663 &hearts; \u2665 &diams; \u2666 \u00dcbung Erstellen Sie die obige Tabelle in HTML (die ersten paar Zeilen gen\u00fcgen). Die Herausforderung besteht darin, einerseits den Code darzustellen und andererseits das Zeichen. In der UTF-8-Tabelle sind nicht nur Sonderzeichen enthalten, sondern auch Emojis. Diese werden \u00fcber den Hexadezimalcode eingebunden, z.B. &#x1F600; ergibt \ud83d\ude00. Das Vorgehen ist das Folgende: Sie schauen z.B. hier nach und suchen sich das passende Emoji in der Spalte Browser . Von dem links daneben stehenden Unicode (z.B. U+1F600 ) ben\u00f6tigen Sie nur den Hexadezimalwert ( 1F600 ). Diesen f\u00fcgen Sie nach &#x ein und h\u00e4ngen ein ; an. Also bspw. &#x1F44D; ergibt \ud83d\udc4d.","title":"Besondere Zeichen"},{"location":"html/#relative-pfade","text":"Wenn Sie z.B. Bilder in den HTML-Code einbinden oder Hyperlinks auf andere HTML-Dokumente angeben, dann m\u00fcssen Sie angeben, wo diese jeweilige Ressource verf\u00fcgbar ist. Beispiel: < img src = \"fiw.jpg\" alt = \"FIW-Logo\" /> < a href = \"index.html\" > Home </ a > Beachten Sie, dass sowohl in dem src -Attribut als auch in dem href -Attribut Pfade zur Ressource angegeben werden. Das hei\u00dft, dass z.B. fiw.jpg entspricht ./fiw.jpg bzw. index.html entspricht ./index.html . Das wiederum bedeutet, dass beide Ressourcen in demselben Ordner leigen m\u00fcssen, in dem auch das aufrufende Dokument liegt. Das ist nat\u00fcrlich nur (sehr) selten der Fall. Angenommen, wir haben eine Verzeichnisstruktur wie in der folgenden Abbildung gezeigt: Angenommen, wir wollen aus der index.html heraus auf die uebung1.html verlinken, dann ist der Pfad Uebung1/uebung1.html , denn der Ordner Uebung1 befindet sich direkt neben der index.html . Angenommen, wir wollen aus der uebung1.html heraus auf die uebung2.html verlinken, dann ist der Pfad ../Uebung2/uebung2.html , denn der Ordner Uebung2 befindet sich direkt neben dem Ordner Uebung1 (aus dem wir zun\u00e4chst heraus m\u00fcssen) und darin die uebung2.html . Angenommen, wir wollen in der uebung3.html das Bild fiw.jpg einbinden, dann ist der Pfad ../Uebung1/images/fiw.jpg , denn der Ordner Uebung1 befindet sich direkt neben dem Ordner Uebung3 (aus dem wir zun\u00e4chst heraus m\u00fcssen) und darin der Ordner images und darin das fiw.jpg . Geben Sie innerhalb Ihrer Webanwendung alle Pfade stets relativ und nie absolut an! Solche Pfade, wie z.B. C:\\Documents\\xampp\\htdocs\\WT\\Uebung1\\uebung1.html d\u00fcrfen keinesfalls verwendet werden, denn sobald Sie Ihre Anwendung auf einen anderen Server \u00fcberf\u00fchren, w\u00fcrden solche absoluten Pfade nicht mehr stimmen.","title":"Relative Pfade"},{"location":"html/#clean-code-html","text":"Es ist noch nicht so lange her, da gab es zwei unterschiedliche Str\u00f6mungen in der Weiterentwicklung von HTML: einerseits sollte HTML als Standard weiterentwickelt werden und andererseits gab es Bestrebungen, HTML dichter an XML zu koppeln. So entstand zun\u00e4chst XHTML. Zum Gl\u00fcck wurden diese beiden Entwicklungen jedoch wieder zusammengef\u00fchrt. \u00dcbrig blieben Konventionen , die eingehalten werden sollten, damit HTML auch XHTML-konform ist. Wir wollen diese Konventionen unbedingt beachten: alle HTML-Dokumente beginnen mit <!DOCTYPE html> die Elemente <html> , <head> , <title> und <body> sind Pflicht, alle Elemente m\u00fcssen korrekt verschachtelt sein (also innere Elemente erst schlie\u00dfen bevor das \u00e4u\u00dfere Element geschlossen wird), alle Elemente m\u00fcssen geschlossen werden ( Stand-alone-Elemente sollten dann z.B. so geschrieben werden: <br/> ), alle Elementnamen sollen vollst\u00e4ndig kleingeschrieben werden, jedes Attribut sollte einen Wert haben und die Werte sollten in Anf\u00fchrungsstrichen stehen. \u00dcbung Was ist hier jeweils falsch? <b><i>Some text</b></i> <p>This is a paragraph <p>This is another paragraph A break: <br> A horizontal rule: <hr> An image: <img src=\"happy.gif\" alt=\"Happy face\"> <P>This is a paragraph</P> <input type=\"checkbox\" name=\"vehicle\" value=\"car\" checked /> <input type=\"text\" name=\"lastname\" disabled /> Sie k\u00f6nnen Ihre HTML-Seite validieren lassen. Dazu gibt es Online-Validatoren, z.B. hier .","title":"Clean Code HTML"},{"location":"html/#weitere-informationen-uber-html","text":"Folien HTML um das untenstehende Beispiel auszuf\u00fchren, ben\u00f6tigen Sie die Datei fiw.jpg , die Sie in einem Logos -Ordner ablegen sollten, um wenig \u00c4nderungsaufwand bei der folgenden HTML-Datei zu haben alle Beispiele in einem <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > HTML Einf\u00fchrung </ title > </ head > < body > < h3 > Hyperlinks </ h3 > < a href = \"http://www.htw-berlin.de\" target = \"_blank\" > HTW Berlin </ a > < a href = \"https://fiw.htw-berlin.de/fileadmin/HTW/Zentral/Rechtsstelle/Amtliche_Mitteilungsblaetter/2014/17_14.pdf\" > Studienordnung FIW </ a > < a href = \"mailto:freiheit@htw-berlin.de\" > E-Mail an J\u00f6rn Freiheit </ a > < h3 > Bilder </ h3 > < img src = \"../Logos/fiw.jpg\" alt = \"FIW-Logo\" /> < h3 > Tabelle </ h3 > < table > < thead > < tr > < th > Spalte 1 </ th > < th > Spalte 2 </ th > < th > Spalte 3 </ th > </ tr > </ thead > < tbody > < tr > < td > 1_1 </ td > < td > 1_2 </ td > < td > 1_3 </ td > </ tr > < tr > < td > 2_1 </ td > < td > 2_2 </ td > < td > 2_3 </ td > </ tr > < tr > < td > 3_1 </ td > < td > 3_2 </ td > < td > 3_3 </ td > </ tr > </ tbody > </ table > < h3 > Listen </ h3 > < ol > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ol > < ul > < li > eins </ li > < li > zwei </ li > < li > drei </ li > </ ul > < ol > < li > < ol > < li > eins_eins </ li > < li > eins_zwei </ li > < li > eins_drei </ li > </ ol > </ li > < li > zwei </ li > < li > < ul > < li > drei_eins </ li > < li > drei_zwei </ li > < li > drei_drei </ li > </ ul > </ li > </ ol > < h3 > Eingabeelemente </ h3 > < input type = \"checkbox\" name = \"SG\" value = \"AI\" /> AI < br > < input type = \"checkbox\" name = \"SG\" value = \"FIW\" checked /> FIW < br > < input type = \"button\" value = \"Click\" /> < input type = \"reset\" /> < input type = \"submit\" /> < input type = \"checkbox\" /> < input type = \"color\" /> < input type = \"date\" /> < input type = \"file\" /> < input type = \"number\" /> < input type = \"radio\" /> < input type = \"image\" src = \"../Logos/fiw.jpg\" width = \"40\" alt = \"FIW-Logo\" /> < input type = \"range\" min = \"10\" max = \"100\" /> < input type = \"text\" placeholder = \"Name\" /> < input type = \"email\" placeholder = \"E-Mail\" /> < input type = \"password\" /> </ body > </ html >","title":"Weitere Informationen \u00fcber HTML"},{"location":"html/#http-vertiefung","text":"HTTP steht f\u00fcr Hypertext Transfer Protocol. Es wurde von Tim Berners Lee zusammen mit HTML, dem ersten Webserver und dem ersten Browser Anfang der 1990er Jahre am CERN entwickelt. Die Idee von HTTP ist einfach: der Nutzer stellt unter Eingabe einer URL (die Adresse des Webservers) eine Anfrage ( request ) an den Webserver. Der Webserver antwortet darauf mit einer response . Diese enth\u00e4lt einige Metadaten und die angefragte Webseite (im HTML-Format), wenn die Anfrage ordnungsgem\u00e4\u00df beantwortet werden kann.","title":"HTTP (Vertiefung)"},{"location":"html/#http-anfragemethoden","text":"F\u00fcr die Anfrage des Browsers an den Webserver stellt HTTP verschiedene Anfragemethoden zur Verf\u00fcgung. Diese unterscheiden sich in ihrer Bedeutung dahingehend, was mit der angefragten Ressource (den Daten oder der Webseite) geschehen soll. Anfragemethode Erl\u00e4uterung GET ist die einfachste und meistverwendete Anfragemethode; dient dazu, eine Ressource (typischerweise eine HTML-Datei) vom Webserver anzufordern; z.B. `GET /index.html` fordert die `index.html` vom Webserver an. POST fordert ebenfalls eine Ressource vom Webserver an; der Unterschied zwischen GET und POST besteht beim Mitsenden von Daten, z.B. Suchanfragen oder Login-Daten. W\u00e4hrend beim GET die \u00fcbermittelten Daten in die URL geschrieben werden, werden diese bei einem POST in den HTTP-Header eingef\u00fcgt. Das hei\u00dft, dass beim `GET` die an den Webserver \u00fcbergebenen Daten sichtbar sind, beim POST nicht. F\u00fcr die \u00dcbertragung sensibler Daten sollte also POST verwendet werden. HEAD fragt nur den Response-Header ab, nicht die Daten selbst. So kann z.B. bei einem Download zun\u00e4chst die Gr\u00f6\u00dfe der Datei abgefragt werden, bevor man die Datei selbst (mit GET oder POST ) herunterl\u00e4dt. Neben diesen \"HTTP-Standardmethoden\" gibt es noch spezielle Anfragemethoden, die beim einfachen Surfen keine Rolle spielen, f\u00fcr uns in der Webprogrammierung jedoch von Bedeutung sind. Wir werden diese im Zusammenhang mit dem Programmierparadigma REST ( Representational State Transfer ) verwenden. Sie unterscheiden sich dahingehend, wie mit den angeforderten Ressourcen umgegangen wird, also ob sie unver\u00e4ndert bleiben, angelegt oder ge\u00e4ndert werden. Anfragemethode Erl\u00e4uterung GET l\u00e4sst die angefragte Ressource unver\u00e4ndert und ruft sie nur ab POST erstellt eine neue Ressource oder ver\u00e4ndert sie; wir werden POST zum Erstellen verwenden PUT sehr \u00e4hnlich zu POST , aber POST ist ein wenig genereller. Wird mit PUT eine neue Ressource angelegt, so wird der Name in der URL angegeben, w\u00e4hrend bei POST der Name durch den Server vergeben kann; wir werden PUT zum \u00c4ndern verwenden DELETE l\u00f6scht die angegebene Ressource vom Server Wichtig ist zu beachten, dass HTTP ein zustandsloses Protokoll ist. Das bedeutet, dass die Anfragen prinzipiell unabh\u00e4ngig voneinander sind und dass es keine Anfragehostorie gibt. Wird soetwas ben\u00f6tigt, wie z.B. beim Online-Einkauf, dann muss dies \u00fcber andere Mechanismen (z.B. Anmelden/Registrieren) realisiert werden.","title":"HTTP-Anfragemethoden"},{"location":"html/#http-statusmeldungen","text":"HTTP sieht verschiedene Meldungen des Servers an den Client vor. Diese werden im Response-Header versendet. Hier ein paar Beispiele: HTTP Statusmeldung Erl\u00e4uterung 200 OK Request wurde vollst\u00e4ndig und erfolgreich bearbeitet 201 Created Request wurde bearbeitet und die neue Ressource wurde erstellt 301 Moved Permanently die angeforderte Ressource wurde an eine andere URL bewegt 400 Bad Request Der Request kann nicht bearbeitet werden, da er (syntaktische) Fehler enth\u00e4lt. 401 Unauthorized Request ist ok, aber der Zugriff auf die Ressource ist nicht autorisiert 404 Not Found die angegebene Ressource existiert nicht 500 Internal Server Error der Webserver ist down bzw. hat einen Fehler","title":"HTTP-Statusmeldungen"},{"location":"html/#urls","text":"URL steht f\u00fcr Uniform Resource Locator und ist eine Adresse, die auf eine Ressource auf einem Server zeigt sowie das Protokoll, mit dem auf diese Adresse zugegriffen wird. Der allgemeine Aufbau einer URL sieht so aus: <schema>:<ressourcen-adresse> <schema> k\u00f6nnen verschiedene Protokolle sein, z.B. http , https , ftp , mailto , news , file usw. F\u00fcr die Zugriffe auf Webservern wierden http bzw. https verwendet. Die <ressourcen-adresse> kann unterschiedlich komplex sein. Der allgemeine Fall f\u00fcr den Zugriff auf eine Ressource auf einem Webserver kann so aussehen: //user:password@www.example.org:80/index.html?key1=value1&key2=value2 Darin m\u00f6chte ein Nutzer user mit dem Passwort password auf den Server (host) www.example.org \u00fcber den Port 80 auf die Ressource index.html zugreifen (mit GET) und \u00fcbergibt dabei 2 Werte, n\u00e4mlich value1 f\u00fcr den Schl\u00fcssel (die Variable) key1 und value2 f\u00fcr den Schl\u00fcssel key2 . In den meisten F\u00e4llen wird weder user noch password angegeben, oft auch nicht der Port und viele Anfragen auch ohne angeh\u00e4ngte Schl\u00fcssel-Werte-Paare. Die URL darf bestimmte Zeichen nicht enthalten, z.B. Leerzeichen, Klammern usw. Diese werden maskiert , d.h. in sogenante Prozentdarstellung umgewandelt. Ein Leerzeichen wird in %20 umgewandelt, ein Punkt in %2E usw. Daraus ergeben sich manchmal etwas \"kryptische\" URLs (siehe z.B. https://www.w3schools.com/tags/ref_urlencode.ASP ).","title":"URLs"},{"location":"html/#domain-name-service-dns","text":"Prinzipiell sind die Rechner im Internet durch IP-Adressen adressiert. IPv4 -Adressen bestehen aus vier Zahlenbl\u00f6cken (jeweils im Bereich von 0 bis 255), die durch einen Punkt getrennt sind. IPv4 -Adressen werden in 32 Bit gespeichert. Es gibt somit theoretisch 2^32 = 4.294.967.296 verschiedene Adressen, d.h. gut 4 Mrd adressierbare Rechner im Internet. Da dies nicht ausreicht, wurde in Version 6 des IP-Protokolls eine neue Dressierbarkeit eingef\u00fchrt, in dem nun 128 Bit f\u00fcr die Speicherung einer Adresse zur Verf\u00fcgung stehen. Eine IPv6 -Adresse besteht aus acht Bl\u00f6cken, welche durch Doppelpunkte getrennt sind. Jeder Block besteht aus 4 Hexadezimalstellen. Damit man sich zum Surfen im World Wide Web nicht IP-Adressen merken muss, wurden Webservern Namen zugeordnet. Somit muss man nicht die IP-Adressen in das Adressfeld als URL eingeben, sondern kann sprechende Namen verwenden, wie z.B. htw-berlin.de . de ist dabei eine sogenannte Top-Level-Domain und htw-berlin eine Subdomain. Den DNS kann man sich wie ein Telefonbuch vorstellen, in dem f\u00fcr eine sprechende Adresse die zuegh\u00f6rige IP-Adresse steht. Die Anfrage wird dann per TCP/IP an die IP-Adresse geschickt. Abfrage nach dem Root-DNS-Server f\u00fcr die Domain htw-berlin.de : % dig htw-berlin.de @a.root-servers.net ; <<>> DiG 9 .10.6 <<>> htw-berlin.de @a.root-servers.net ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opco de: QUERY, status: NOERROR, id: 38694 ;; flags: qr rd ; QUERY: 1 , ANSWER: 0 , AUTHORITY: 6 , ADDITIONAL: 13 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0 , flags: ; udp: 4096 ;; QUESTION SECTION: ; htw-berlin.de. IN A ;; AUTHORITY SECTION: de. 172800 IN NS s.de.net. de. 172800 IN NS n.de.net. de. 172800 IN NS a.nic.de. de. 172800 IN NS f.nic.de. de. 172800 IN NS l.de.net. de. 172800 IN NS z.nic.de. ;; ADDITIONAL SECTION: s.de.net. 172800 IN A 195 .243.137.26 s.de.net. 172800 IN AAAA 2003 :8:14::53 n.de.net. 172800 IN A 194 .146.107.6 n.de.net. 172800 IN AAAA 2001 :67c:1011:1::53 a.nic.de. 172800 IN A 194 .0.0.53 a.nic.de. 172800 IN AAAA 2001 :678:2::53 f.nic.de. 172800 IN A 81 .91.164.5 f.nic.de. 172800 IN AAAA 2a02:568:0:2::53 l.de.net. 172800 IN A 77 .67.63.105 l.de.net. 172800 IN AAAA 2001 :668:1f:11::105 z.nic.de. 172800 IN A 194 .246.96.1 z.nic.de. 172800 IN AAAA 2a02:568:fe02::de ;; Query time: 140 msec ;; SERVER: 198 .41.0.4#53 ( 198 .41.0.4 ) ;; WHEN: Tue Sep 29 08 :44:58 CEST 2020 ;; MSG SIZE rcvd: 412 Die Domain htw-berlin.de wird von mehreren DNS verwaltet: s.de.net , n.de.net , a.nic.de , ... (siehe AUTHORITY SECTION). Beispielsweise leitet der Root-DNS-Server a.nic.de die Aufl\u00f6sung der Domain an die beiden DNS infobloxv.htw-berlin.de (IP-Adresse 141.45.65.100 ) und dns-2.dfn.de weiter: % dig htw-berlin.de @a.nic.de ; <<>> DiG 9 .10.6 <<>> htw-berlin.de @a.nic.de ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opco de: QUERY, status: NOERROR, id: 1455 ;; flags: qr rd ; QUERY: 1 , ANSWER: 0 , AUTHORITY: 2 , ADDITIONAL: 2 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0 , flags: ; udp: 4096 ;; QUESTION SECTION: ; htw-berlin.de. IN A ;; AUTHORITY SECTION: htw-berlin.de. 86400 IN NS infobloxv.htw-berlin.de. htw-berlin.de. 86400 IN NS dns-2.dfn.de. ;; ADDITIONAL SECTION: infobloxv.htw-berlin.de. 86400 IN A 141 .45.65.100 ;; Query time: 2 msec ;; SERVER: 194 .0.0.53#53 ( 194 .0.0.53 ) ;; WHEN: Tue Sep 29 08 :45:47 CEST 2020 ;; MSG SIZE rcvd: 106 Die aktuelle IP-Adresse des Servers htw-berlin.de ist 141.45.66.214 : % dig htw-berlin.de @dns-2.dfn.de ; <<>> DiG 9 .10.6 <<>> htw-berlin.de @dns-2.dfn.de ;; global options: +cmd ;; Got answer: ;; ->>HEADER <<- opco de: QUERY, status: NOERROR, id: 21529 ;; flags: qr aa rd ; QUERY: 1 , ANSWER: 1 , AUTHORITY: 0 , ADDITIONAL: 1 ;; WARNING: recursion requested but not available ;; OPT PSEUDOSECTION: ; EDNS: version: 0 , flags: ; udp: 4096 ;; QUESTION SECTION: ; htw-berlin.de. IN A ;; ANSWER SECTION: htw-berlin.de. 28800 IN A 141 .45.66.214 ;; Query time: 11 msec ;; SERVER: 193 .174.75.54#53 ( 193 .174.75.54 ) ;; WHEN: Tue Sep 29 08 :46:53 CEST 2020 ;; MSG SIZE rcvd: 58 Die IP-Adresse der Domain (und die verantwortlichen DNS) h\u00e4tte man auch mit nslookup herausbekommen: % nslookup -q = any htw-berlin.de Server: 141 .45.2.100 Address: 141 .45.2.100#53 htw-berlin.de origin = infoblox1.htw-berlin.de mail addr = net-rz.htw-berlin.de serial = 2009121336 refresh = 10800 retry = 3600 expire = 2419200 minimum = 900 Name: htw-berlin.de Address: 141 .45.66.214 htw-berlin.de mail exchanger = 50 mail1.rz.htw-berlin.de. htw-berlin.de text = \"ZOOM_verify_stchLGrGQgO-9ACdBPKPRw\" htw-berlin.de text = \"v=spf1 ip4:141.45.10.64/26 ip4:141.45.70.64/26 ~all\" htw-berlin.de nameserver = dns-2.dfn.de. htw-berlin.de nameserver = infobloxv.htw-berlin.de.","title":"Domain Name Service (DNS)"},{"location":"javascript/","text":"JavaScript \u00b6 JavaScript wurde 1995 von Brendan Eich entwickelt. Er arbeitete damals bei Netscape und entwickelte mit dem damals sogenannten LiveScript eine Skriptsprache f\u00fcr den damaligen Netscape-Browser. Ein damaliger Browser \"verstand\" HTML und CSS. HTML sah f\u00fcr Nutzerinteraktionen nur das Klicken auf Hyperlinks vor. Andere Nutzerinteraktionen waren nicht vorgesehen. Mithilfe von JavaScript wurde eine Schnittstelle geschaffen, um durch Nutzerinteraktionen den HTML-Code zu manipulieren, ohne dass ein weiteres Nachladen vom Webserver notwendig wurde. Mit der Einf\u00fchrung von JavaScript wurden die F\u00e4higkeiten von Browsern erweiteret, indem nun nicht mehr nur HTML und CSS interpretiert wurde, sondern auch JavaScript - alles Client-seitig, also durch den Browser selbst. JavaScript ist eine sogenannte Skriptsprache , d.h. der Quellcode wird nicht compiliert und dann der \u00fcbersetzte Byte- oder Maschinencode ausgef\u00fchrt, sondern der Quellcode wird durch einen Interpreter interpretiert. Allerdings wird f\u00fcr Optimierungen JavaScript - insbesondere serverseitig in Node.js - durch sogenannte Engines doch in Maschinencode \u00fcbersetzt, welcher ausgef\u00fchrt wird. Die bekannteste dieser Engines ist die Google-Engine V8 . Die Technologie der Compilierung wird als Just-in-time-Kompilierung (JIT) bezeichnet. JavaScript kennt (im Gegensatz zu TypeScript) keine Klassen. Das Objektmodell von JavaScript basiert auf Prototypen . Eigenschaften und Methoden k\u00f6nnen zur Laufzeit den Objekten hinzugef\u00fcgt werden. Neben diesem dynamischen Objektmodell ist auch die Typisierung in JavaScript dynamisch. Der Typ einer Variable h\u00e4ngt vom Wert ab. Mit dem Wert kann sich auch der Typ der Variable \u00e4ndern. Client-seitig haben HTML, CSS und JavaScript folgende Bedeutung (und wir sollten auch auf eine solche strikte Trennung achten): HTML f\u00fcr die Inhalte, CSS f\u00fcr das Layout, JavaScript f\u00fcr das interaktive Verhalten unserer Webseite. JavaScript in unseren Webseiten \u00b6 Zun\u00e4chst \u00fcberlegen wir uns, wie wir das auch schon f\u00fcr CSS getan hatten, wo wir den JavaScript-Code in unseren Webseiten einf\u00fcgen k\u00f6nnen. Prinzipiell wird JavaScript-Code in einem HTML-Dokument innerhalb eines <script></script> -Elementes eingef\u00fcgt. Im Gegensatz zu CSS (wo wir die Definitionen innerhalb des <style></style> -Elementes angegeben haben, welches immer im <head> positioniert wird), ist es egal, ob das <script> -Element im <head> oder <body> angelegt wird. Sie k\u00f6nnen innerhalb eines HTML-Dokumentes auch mehrere <script> -Elemente haben und Sie k\u00f6nnen dann auch sowohl im <head> als auch im <body> positioniert sein. Wie bei CSS, ist es auch f\u00fcr JavaScript \u00fcblich, den Code in externe (. js )-Dateien auszulagern und diese dann in das HTML-Dokument einzubinden. Dies geschieht aber nicht \u00fcber ein <link> -Element, sondern ebenfalls \u00fcber das <script> -Element. Das folgende Beispiel zeigt die Verwendung des <script> -Eelementes zum Einbinden von JavaScript: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > DOM </ title > < script > function myFunction1 () { document . getElementById ( \"demo1\" ). innerHTML = \"Hallo FIW!\" ; } </ script > </ head > < body > < script src = \"myScript.js\" ></ script > < h1 > \u00dcberschrift </ h1 > < button type = \"button\" onclick = \"myFunction1()\" > Klick mich </ button > < div id = \"demo1\" ></ div > < input id = \"input1\" type = \"text\" placeholder = \"Gibt etwas ein\" onkeyup = \"myFunction2()\" /> < div id = \"demo2\" ></ div > < script > function myFunction2 () { document . getElementById ( \"demo2\" ). innerHTML = document . getElementById ( \"input1\" ). value ; } </ script > </ body > </ html > Ein gutes Vorgehen ist es, JavaScript am Ende des <body> -Elementes einzubinden, damit die Seite zun\u00e4chst dargestellt wird und erst dann der JavaScript-Code geladen wird. Das laden des JavaScript-Codes w\u00fcrde ansonsten die Darstellung der Webseite verz\u00f6gern. Document Object Model (DOM) \u00b6 Wir betrachten JavaScript zun\u00e4chst nur aus client-seitiger Sicht, d.h. f\u00fcr die Verwendung im Browser. Der Browser stellt HTML dar, welches durch CSS in ein ansprechendes Layout gestzt wurde. Es stellt sich die Frage, inwieweit JavaScript \u00fcberhaupt noch eine Erweiterung dieses Konzeptes darstellen kann. Die Antwort liegt darin, dass ohne JavaScript eine Webseite im Browser v\u00f6llig statisch ist, d.h. es gibt nur eine M\u00f6glichkeit, neue Inhalte zu laden oder \u00fcberhaupt etwas an der Webseite zu \u00e4ndern und das ist, diese neuen Inhalte oder \u00c4nderungen von einem Webserver zu laden. Jede Nutzerinteraktion f\u00fchrt so immer zu einem Request-Response-Prozess mit einem Webserver. Das wird durch JavaScript ge\u00e4ndert. Auf Nutzerinteraktionen kann durch JavaScript lokal, d.h. auf dem Client bleibend, reagiert werden. Die Schnittstelle zwischen JavaScript und HTML/CSS ist das sogenannte Document Objekct Model (DOM) . Das DOM stellt ein Interface (eine Schnittstelle) dar, um HTML-Dokumente \"manipulieren\" zu k\u00f6nnen. Damit ist haupts\u00e4chlich gemeint, dass HTML-Elemente eines HTML-Dokumentes ge\u00e4ndert, hinzugef\u00fcgt und gel\u00f6scht werden k\u00f6nnen. Zum \u00c4ndern der HTML-Elemente z\u00e4hlen das \u00c4ndern des Inhalts der Elemente und das \u00c4ndern von Attributen und deren Werten. Die Idee ist, dass ein HTML-Dokument als ein Baum aufgefasst wird, dessen hierarchische Beziehungen durch das HTML-Dokument (und dessen hierarchischer Struktur) vorgegeben werden und in dem alle HTML-Elemente, alle Attribute und alle Inhalte als Objekte angesehen werden. Wir schauen uns dazu ein einfaches Beispiel an: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > DOM </ title > </ head > < body > < div class = \"container\" > < h1 > \u00dcberschrift </ h1 > < ul > < li > < a href = \"http://www.htw-berlin.de\" > HTW Berlin </ a > < a href = \"http://fiw.htw-berlin.de\" > FIW </ a > </ li > </ ul > </ div > </ body > </ html > Ein HTML-Dokument besteht aus HTML-Elementen, welche Attribute haben k\u00f6nnen und Inhalte. Im obigen Beispiel hat z.B. das <meta> -Element im <head> ein Attribut, n\u00e4mlich charset . Der Wert dieses Attributes ist ein Text, n\u00e4mlich UTF-8 . Der Inhalt eines <a> -Elementes ist auch ein Text. Im obigen Beispiel haben wir zwei <a> -Elemente. Das eine hat den Inhalt (Text) HTW Berlin und das andere FIW . Wir k\u00f6nnen somit zwischen drei Arten von \"Objekten\" in einem HTML-Dokument unterscheiden: Elemente Attribute Texte Wenn wir diese Artefakte tats\u00e4chlich als Objekte auffassen und au\u00dferdem die hierarchische Beziehung zwischen diesen Objekten ber\u00fccksichtigen, dann l\u00e4sst sich ein Baum aufspannen, der aus solchen Objekten besteht. F\u00fcr obiges Beispiel sieht der Baum dann so aus: Wir interpretieren die Objekte also als Knoten ( Node ) eines Baumes. Einen solchen Baum, der ein HTML-Dokument eindeutig repr\u00e4sentiert, nennen wir Document Object Model (DOM) (auch HTML-DOM ). Ein solcher DOM ist der Ausgangspunkt f\u00fcr die Manipulation des HTML-Dokumentes, denn JavaScript ist in der Lage, jeden beliebigen Knoten innerhalb dieses Baumes anzusprechen und bspw. zu \u00e4ndern oder zu l\u00f6schen. Au\u00dferdem kann auch jede beliebige Position eindeutig bestimmt werden, um z.B. ein Element hinzuzuf\u00fcgen. Wir schauen uns im Folgenden an, welche Funktionen JavaScript zur Verf\u00fcgung stehen, um Positionen in diesem Baum eindeutig zu lokalisieren. DOM-Funktionen (Lokalisation von Elementen) \u00b6 Ausgangspunkt (die Wurzel) eines jeden HTML-DOM ist document (siehe obige Abbildung). Von document aus k\u00f6nnen wir uns beliebig durch den Baum bewegen. Die wohl meist verwendete Funktion zur Lokalisation eines Elementes im DOM ist getElementById() . In unserem obigen Beispiel haben wir nur ein Element mit einer id (einem id -Attribut) und das ist <ul> . Wir k\u00f6nnten gezielt nach diesem Element fragen: document . getElementById ( 'ul1' ) und erhalten als R\u00fcckgabe das Element mit der id=\"ul1\" , also das <ul> -Element (welches wir z.B. in einer Variable speichern k\u00f6nnten). Weitere Funktionen zur Lokalisation von Elementen sind document . getElementsByTagName ( name ) document . getElementsByClassName ( name ) Beide Funktionen liefern uns jeweils ein Array von Elementen zur\u00fcck. Die Funktion document.getElementsByTagName(name) gibt ein Array von Elementen aus dem document zur\u00fcck, die den Tag name haben, also z.B. alle <p> -Elemente, wenn document.getElementsByTagName('p') aufgerufen wird. Die Funktion document.getElementsByClassName(name) gibt ein Array von Elementen aus dem document zur\u00fcck, die der Klasse name zugeordnet sind, also z.B. alle Elemente mit der Klasse form-group , wenn document.getElementsByClassName('form-group') aufgerufen wird. Mit diesen Funktionen kann man Elemente mitten im DOM lokalisieren. Daneben gibt es noch weitere Funktionen, die jeweils von einem solchen Element ausgehend \"benachbarte\" Knoten lokalisieren. Betrachten wir z.B. diesen Ausschnitt aus einem HTML-Code: < main id = \"main\" > < h3 id = \"headline\" > DOM </ h3 > < img id = \"ball1\" src = \"ball.png\" /> < img id = \"ball2\" src = \"ball.png\" /> < img id = \"ball3\" src = \"ball.png\" /> < img id = \"ball4\" src = \"ball.png\" /> </ main > Der dazugeh\u00f6rige DOM (vereinfacht) ist in der folgenden Abbildung dargestellt sowie die Funktionen, mit denen die umgebenden Elemente lokalisiert werden k\u00f6nnen: F\u00fcr die Funktionen getElementById() und getElementsByTagName() betrachten wir ein erstes einfaches Beispiel: In dem obigen JSFiddle k\u00f6nnen Sie die Wirkungsweise ausprobieren. Wir zeigen hier aber nochmal den vollst\u00e4ndigen Code, damit Sie ihn sich kopieren und wir ihn besser erl\u00e4utern k\u00f6nnen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > DOM </ title > < style > * { padding : 5 px ; margin : 5 px ; } </ style > </ head > < body > < h1 onmouseover = \"changeColor()\" > \u00dcberschrift </ h1 > < button type = \"button\" onclick = \"myFunction1()\" > Klick mich </ button > < div id = \"demo1\" ></ div > < input id = \"input1\" type = \"text\" placeholder = \"Gibt etwas ein\" onkeyup = \"myFunction2()\" /> < div id = \"demo2\" ></ div > < script > function myFunction1 () { document . getElementById ( \"demo1\" ). innerHTML = \"Hallo FIW!\" ; } function myFunction2 () { document . getElementById ( \"demo2\" ). innerHTML = document . getElementById ( \"input1\" ). value ; } function changeColor () { var h1arr = document . getElementsByTagName ( 'h1' ); h1arr [ 0 ]. style . color = \"red\" ; } </ script > </ body > </ html > Den <head> k\u00f6nnen wir ignorieren, auch das <style> -Element darin. Wichtig sind: wir haben 2 leere <div> -Elemente mit den Ids id=\"demo1\" und id=\"demo2\" (Zeilen 16 und 18 ) wir haben einen <button> mit dem Attribut onclick . Dieses Attribut bindet einen Ereignis-Listener an den Button. Wird das Click -Ereignis ausgel\u00f6st, wird die JavaScript-Funktion myFunction1() aufgerufen (Zeile 15 ) die JavaScript-Funktion myFunction1() ist im <script> -Element definiert (Zeilen 20-22 ). Diese Funktion lokalisiert das Element mit der id \"demo1\" und weist ihm einen neuen HTML-Inhalt zu, n\u00e4mlich \"Hallo FIW!\" wir haben au\u00dferdem ein einzeiliges Eingabefeld mit der Id id=\"input1\" (Zeile 17 ). Diesem Eingabefeld ist au\u00dferdem das Attribut onkeyup zugeordnet. Dieses Attribut meldet sich bei einem Ereignis an, das ausgel\u00f6st wird, wenn innerhalb des Eingabefeldes eine Taste wieder losgelassen wird - es wird dann das KeyUp -Ereignis ausgel\u00f6st. Durch das Ausl\u00f6sen dieses Ereignisses wird die JavaScript-Funktion myFunction2() aufgerufen. die JavaScript-Funktion myFunction2() ist im <script> -Element definiert (Zeilen 20-22 ). Diese Funktion lokalisiert das Element mit der id \"demo2\" und weist ihm einen neuen HTML-Inhalt zu, n\u00e4mlich den Wert ( value ), der in das Eingabefeld mit der id=\"input1\" eingegeben wurde (Zeilen 24-26 ) der \u00dcberschrift <h1> (Zeile 14 ) wurde das Attribut onmouseover zugeordnet. Damit wird das MouseOver -Ereignis abgefragt. Wird die Maus \u00fcber die \u00dcberschrift bewegt, wird dieses Ereignis ausgel\u00f6st und die Funktion changeColor() aufgerufen diese Funktion lokalisiert zun\u00e4chst alle Elemente mit dem Tag h1 und speichert sie in das Array h1arr (Zeile 29 ). Unsere \u00dcberschrift ist die erste (und einzige) \u00dcberschrift <h1> im Dokument. Wir greifen deshalb mit dem Index 0 auf dieses Element im h1arr -Array zu und \u00e4ndern die Schriftfarbe auf \"red\" (Zeile 30 ) Dieses erste Beispiel zeigt mehrere interssante Punkte: neben den Funktionen zur Lokalisation von Elemeneten gibt es auch Ereignisse, an die man sich anmelden und auf die reagiert werden kann und es gibt Funktionen, die den Inhalt und den Style von Elementen \u00e4ndern Wir schauen uns zun\u00e4chst Ereignisse an, auf die reagiert werden kann. HTML-Ereignisse \u00b6 HTML-Ereignisse \"passieren\" f\u00fcr HTML-Elemente in den allermeisten F\u00e4llen durch Nutzerinteraktionen (Maustaste dr\u00fccken, Fenster vergr\u00f6\u00dfern, Tatstatureingabe etc.). Mit JavaScript k\u00f6nnen wir auf diese Ereignisse reagieren. Eine einfache Form, ein HTML-Element an ein solches Ereignis anzumelden (so dass darauf reagiert werden kann), ist \u00fcber Attribute. Angenommen ein solches Ereignis hei\u00dft Event , dann hei\u00dft das Attribut onEvent (es kann auch alles klein geschrieben werden). Die generelle Syntax ist wie folgt: < element onEvent = \"JavaScript-Code\" /> Der JavaScript-Code muss nicht zwingend der Aufruf einer JavaScript-Funktion, sondern kann auch eine direkte JavaScript-Anweisung sein. Hier eine Liste der \u00fcblichsten HTML-Ereignisse. Die Bedeutung ist aus den Namen selbsterkl\u00e4rend, deshalb werden die meisten Ereignisse hier nicht weiter beschrieben: Mausereignisse (MouseEvent): mousedown , mouseup , click , dblclick , mousemove , mouseover , mousewheel , mouseout , contextmenu Tastaturereignisse (KeyboardEvent): keydown , keypress , keyup Formularereignisse: focus , blur , change , input , submit Fensterereignisse: scroll , resize , hashchange , load , unload Wir zeigen einige Beispiele: In diesem Beispiel werden die Ereignisse focus , blur und input behandelt. Um das blur -Ereignis auszul\u00f6sen, muss das <input> -Element den Focus verlieren. In diesem Beispiel wird das change -Ereignis behandelt. Der Inhalt des Absatzes <p> mit der id=\"radio\" wird bei jedem change -Event erweitert. Es wird also nicht innerHTML v\u00f6llig neu gesetzt, sondern mithilfe von += wird der entsprechende String angeh\u00e4ngt. Das soll insbesondere zeigen, dass das change -Ereignisses wirklich nur ausgel\u00f6st wird, wenn der Wert wechselt. Beachten Sie auch, dass getElementsByName() verwendet wird. Den Radiobuttons wurde jeweils name=\"colors\" zugewiesen. Sie bilden damit auch eine Radiobutton-Group (es kann immer nur ein Radiobutton daraus ausgew\u00e4hlt werden). In diesem Beispiel werden das mouseover - und das mouseout -Event behandelt. Beachten Sie auch die \u00dcbergabe von this an die JavaScript-Funktionen. Damit wird das <div> -Element \u00fcbergeben. Wir m\u00fcssen es innerhalb der Funktionen deshalb nicht mehr explizit mit getElementById() oder \u00e4hnliches holen. In diesem Beispiel wird JavaScript nicht als Funktion, sondern direkt in den Ereignis-Attributen aufgerufen. Noch ein einfaches Beispiel mit den Ereignissen mousedown , mouseup , mouseenter und mouseleave . Noch ein letztes Beispiel, das wir nicht in JSFiddle zeigen, da es daraum geht, die Gr\u00f6\u00dfe des Browsers zu \u00e4ndern (Ereignis resize - die JavaScript-Funktion hei\u00dft auch resize() , aber dieser Name ist frei gew\u00e4hlt): <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Arrays </ title > </ head > < body onresize = \"resize()\" > < h2 > Gr\u00f6\u00dfe des Browserfensters \u00e4ndern! </ h2 > < p id = \"demo\" ></ p > < script > function resize () { var w = window . outerWidth ; var h = window . outerHeight ; var txt = \"Fenstergr\u00f6\u00dfe: Breite=\" + w + \", H\u00f6he=\" + h ; document . getElementById ( \"demo\" ). innerHTML = txt ; } </ script > </ body > </ html > Wir haben uns nun einige Beispiele angesehen, wie wir HTML-Elemente \u00e4ndern k\u00f6nnen. Prinzipiell geht es mit den Eigenschaften: node.innerHTML = - Inhalt eines Elements \u00e4ndern node.attribute = - Attribut eines Elements \u00e4ndern node.style. property = - Style/Formatierung \u00e4ndern node.classList.add() - CSS-Klassen zum Element hinzuf\u00fcgen node.classList.remove() - CSS-Klassen vom Element entfernen Auslesen der Werte in Formularen \u00b6 Wir zeigen noch ein einfaches Beispiel, in dem das Auslesen von Werten in Formularen gezeigt wird. In Formularen ( <form> ) gibt es die Besonderheit, dass das Absenden eines Formulares ( submit ) ein Neuladen der Seite zur Folge hat. Das liegt daran, dass die Formularwerte an den Webserver gesendet werden und der Browser die aktuelle Adresse neu l\u00e4dt (teilweise mit den eingegeben Werten in der URL, manchmal wird auch nur ein ? an die URL angeh\u00e4ngt - das diskutieren wir sp\u00e4ter nochmal genauer). Dieses default -Verhalten wollen wir zun\u00e4chst verhindern. Wir zeigen im Folgenden, wie das geht. Angenommen, wir haben folgenden HTML-Code (unter Verwendung von Bootstrap): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link href = \"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\" rel = \"stylesheet\" integrity = \"sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi\" crossorigin = \"anonymous\" > < title > \u00dcbung 4 </ title > </ head > < body > < div class = \"container\" > < h1 > Teilnehmerin Registrierung </ h1 > < form class = \"row g-3\" > < div class = \"col-md-6\" > < input type = \"text\" class = \"form-control\" id = \"firstname\" placeholder = \"First name\" required > < div id = \"firstnameFeedback\" class = \"invalid-feedback\" > Bitte Vornamen eingeben! </ div > </ div > < div class = \"col-md-6\" > < input type = \"text\" class = \"form-control\" id = \"lastname\" placeholder = \"Last name\" required > < div id = \"lastnameFeedback\" class = \"invalid-feedback\" > Bitte Nachnamen eingeben! </ div > </ div > < div class = \"col-md-6\" > < input type = \"email\" class = \"form-control\" id = \"email\" placeholder = \"E-Mail\" required > < div id = \"emailFeedback\" class = \"invalid-feedback\" > Bitte E-Mail eingeben! </ div > </ div > < div class = \"col-md-6\" > < input type = \"text\" class = \"form-control\" id = \"ipaddress\" placeholder = \"IP-Address\" required > < div id = \"ipaddressFeedback\" class = \"invalid-feedback\" > Bitte IP-Adresse eingeben! </ div > </ div > < div class = \"col-3\" > < button class = \"btn btn-secondary\" type = \"reset\" onclick = \"reset()\" > Abbrechen </ button > </ div > < div class = \"col-3\" > < button class = \"btn btn-success\" onclick = \"register()\" type = \"submit\" > Registrieren </ button > </ div > </ form > </ div > </ body > </ html > Es entsteht folgende Ansicht: Wenn Sie die Breite des Viewports (Browsers) weiter verringern, erscheinen alle Eingabefelder untereinander ( md -Option der col -Klassen). Die register() -Funktion k\u00f6nnte nun wie folgt aussehen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < script > function register () { let fname = document . querySelector ( '#firstname' ). value ; let lname = document . querySelector ( '#lastname' ). value ; let email = document . querySelector ( '#email' ). value ; let ipadr = document . querySelector ( '#ipaddress' ). value ; console . log ( fname ); console . log ( lname ); console . log ( email ); console . log ( ipadr ); } < /script> Wir greifen also mithilfe von querySelector() auf die Input-Elemente zu (h\u00e4tten wir auch mit getElementById() machen k\u00f6nnen), um den jeweiligen value auszulesen. Wir geben diesen Wert hier zun\u00e4chst jeweils nur auf die Konsole aus. Diese Ausgaben sehen wir aber gar nicht, weil die Konsole durch das Neuladen der Seite wieder gel\u00f6scht wird. Dieses Neuladen ensteht durch das Standardverhalten beim Submit eines Formulars (siehe oben). Wir wollen zun\u00e4chst nochmal zeigen, dass durch das Click -Ereignis des Buttons auch das Submit -Ereignis des Formulars ausgel\u00f6st wird, da es sich bei dem Button Registrieren um einen submit -Button des Formulars handelt. Dazu f\u00fchren wir folgende \u00c4nderungen um HTML-Code durch: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link href = \"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\" rel = \"stylesheet\" integrity = \"sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi\" crossorigin = \"anonymous\" > < title > \u00dcbung 4 </ title > </ head > < body > < div class = \"container\" > < h1 > Teilnehmerin Registrierung </ h1 > < form class = \"row g-3\" onsubmit = \"alert('submit form')\" > < div class = \"col-md-6\" > < input type = \"text\" class = \"form-control\" id = \"firstname\" placeholder = \"First name\" required > < div id = \"firstnameFeedback\" class = \"invalid-feedback\" > Bitte Vornamen eingeben! </ div > </ div > < div class = \"col-md-6\" > < input type = \"text\" class = \"form-control\" id = \"lastname\" placeholder = \"Last name\" required > < div id = \"lastnameFeedback\" class = \"invalid-feedback\" > Bitte Nachnamen eingeben! </ div > </ div > < div class = \"col-md-6\" > < input type = \"email\" class = \"form-control\" id = \"email\" placeholder = \"E-Mail\" required > < div id = \"emailFeedback\" class = \"invalid-feedback\" > Bitte E-Mail eingeben! </ div > </ div > < div class = \"col-md-6\" > < input type = \"text\" class = \"form-control\" id = \"ipaddress\" placeholder = \"IP-Address\" required > < div id = \"ipaddressFeedback\" class = \"invalid-feedback\" > Bitte IP-Adresse eingeben! </ div > </ div > < div class = \"col-3\" > < button class = \"btn btn-secondary\" type = \"reset\" onclick = \"reset()\" > Abbrechen </ button > </ div > < div class = \"col-3\" > < button class = \"btn btn-success\" onclick = \"alert('click button')\" type = \"submit\" > Registrieren </ button > </ div > </ form > </ div > </ body > </ html > Wir reagieren also auf das Click -Ereignis mit einem alert() und ebenso auf das Submit -Ereignis des Formulars. Wenn wir nun den Registrieren -Button klicken, dann erscheint zun\u00e4chst die Nachricht click button und wenn wir dieses Nachrichtenfenster schlie\u00dfen auch gleich die Nachricht submit form . Es werden also beide Ereignisse ausgel\u00f6st, wovon das Submit -Ereignis das neuladen der Seite nach sich zieht. Wenn Sie nun f\u00fcr den Button wieder onclick=\"register()\" vereinbaren, dann sehen Sie, dass die Werte auf die Konsole ausgegeben werden und das alert -Fenster f\u00fcr das Formular erscheint. Nachdem Sie das Fenster schlie\u00dfen, wird die Seite neu geladen und die Konsole wird gel\u00f6scht. Wir verhindern dieses neuladen, indem wir f\u00fcr das Formular onsubmit=\"return false;\" definieren. Dann wird das Neuladen der Seite verhindert. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < script > function register () { let fname = document . querySelector ( '#firstname' ). value ; let lname = document . querySelector ( '#lastname' ). value ; let email = document . querySelector ( '#email' ). value ; let ipadr = document . querySelector ( '#ipaddress' ). value ; console . log ( fname ); console . log ( lname ); console . log ( email ); console . log ( ipadr ); } < /script> Eine andere M\u00f6glichkeit w\u00e4re gewesen, der register() -Funktion das ausl\u00f6sende Event als Objekt zu \u00fcbergeben (wird dann automatisch \u00fcbergeben) und f\u00fcr dieses Event die preventDefault() -Funktion aufzurufen: 46 < button class = \"btn btn-success\" type = \"submit\" onclick = \"register(event)\" > Registrieren </ button > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 function register ( event ) { let fname = document . querySelector ( '#firstname' ). value ; let lname = document . querySelector ( '#lastname' ). value ; let email = document . querySelector ( '#email' ). value ; let ipadr = document . querySelector ( '#ipaddress' ). value ; console . log ( fname ); console . log ( lname ); console . log ( email ); console . log ( ipadr ); event . preventDefault (); } Zur Funktion preventDefault() siehe hier . Elemente hinzuf\u00fcgen und l\u00f6schen \u00b6 Nun wollen wir den DOM insofern manipulieren, als dass wir zun\u00e4chst Objekte hinzuf\u00fcgen. Die wichtigsten Funktionen daf\u00fcr sind: document.createElement('tag') - Element erzeugen document.createTextNode(\"text\") - Textelement erzeugen node.appendChild(childNode) - Element childNode dem Knoten node als direktes (letztes) Kind hinzuf\u00fcgen node.removeChild(childNode) - Kind childNode des Elementes node l\u00f6schen node.replaceChild(newNode, oldNode) - Kind oldNode des Knotens node durch newNode ersetzen node.insertBefore(newNode, oldNode) - Kind newNode des Knotens node vor das Kind oldNode des Knotens node einf\u00fcgen Create \u00b6 Wir betrachten wieder ein einfaches Beispiel: Im HTML-Code sehen wir ein <input> -Element und eine Liste <ul> , die bereits 2 Listitems <li> enth\u00e4lt. Dem <input> -Element wurde ein change -Listener hinzugef\u00fcgt. Sobald sich der Wert in dem <input> -Element ge\u00e4ndert hat, wird dieses Ereignis ausgel\u00f6st und die Funktion addItem() aufgerufen. Dieser Funktion wird das <input> -Element als Parameter \u00fcbergeben. In dieser Funktion wird zuerst ein Textknoten erzeugt ( let textNode = document.createTextNode(text); ) Der text ist der Wert value des <input> -Elementes. Au\u00dferdem wird ein <li> -Knoten (Objekt) erzeugt ( let liNode = document.createElement('li'); ). An diesen <li> -Knoten wird der Textknoten angeh\u00e4ngt ( liNode.appendChild(textNode); ). Danach wird an die <ul> -Liste der <li> -Knoten (mit dem Textknoten) angeh\u00e4ngt ( ulNode.appendChild(liNode); ). Das neue List-item erscheint sofort als letztes Kind in der Liste. Im folgenden Beispiel passiert das gleiche, nur wird das neu erzeugte List-Item nicht hinten an die Liste angeh\u00e4ngt, sondern vorne eingef\u00fcgt: Tats\u00e4chlich \u00e4ndert sich daf\u00fcr nur die letzte Anweisung in der Funktion. Aus ulNode.appendChild(liNode); wird ulNode.insertBefore(liNode, ulNode.childNodes[0]); . Mit ulNode.childNodes[0] greifen wir auf das erste Kind des ulNode zu. Das h\u00e4tten wir auch durch ulNode.firstChild haben k\u00f6nnen. Clone \u00b6 Eine weitere M\u00f6glichkeit, ein Element zu erzeugen, ist durch clonen eines anderen Knotens (Elementes). Der Vorteil des Clonens besteht darin, dass ein gesamter Unterbaum eines Elementes mitkopiert werden kann. Die Syntax f\u00fcr das Clonen eines Knotens node ist nod.cloneNode(deep) . Wenn deep true ist, werden auch alle Kindelemente geklont, wenn false , dann nur das Element selbst. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Clone </ title > </ head > < body > < img src = \"./images/fiw.jpg\" ondblclick = \"cloneFunc(this)\" class = \"rounded mx-auto d-block\" style = \"width: 150px;\" alt = \"fiw\" /> < div id = \"div1\" ></ div > < script > function cloneFunc ( obj ) { let imgClone = obj . cloneNode ( true ); let divNode = obj . nextElementSibling ; console . log ( divNode ); // inspizieren Sie die Konsole in den DevTools divNode . appendChild ( imgClone ); } </ script > </ body > </ html > Im obigen Beispiel verwenden wir Bootstrap und f\u00fcr das <img> -Element einige Bootstrap-Klassen (haupts\u00e4chlich, damit es in der Mitte ist). Wenn wir auf das Bild Doppelklicken ( dblclick ), wird die Funktion cloneFunc() aufgerufen, der wir das img -Objekt \u00fcbergeben. In der Funktion clonen wir das Bild (hier ist es egal, ob deep clone oder nicht, da das img -Element keine Kindknoten hat). Der Clone wird dem div -Element als Kind hinzugef\u00fcgt. Durch jeden Doppelklick auf das Bild wird ein weiterer Clone dem <div> -Element hinzugef\u00fcgt. addEventListener \u00b6 Eigentlich ist die Verwendung der Attribute onEvent nicht optimal, da die Trennung zwischen HTML und JavaScript nicht gro\u00df genug ist. Wir erinnern uns, wir wollen eine Trennung in die Zust\u00e4ndigkeiten: HTML f\u00fcr den Inhalt, CSS f\u00fcr das Layout und JavaScript f\u00fcr das Verhalten. Besser ist es, die Event-Listener ebenfalls durch JavaScript hinzuzuf\u00fcgen und nicht durch HTML-Attribute. Wir erweitern unser obiges Clone-Beispiel zun\u00e4chst wie folgt (hinzugekommener Code hervorgehoben): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Clone </ title > </ head > < body > < img src = \"./images/fiw.jpg\" ondblclick = \"cloneFunc(this)\" class = \"rounded mx-auto d-block\" style = \"width: 150px;\" alt = \"fiw\" /> < div id = \"div1\" ></ div > < script > function cloneFunc ( obj ) { let imgClone = obj . cloneNode ( true ); let divNode = obj . nextElementSibling ; divNode . addEventListener ( \"click\" , removeFunc ); console . log ( divNode ); // inspizieren Sie die Konsole in den DevTools divNode . appendChild ( imgClone ); } function removeFunc ( event ) { let obj = event . target ; console . log ( obj ); let parent = obj . parentElement ; console . log ( parent ); parent . removeChild ( obj ); } </ script > </ body > </ html > In Zeile 17 melden wir unseren geklonten Knoten an den Event-Listener f\u00fcr das click -Ereignis an. Wird auf das Bild geklickt, dann wird die Funktion removeFunc() aufgerufen. Beachten Sie, dass der erste Parameter der addEventListener() -Funktion das Ereignis click ist (und nicht das HTML-Attribut onClick ) und dass der zweite Parameter die Referenz auf die Funktion removeFunc ist, nicht der Aufruf der Funktion. W\u00fcrden wir dort anstelle von removeFunc removeFunc() schreiben, entspr\u00e4che das dem Aufruf der Funktion und diese w\u00fcrde bei Aufruf der Funktion addEventListener() sofort ausgef\u00fchrt. Beachten Sie au\u00dferdem, dass bei der Funktionsdefinition von removeFunc() das ausgel\u00f6ste Event event als Parameter \u00fcbergeben wird. Dies passiert automatisch (also immer). Wenn wir den Parameter benennen, dann k\u00f6nnen wir auf dieses Ereignis zugreifen. Das machen wir auch, n\u00e4mlich in Zeile 24 , wo wir das target des Events abfragen, also das das Ereignis ausl\u00f6sende Element (unser jeweiliges <img> ). Die console.log() -Aufrufe sind jeweils nur zum Debuggen bzw. Inspizieren. Es gibt zwei JavaScript-Funktionen zum L\u00f6schen eines Elementes: parent.removeChild(child) - das Elternelement parent ruft die Funktion auf und l\u00f6scht das \u00fcbergebene Kind child node.remove() - ein Knoten (Element) ruft f\u00fcr sich selbst die remove() -Funktion auf und l\u00f6scht sich also selbst Wir haben im obigen Abschnitt die erste Variante gew\u00e4hlt, um zu zeigen, wie der Elternknoten ermittelt werden kann. Man h\u00e4tte aber auch auf Zeile 26 verzeichten und in Zeile 28 einfach obj.remove() schreiben k\u00f6nnen. Beispiel vollst\u00e4ndig mit JavaScript erzeugt \u00b6 Das soeben gezeigte Beispiel soll nun exemplarisch vollst\u00e4ndig durch JavaScript erzeugt werden. Wir verwenden genau ein Event-Attribut, n\u00e4mlich onload , das wir dem body zuweisen. Das load -Event wird aufgerufen, sobald die Seite vollst\u00e4ndig geladen ist. Ist die (leere) Seite vollst\u00e4ndig geladen, wird die Funktion createAllElements() aufgerufen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Clone </ title > </ head > < body onload = \"createAllElements()\" > < script > function cloneFunc ( event ) { let obj = event . target ; let imgClone = obj . cloneNode ( true ); let divNode = obj . nextElementSibling ; divNode . addEventListener ( \"click\" , removeFunc ); console . log ( divNode ); // inspizieren Sie die Konsole in den DevTools divNode . appendChild ( imgClone ); } function removeFunc ( event ) { let obj = event . target ; console . log ( obj ); let parent = obj . parentElement ; console . log ( parent ); parent . removeChild ( obj ); } function createAllElements () { let imgNode = document . createElement ( 'img' ); imgNode . src = \"./images/fiw.jpg\" ; imgNode . classList . add ( \"rounded\" , \"mx-auto\" , \"d-block\" ); imgNode . style . width = \"150px\" ; imgNode . alt = \"fiw\" ; imgNode . addEventListener ( \"dblclick\" , cloneFunc ); let divNode = document . createElement ( 'div' ); divNode . id = \"div1\" ; let scriptNode = document . getElementsByTagName ( 'script' )[ 0 ]; document . body . insertBefore ( imgNode , scriptNode ); document . body . insertBefore ( divNode , scriptNode ); } </ script > </ body > </ html > Hervorgehoben sind wieder die Zeilen, in dennen sich etwas ge\u00e4ndert hat. Zeile 10 : Der <body> enth\u00e4lt nun nur noch ein <script> -Element. Ansonsten keine weiteren HTML-Elemente. Zeile 12 : Der Funktion cloneFunc() kann nun nicht mehr das img -Objekt selbst \u00fcbergeben werden (da wir in addEventListener() nur die Referenz auf die Funktion \u00fcbergeben). Deswegen verwenden wir auch hier wieder das automatisch \u00fcbergebene event und ermitteln das target des ausgel\u00f6sten Ereignisses (Zeile 14 ). Zeilen 31-46 : Die Funktion createAllElements() erzeugt zun\u00e4chst ein img -Knoten mit allen erforderlichen Attributen. Au\u00dferdem wird dieser Knoten auch noch an das dblclick -Ereignis angemeldet und die Referenz auf die Funktion cloneFunc als Event-Handler \u00fcbergeben. In Zeile 44 wird dieser img -Knoten dem <body> hinzugef\u00fcgt, und zwar vor dem <script> -Element. Au\u00dferdem wird noch unser <div> mit der id=\"div1\" erzeugt und ebenfalls vor dem <script> -Element (und hinter das <img> -Element) eingef\u00fcgt. Es entsteht die exakt gleiche Webseite wie in dem Beispiel davor (siehe Beispiel aus addEventListener ). JavaScript - Sprachelemente \u00b6 var , let und const \u00b6 Mithilfe der Schl\u00fcsselw\u00f6rter var , let und const k\u00f6nnen in JavaScript Variablen deklariert werden. Wenn Sie eine Variable mit var deklarieren, dann ist diese Variable innerhalb der gesamten Funktion, in der Sie die Variable deklarieren, g\u00fcltig. Dagegen hat let nur eine Blockg\u00fcltigkeit , d.h. eine mit let deklarierte Variable ist nur in dem Anweisungsblock g\u00fcltig, in dem sie deklariert wurde. Eine mit let deklarierte Variable verh\u00e4lt sich also wie eine in Java deklarierte Variable. const wird zur Deklaration von Konstanten verwendet. Es ist zu bachten: Falls es sich bei der mit const deklarierten Konstante um eine Referenzvariable handelt (also auf ein Objekt oder Array zeigt), dann kann diese Variable ihre Referenz zwar nicht mehr \u00e4ndern, das jeweilige Objekt, auf das die Variable (konstant) zeigt, kann sich aber schon \u00e4ndern. Globale Variablen, also Variablen, die von allen Funktionen geteilt werden (in allen Funktionen genutzt werden k\u00f6nnen), werden au\u00dferhalb der Funktionen deklariert. Man sollte nur sehr selten globale Variablen einsetzen, da sie in allen anderen Funktionen (auch externen) \u00fcberschrieben werden k\u00f6nnen. Bl\u00f6derweise ist eine Variable auch dann global, wenn sie ohne eines der genannten Schl\u00fcsselw\u00f6rter ( var , let und const ) innerhalb einer Funktion \"deklariert\" wurde. Das geschieht meistens durch eine Wertzuweisung in der Annahme, dass die Variable bereits deklariert wurde. Eine solche unbeabsichtigte Erstellung einer globalen Variable sollte vermieden werden - die absichtliche erst recht. Wenn globale Variable, dann die Deklaration au\u00dferhalb aller Funktionen. Objekte \u00b6 Objekte in JavaScript werden in JavaScript Object Notation beschrieben. Wir werden darauf noch genauer eingehen , zeigen hier aber schonmal ein einfaches Beispiel zur Einf\u00fchrung: let person = { vorname : \"Maria\" , nachname : \"Musterfrau\" }; Es wurde eine person definiert mit 2 Feldern vorname und nachname und diesen Feldern wurden Werte zugewiesen. Der Zugriff auf die Felder erfolgt mittels Punkt-Notation, also person.vorname und person.nachname . Sie k\u00f6nnen die Werte auch einfach \u00fcberschreiben, z.B. person.nachname = \"Schmidt\" . Sie k\u00f6nnen das Objekt auch um weitere Eigenschaften erweitern, z.B. person.alter = 42 . Neben der \u00fcblichen Punktnotation ist auch zu erw\u00e4hnen, dass die Eigenschaften auch Schl\u00fcssel eines assoziativen Arrays sind, d.h. Sie k\u00f6nnen auf die Werte auch wie folgt zugreifen: person [ \"vorname\" ] // Maria person [ \"nachname\" ] // Schmidt person [ \"alter\" ] // 42 Mithilfe von delete k\u00f6nnen Eigenschaften gel\u00f6scht werden, z.B. delete person.alter; . Ab dann ist person.alter undefined . Objekteigenschaften k\u00f6nnen auch Funktionen sein, z.B. person . name = function (){ return this . vorname + \" \" + this . nachname }; Der Aufruf erfolgt dann \u00fcber person.name(); Arrays \u00b6 Arrays in JavaScript werden fast genauso behandelt wie in Java. Hier ein Beispiel: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Arrays </ title > </ head > < body > < h2 > JavaScript Arrays </ h2 > < p id = \"demo\" ></ p > < script > let sgs = [ \"FIW\" , \"AI\" , \"IMI\" , \"WI\" ]; let lange = sgs . length ; text = \"<ul>\" ; for ( let i = 0 ; i < sgs . length ; i ++ ) { text += \"<li>\" + sgs [ i ] + \"</li>\" ; } text += \"</ul>\" ; document . getElementById ( \"demo\" ). innerHTML = text ; </ script > </ body > </ html > In Zeile 12 wird das Array sgs (soll Studieng\u00e4nge hei\u00dfen - immer sprechende Namen verwenden ;-) definiert. Es enth\u00e4lt lauter Strings. In JavaScript k\u00f6nnen die Elemente eines Arrays von verschiedenen Typen sein. In Zeile 16 definieren wir die for -Schleife, mit der wir durch das Array laufen (ist genau so numerisch indiziert, wie wir das von Java kennen). Wir greifen \u00fcber die Index-Schreibweise sgs[i] auf alle Elemente des Arrays zu (Zeile 17 ). Das Array kann auch aus Objekten bestehen. Angenommen, das Array sieht so aus: var staedte = [ { \"jahr\" : 1237 , \"stadt\" : \"Berlin\" , \"link\" : \"http://de.wikipedia.org/wiki/Berlin\" , \"bild\" : \"images/berlin.png\" }, { \"jahr\" : 1624 , \"stadt\" : \"New York\" , \"link\" : \"http://de.wikipedia.org/wiki/New_York_City\" , \"bild\" : \"images/newyork.png\" }, { \"jahr\" : 1252 , \"stadt\" : \"Stockholm\" , \"link\" : \"http://de.wikipedia.org/wiki/Stockholm\" , \"bild\" : \"images/stockholm.png\" }, { \"jahr\" : 852 , \"stadt\" : \"Madrid\" , \"link\" : \"http://de.wikipedia.org/wiki/Madrid\" , \"bild\" : \"images/madrid.png\" }, { \"jahr\" : 1827 , \"stadt\" : \"Bremerhaven\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremerhaven\" , \"bild\" : \"images/bremerhaven.png\" }, { \"jahr\" : 150 , \"stadt\" : \"Bremen\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremen\" , \"bild\" : \"images/bremen.png\" }, { \"jahr\" : 1202 , \"stadt\" : \"Bernau\" , \"link\" : \"http://de.wikipedia.org/wiki/Bernau_bei_Berlin\" , \"bild\" : \"images/bernau.png\" }, { \"jahr\" : 929 , \"stadt\" : \"Brandenburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Brandenburg_an_der_Havel\" , \"bild\" : \"images/brandenburg.png\" }, { \"jahr\" : 805 , \"stadt\" : \"Magdeburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Magdeburg\" , \"bild\" : \"images/magdeburg.png\" }, { \"jahr\" : 1222 , \"stadt\" : \"Marburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Marburg\" , \"bild\" : \"images/marburg.png\" }, { \"jahr\" : 766 , \"stadt\" : \"Mannheim\" , \"link\" : \"http://de.wikipedia.org/wiki/Mannheim\" , \"bild\" : \"images/mannheim.png\" }, { \"jahr\" : 782 , \"stadt\" : \"Mainz\" , \"link\" : \"http://de.wikipedia.org/wiki/Mainz\" , \"bild\" : \"images/mainz.png\" } ]; Dann sind die Elemente des Arrays numerisch indiziert. JavaScript ist dynamisch typisiert \u00b6 Im Gegensatz zu z.B. Java ist JavaScript nicht statisch, sondern dynamisch typisiert. Der Wert einer Variablen bestimmt deren Typ. Beispiel: var number = 16 ; // number var name = \"Johnson\" ; // string var cars = [ \"Saab\" , \"Volvo\" , \"BMW\" ]; // object (Array) var obj = { firstName : \"John\" , lastName : \"Doe\" }; // object var func = new Function (); // function var correct = true ; // boolean var x ; // now x is undefined var x = 5 ; // now x is a Number var x = \"John\" ; // now x is a String typeof kann verwendet werden, ob zu \u00fcberpr\u00fcfen, ob eine Variable \u00fcberhaupt definiert ist und/oder von welchem Typ sie ist. Es liefert folgende Resultate: undefined boolean function number object string symbol Beispiel: < div id = \"myDiv\" ></ div > < script > var x ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // undefined x = \"12\" ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // string x = 12 ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // number x = 12.12 ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // number x = true ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // boolean x = function (){ alert ( \"Funktion\" );}; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // function x = new Function ( \"alert('Funktion')\" ); document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // function x = new Object (); document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // object </ script > Funktionen \u00b6 Die Definition von Funktionen in JavaScript erfolgt \u00fcber das Schl\u00fcsselwort function . Wir haben oben bereits mehrere Beispiele f\u00fcr Funktionen gezeigt. Hier ein weiteres: < p id = \"demo\" ></ p > < script > function myFunction ( a , b ) { return a * b ; } document . getElementById ( \"demo\" ). innerHTML = myFunction ( 4 , 3 ); </ script > Es wird eine Funktion myFunction() definiert, der 2 Parameter a und b \u00fcbergeben werden. Die Funktion berechnet das Produkt aus a und b und gibt dieses mithilfe von return zur\u00fcck. Der zur\u00fcckgegebene Wert wird als Inhalt des Absatzes <p> mit der id=\"demo\" verwendet. myFunction(4, 3); ist der Aufruf der Funktion. Au\u00dferdem k\u00f6nnen Funktionen als anonyme Funktionen deklariert werden. Es ist m\u00f6glich, dass eine Variable auf eine (anonyme) Funktion zeigt. Diese Variable kann dann wie die Funktion selbst verwendet werden. Beispiel: var x = function ( a , b ) { return a * b }; Die Funktion kann nun \u00fcber z.B. x(4,3); aufgerufen werden. Eine weitere (aber selten verwendete) M\u00f6glichkeit, eine Funktion zu definieren, ist die Verwendung des Function() -Konstruktors. Beispiel: var myFunction = new Function ( \"a\" , \"b\" , \"return a * b\" ); Diese Funktion kann dann (wie oben mit x ) mit myFunction(4,3); aufgerufen werden. Aber, wie gesagt, das ist eher un\u00fcblich, denn es ist \u00e4quivalent zu: var myFunction = function ( a , b ) { return a * b }; mit dem Aufruf myFunction(4,3); . Die Verwendung des Function() -Konstruktors zeigt aber, dass jede Funktion vom Typ function ist. In JavaScript gibt es also einen Typ function . W\u00fcrde man f\u00fcr das Beispiel mit x z.B. typeof(x) aufrufen, ist das Resultat function . Variable Anzahl von Parametern \u00b6 Die Anzahl der Parameter kann, muss aber nicht in der Funktionsdefinition angegeben werden. Es geht immer (auch wenn eine feste Anzahl von Parametern angegeben wurde): function summe () { var i , sum = 0 ; for ( i = 0 ; i < arguments . length ; i ++ ) { sum += arguments [ i ]; } return sum ; } Diese Funktion kann jetzt mit beliebig vielen Parametern aufgerufen werden: summe ( 1 , 2 , 3 , 4 , 5 , 6 ); summe ( 1 , 2 , 3 ); Arrow-Funktionen \u00b6 Arrow-Funktionen werden auch als Lambda-Ausdr\u00fccke bezeichnet. Eine Arrow-Funktion ist eine Kurzschreibweise f\u00fcr eine anonyme Funktion. Anstelle von function() schreibt man nur noch einen Pfeil. Enth\u00e4lt die anonyme Funktion sogar nur ein Argument (Parameter), kann man links vom Pfeil sogar die runden Klammern weglassen. Auch die geschweiften Klammern des Funktionsk\u00f6rpers k\u00f6nnen entfallen. Wenn die geschweiften Klammwern weggelassen werden, dann entspricht die rechte Seite des Pfeils dem R\u00fcckgabewert der Funktion, d.h. es kann sogar return weggelassen werden. Folgende Funktionsdefinitionen sind \u00e4quivalent: function ( foo ) = { return foo + 1 ;} ( foo ) => { return foo + 1 ;} foo => { return foo + 1 ;} foo => foo + 1 ; Callback-Funktionen \u00b6 Eine Callback -Funktion ist eine Funktion, die einer anderen Funktion als Parameter \u00fcbergeben wird. Callback-Funktionen sind z.B. hier erl\u00e4utert. Darin finden Sie auch das folgende einfache Beispiel einer Callback-Funktion: 1 2 3 4 5 6 7 8 9 10 function greeting ( name ) { alert ( 'Hello ' + name ); } function processUserInput ( callback ) { var name = prompt ( 'Please enter your name.' ); callback ( name ); } processUserInput ( greeting ); In den Zeilen 1-3 wird eine Funktion greeting() definiert, welche einen name erwartet. Diese Funktion gibt Hello zusammen mit dem Namen in einem Alarmfenster aus. Die Funktion greeting() wird als Callback -Funktion in der Funktion processUserInput() (Zeilen 5-8) verwendet. Das hei\u00dft, die Funktion greeting() wird der Funktion processUserInput() als Parameter \u00fcbergeben. Innerhalb der Funktion processUserInput() hei\u00dft die Referenz auf die Funktion greeting() callback . Der Parametername kann beliebig gew\u00e4hlt werden. Wir die Funktion processUserInput() aufgerufen (Zeile 10) und die Funktion greeting() als Parameter \u00fcbergeben, dann erscheint zun\u00e4chst ein Eingabefenster, in dem der Name eingeben wird und dieser Name wird der greeting() -Funktion als Parameter \u00fcbergeben. Es erscheint das Alarmfenster mit der Ausgabe Hello plus dem Namen. Der Funktion processUserInput() k\u00f6nnte auch jede andere Funktion als Callback-Funktion \u00fcbergeben werden. Promises \u00b6 Eine Promise ist das Ergebnis einer asynchronen Operation. Es gibt vier Status einer Promis (uns interessiert in der Regel nur resolved oder rejected ): Status Erkl\u00e4rung pending die Promise wartet noch auf die Beendigung der asynchronen Operation settled die asynchrone Operation wurde beendet resolved die asynchrone Operation wurde erfolgreich beendet rejected die asynchrone Operation ist fehlgeschlagen Um das Prinzip einer Promise zu erl\u00e4utern, schauen wir uns ein Beispiel aus Node.js \u2192 Eine Movie-Datenbank an: function getAll () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM Movies' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } Die Funktion getAll() gibt eine Promise zur\u00fcck. Diese wird mit dem Konstruktor erzeugt. Dem Konstruktor wird eine Callback-Funktion \u00fcbergeben. Hier ist diese Funktion die Anfrage an die Datenbank connection.query() . Diese Funktion ist asynchron, d.h. sie wird ausgef\u00fchrt, ohne dass andere Funktionsaufrufe stoppen m\u00fcssen. Man kann auch sagen, dass die Promise die asynchrone Funktion kapselt . Die asynchrone Funktion enth\u00e4lt ebenfalls eine Callback-Funktion. Hier wurden als Parameternamen der Callback-Funktion error und results gew\u00e4hlt. Der erste Parameter wirft einen Fehler, wenn die asynchrone Funktion fehlschl\u00e4gt, der zweite Parameter enth\u00e4lt die Daten bei Erfolg. Mit reject gibt man den Fehler zur\u00fcck (im Fehlerfall) und mit resolve die Daten (im Erfolgsfall). return new Promise() Wir merken uns also: die getAll() -Funktion gibt ein Promise -Objekt zur\u00fcck. Wie kann eine solche Promise nun verwendet werden? Dazu schauen wir uns erneut das Beispiel aus Node.js \u2192 Eine Movie-Datenbank an: function listAction ( request , response ) { model . getAll (). then ( movies => response . send ( view ( movies )), error => response . send ( error ), ); } Der entscheidende Punkt ist, dass ein Promise-Objekt eine then -Methode besitzt. Dieser then -Methode k\u00f6nnen wiederum zwei Callback-Funktionen \u00fcbergeben werden. Die erste Funktion wird durch die resolve -Funktion der Promise aufgerufen, die zweite Funktion, falls die Promise die reject -Funktion aufruft. Werden der resolve - und der reject -Funktion Argumente \u00fcbergeben (so wie oben resolve(results) und reject(error) ), dann k\u00f6nnen diese Argumente in der jeweiligen Callback-Funktion ausgewertet werden ( results \u2192 movies bzw. error \u2192 error ). Die then -Funktion selbst gibt \u00fcbrigens wieder ein Promise -Objekt zur\u00fcck. Somit k\u00f6nnen mehrere Promises verkettet werden.","title":"JavaScript"},{"location":"javascript/#javascript","text":"JavaScript wurde 1995 von Brendan Eich entwickelt. Er arbeitete damals bei Netscape und entwickelte mit dem damals sogenannten LiveScript eine Skriptsprache f\u00fcr den damaligen Netscape-Browser. Ein damaliger Browser \"verstand\" HTML und CSS. HTML sah f\u00fcr Nutzerinteraktionen nur das Klicken auf Hyperlinks vor. Andere Nutzerinteraktionen waren nicht vorgesehen. Mithilfe von JavaScript wurde eine Schnittstelle geschaffen, um durch Nutzerinteraktionen den HTML-Code zu manipulieren, ohne dass ein weiteres Nachladen vom Webserver notwendig wurde. Mit der Einf\u00fchrung von JavaScript wurden die F\u00e4higkeiten von Browsern erweiteret, indem nun nicht mehr nur HTML und CSS interpretiert wurde, sondern auch JavaScript - alles Client-seitig, also durch den Browser selbst. JavaScript ist eine sogenannte Skriptsprache , d.h. der Quellcode wird nicht compiliert und dann der \u00fcbersetzte Byte- oder Maschinencode ausgef\u00fchrt, sondern der Quellcode wird durch einen Interpreter interpretiert. Allerdings wird f\u00fcr Optimierungen JavaScript - insbesondere serverseitig in Node.js - durch sogenannte Engines doch in Maschinencode \u00fcbersetzt, welcher ausgef\u00fchrt wird. Die bekannteste dieser Engines ist die Google-Engine V8 . Die Technologie der Compilierung wird als Just-in-time-Kompilierung (JIT) bezeichnet. JavaScript kennt (im Gegensatz zu TypeScript) keine Klassen. Das Objektmodell von JavaScript basiert auf Prototypen . Eigenschaften und Methoden k\u00f6nnen zur Laufzeit den Objekten hinzugef\u00fcgt werden. Neben diesem dynamischen Objektmodell ist auch die Typisierung in JavaScript dynamisch. Der Typ einer Variable h\u00e4ngt vom Wert ab. Mit dem Wert kann sich auch der Typ der Variable \u00e4ndern. Client-seitig haben HTML, CSS und JavaScript folgende Bedeutung (und wir sollten auch auf eine solche strikte Trennung achten): HTML f\u00fcr die Inhalte, CSS f\u00fcr das Layout, JavaScript f\u00fcr das interaktive Verhalten unserer Webseite.","title":"JavaScript"},{"location":"javascript/#javascript-in-unseren-webseiten","text":"Zun\u00e4chst \u00fcberlegen wir uns, wie wir das auch schon f\u00fcr CSS getan hatten, wo wir den JavaScript-Code in unseren Webseiten einf\u00fcgen k\u00f6nnen. Prinzipiell wird JavaScript-Code in einem HTML-Dokument innerhalb eines <script></script> -Elementes eingef\u00fcgt. Im Gegensatz zu CSS (wo wir die Definitionen innerhalb des <style></style> -Elementes angegeben haben, welches immer im <head> positioniert wird), ist es egal, ob das <script> -Element im <head> oder <body> angelegt wird. Sie k\u00f6nnen innerhalb eines HTML-Dokumentes auch mehrere <script> -Elemente haben und Sie k\u00f6nnen dann auch sowohl im <head> als auch im <body> positioniert sein. Wie bei CSS, ist es auch f\u00fcr JavaScript \u00fcblich, den Code in externe (. js )-Dateien auszulagern und diese dann in das HTML-Dokument einzubinden. Dies geschieht aber nicht \u00fcber ein <link> -Element, sondern ebenfalls \u00fcber das <script> -Element. Das folgende Beispiel zeigt die Verwendung des <script> -Eelementes zum Einbinden von JavaScript: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > DOM </ title > < script > function myFunction1 () { document . getElementById ( \"demo1\" ). innerHTML = \"Hallo FIW!\" ; } </ script > </ head > < body > < script src = \"myScript.js\" ></ script > < h1 > \u00dcberschrift </ h1 > < button type = \"button\" onclick = \"myFunction1()\" > Klick mich </ button > < div id = \"demo1\" ></ div > < input id = \"input1\" type = \"text\" placeholder = \"Gibt etwas ein\" onkeyup = \"myFunction2()\" /> < div id = \"demo2\" ></ div > < script > function myFunction2 () { document . getElementById ( \"demo2\" ). innerHTML = document . getElementById ( \"input1\" ). value ; } </ script > </ body > </ html > Ein gutes Vorgehen ist es, JavaScript am Ende des <body> -Elementes einzubinden, damit die Seite zun\u00e4chst dargestellt wird und erst dann der JavaScript-Code geladen wird. Das laden des JavaScript-Codes w\u00fcrde ansonsten die Darstellung der Webseite verz\u00f6gern.","title":"JavaScript in unseren Webseiten"},{"location":"javascript/#document-object-model-dom","text":"Wir betrachten JavaScript zun\u00e4chst nur aus client-seitiger Sicht, d.h. f\u00fcr die Verwendung im Browser. Der Browser stellt HTML dar, welches durch CSS in ein ansprechendes Layout gestzt wurde. Es stellt sich die Frage, inwieweit JavaScript \u00fcberhaupt noch eine Erweiterung dieses Konzeptes darstellen kann. Die Antwort liegt darin, dass ohne JavaScript eine Webseite im Browser v\u00f6llig statisch ist, d.h. es gibt nur eine M\u00f6glichkeit, neue Inhalte zu laden oder \u00fcberhaupt etwas an der Webseite zu \u00e4ndern und das ist, diese neuen Inhalte oder \u00c4nderungen von einem Webserver zu laden. Jede Nutzerinteraktion f\u00fchrt so immer zu einem Request-Response-Prozess mit einem Webserver. Das wird durch JavaScript ge\u00e4ndert. Auf Nutzerinteraktionen kann durch JavaScript lokal, d.h. auf dem Client bleibend, reagiert werden. Die Schnittstelle zwischen JavaScript und HTML/CSS ist das sogenannte Document Objekct Model (DOM) . Das DOM stellt ein Interface (eine Schnittstelle) dar, um HTML-Dokumente \"manipulieren\" zu k\u00f6nnen. Damit ist haupts\u00e4chlich gemeint, dass HTML-Elemente eines HTML-Dokumentes ge\u00e4ndert, hinzugef\u00fcgt und gel\u00f6scht werden k\u00f6nnen. Zum \u00c4ndern der HTML-Elemente z\u00e4hlen das \u00c4ndern des Inhalts der Elemente und das \u00c4ndern von Attributen und deren Werten. Die Idee ist, dass ein HTML-Dokument als ein Baum aufgefasst wird, dessen hierarchische Beziehungen durch das HTML-Dokument (und dessen hierarchischer Struktur) vorgegeben werden und in dem alle HTML-Elemente, alle Attribute und alle Inhalte als Objekte angesehen werden. Wir schauen uns dazu ein einfaches Beispiel an: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > DOM </ title > </ head > < body > < div class = \"container\" > < h1 > \u00dcberschrift </ h1 > < ul > < li > < a href = \"http://www.htw-berlin.de\" > HTW Berlin </ a > < a href = \"http://fiw.htw-berlin.de\" > FIW </ a > </ li > </ ul > </ div > </ body > </ html > Ein HTML-Dokument besteht aus HTML-Elementen, welche Attribute haben k\u00f6nnen und Inhalte. Im obigen Beispiel hat z.B. das <meta> -Element im <head> ein Attribut, n\u00e4mlich charset . Der Wert dieses Attributes ist ein Text, n\u00e4mlich UTF-8 . Der Inhalt eines <a> -Elementes ist auch ein Text. Im obigen Beispiel haben wir zwei <a> -Elemente. Das eine hat den Inhalt (Text) HTW Berlin und das andere FIW . Wir k\u00f6nnen somit zwischen drei Arten von \"Objekten\" in einem HTML-Dokument unterscheiden: Elemente Attribute Texte Wenn wir diese Artefakte tats\u00e4chlich als Objekte auffassen und au\u00dferdem die hierarchische Beziehung zwischen diesen Objekten ber\u00fccksichtigen, dann l\u00e4sst sich ein Baum aufspannen, der aus solchen Objekten besteht. F\u00fcr obiges Beispiel sieht der Baum dann so aus: Wir interpretieren die Objekte also als Knoten ( Node ) eines Baumes. Einen solchen Baum, der ein HTML-Dokument eindeutig repr\u00e4sentiert, nennen wir Document Object Model (DOM) (auch HTML-DOM ). Ein solcher DOM ist der Ausgangspunkt f\u00fcr die Manipulation des HTML-Dokumentes, denn JavaScript ist in der Lage, jeden beliebigen Knoten innerhalb dieses Baumes anzusprechen und bspw. zu \u00e4ndern oder zu l\u00f6schen. Au\u00dferdem kann auch jede beliebige Position eindeutig bestimmt werden, um z.B. ein Element hinzuzuf\u00fcgen. Wir schauen uns im Folgenden an, welche Funktionen JavaScript zur Verf\u00fcgung stehen, um Positionen in diesem Baum eindeutig zu lokalisieren.","title":"Document Object Model (DOM)"},{"location":"javascript/#dom-funktionen-lokalisation-von-elementen","text":"Ausgangspunkt (die Wurzel) eines jeden HTML-DOM ist document (siehe obige Abbildung). Von document aus k\u00f6nnen wir uns beliebig durch den Baum bewegen. Die wohl meist verwendete Funktion zur Lokalisation eines Elementes im DOM ist getElementById() . In unserem obigen Beispiel haben wir nur ein Element mit einer id (einem id -Attribut) und das ist <ul> . Wir k\u00f6nnten gezielt nach diesem Element fragen: document . getElementById ( 'ul1' ) und erhalten als R\u00fcckgabe das Element mit der id=\"ul1\" , also das <ul> -Element (welches wir z.B. in einer Variable speichern k\u00f6nnten). Weitere Funktionen zur Lokalisation von Elementen sind document . getElementsByTagName ( name ) document . getElementsByClassName ( name ) Beide Funktionen liefern uns jeweils ein Array von Elementen zur\u00fcck. Die Funktion document.getElementsByTagName(name) gibt ein Array von Elementen aus dem document zur\u00fcck, die den Tag name haben, also z.B. alle <p> -Elemente, wenn document.getElementsByTagName('p') aufgerufen wird. Die Funktion document.getElementsByClassName(name) gibt ein Array von Elementen aus dem document zur\u00fcck, die der Klasse name zugeordnet sind, also z.B. alle Elemente mit der Klasse form-group , wenn document.getElementsByClassName('form-group') aufgerufen wird. Mit diesen Funktionen kann man Elemente mitten im DOM lokalisieren. Daneben gibt es noch weitere Funktionen, die jeweils von einem solchen Element ausgehend \"benachbarte\" Knoten lokalisieren. Betrachten wir z.B. diesen Ausschnitt aus einem HTML-Code: < main id = \"main\" > < h3 id = \"headline\" > DOM </ h3 > < img id = \"ball1\" src = \"ball.png\" /> < img id = \"ball2\" src = \"ball.png\" /> < img id = \"ball3\" src = \"ball.png\" /> < img id = \"ball4\" src = \"ball.png\" /> </ main > Der dazugeh\u00f6rige DOM (vereinfacht) ist in der folgenden Abbildung dargestellt sowie die Funktionen, mit denen die umgebenden Elemente lokalisiert werden k\u00f6nnen: F\u00fcr die Funktionen getElementById() und getElementsByTagName() betrachten wir ein erstes einfaches Beispiel: In dem obigen JSFiddle k\u00f6nnen Sie die Wirkungsweise ausprobieren. Wir zeigen hier aber nochmal den vollst\u00e4ndigen Code, damit Sie ihn sich kopieren und wir ihn besser erl\u00e4utern k\u00f6nnen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > DOM </ title > < style > * { padding : 5 px ; margin : 5 px ; } </ style > </ head > < body > < h1 onmouseover = \"changeColor()\" > \u00dcberschrift </ h1 > < button type = \"button\" onclick = \"myFunction1()\" > Klick mich </ button > < div id = \"demo1\" ></ div > < input id = \"input1\" type = \"text\" placeholder = \"Gibt etwas ein\" onkeyup = \"myFunction2()\" /> < div id = \"demo2\" ></ div > < script > function myFunction1 () { document . getElementById ( \"demo1\" ). innerHTML = \"Hallo FIW!\" ; } function myFunction2 () { document . getElementById ( \"demo2\" ). innerHTML = document . getElementById ( \"input1\" ). value ; } function changeColor () { var h1arr = document . getElementsByTagName ( 'h1' ); h1arr [ 0 ]. style . color = \"red\" ; } </ script > </ body > </ html > Den <head> k\u00f6nnen wir ignorieren, auch das <style> -Element darin. Wichtig sind: wir haben 2 leere <div> -Elemente mit den Ids id=\"demo1\" und id=\"demo2\" (Zeilen 16 und 18 ) wir haben einen <button> mit dem Attribut onclick . Dieses Attribut bindet einen Ereignis-Listener an den Button. Wird das Click -Ereignis ausgel\u00f6st, wird die JavaScript-Funktion myFunction1() aufgerufen (Zeile 15 ) die JavaScript-Funktion myFunction1() ist im <script> -Element definiert (Zeilen 20-22 ). Diese Funktion lokalisiert das Element mit der id \"demo1\" und weist ihm einen neuen HTML-Inhalt zu, n\u00e4mlich \"Hallo FIW!\" wir haben au\u00dferdem ein einzeiliges Eingabefeld mit der Id id=\"input1\" (Zeile 17 ). Diesem Eingabefeld ist au\u00dferdem das Attribut onkeyup zugeordnet. Dieses Attribut meldet sich bei einem Ereignis an, das ausgel\u00f6st wird, wenn innerhalb des Eingabefeldes eine Taste wieder losgelassen wird - es wird dann das KeyUp -Ereignis ausgel\u00f6st. Durch das Ausl\u00f6sen dieses Ereignisses wird die JavaScript-Funktion myFunction2() aufgerufen. die JavaScript-Funktion myFunction2() ist im <script> -Element definiert (Zeilen 20-22 ). Diese Funktion lokalisiert das Element mit der id \"demo2\" und weist ihm einen neuen HTML-Inhalt zu, n\u00e4mlich den Wert ( value ), der in das Eingabefeld mit der id=\"input1\" eingegeben wurde (Zeilen 24-26 ) der \u00dcberschrift <h1> (Zeile 14 ) wurde das Attribut onmouseover zugeordnet. Damit wird das MouseOver -Ereignis abgefragt. Wird die Maus \u00fcber die \u00dcberschrift bewegt, wird dieses Ereignis ausgel\u00f6st und die Funktion changeColor() aufgerufen diese Funktion lokalisiert zun\u00e4chst alle Elemente mit dem Tag h1 und speichert sie in das Array h1arr (Zeile 29 ). Unsere \u00dcberschrift ist die erste (und einzige) \u00dcberschrift <h1> im Dokument. Wir greifen deshalb mit dem Index 0 auf dieses Element im h1arr -Array zu und \u00e4ndern die Schriftfarbe auf \"red\" (Zeile 30 ) Dieses erste Beispiel zeigt mehrere interssante Punkte: neben den Funktionen zur Lokalisation von Elemeneten gibt es auch Ereignisse, an die man sich anmelden und auf die reagiert werden kann und es gibt Funktionen, die den Inhalt und den Style von Elementen \u00e4ndern Wir schauen uns zun\u00e4chst Ereignisse an, auf die reagiert werden kann.","title":"DOM-Funktionen (Lokalisation von Elementen)"},{"location":"javascript/#html-ereignisse","text":"HTML-Ereignisse \"passieren\" f\u00fcr HTML-Elemente in den allermeisten F\u00e4llen durch Nutzerinteraktionen (Maustaste dr\u00fccken, Fenster vergr\u00f6\u00dfern, Tatstatureingabe etc.). Mit JavaScript k\u00f6nnen wir auf diese Ereignisse reagieren. Eine einfache Form, ein HTML-Element an ein solches Ereignis anzumelden (so dass darauf reagiert werden kann), ist \u00fcber Attribute. Angenommen ein solches Ereignis hei\u00dft Event , dann hei\u00dft das Attribut onEvent (es kann auch alles klein geschrieben werden). Die generelle Syntax ist wie folgt: < element onEvent = \"JavaScript-Code\" /> Der JavaScript-Code muss nicht zwingend der Aufruf einer JavaScript-Funktion, sondern kann auch eine direkte JavaScript-Anweisung sein. Hier eine Liste der \u00fcblichsten HTML-Ereignisse. Die Bedeutung ist aus den Namen selbsterkl\u00e4rend, deshalb werden die meisten Ereignisse hier nicht weiter beschrieben: Mausereignisse (MouseEvent): mousedown , mouseup , click , dblclick , mousemove , mouseover , mousewheel , mouseout , contextmenu Tastaturereignisse (KeyboardEvent): keydown , keypress , keyup Formularereignisse: focus , blur , change , input , submit Fensterereignisse: scroll , resize , hashchange , load , unload Wir zeigen einige Beispiele: In diesem Beispiel werden die Ereignisse focus , blur und input behandelt. Um das blur -Ereignis auszul\u00f6sen, muss das <input> -Element den Focus verlieren. In diesem Beispiel wird das change -Ereignis behandelt. Der Inhalt des Absatzes <p> mit der id=\"radio\" wird bei jedem change -Event erweitert. Es wird also nicht innerHTML v\u00f6llig neu gesetzt, sondern mithilfe von += wird der entsprechende String angeh\u00e4ngt. Das soll insbesondere zeigen, dass das change -Ereignisses wirklich nur ausgel\u00f6st wird, wenn der Wert wechselt. Beachten Sie auch, dass getElementsByName() verwendet wird. Den Radiobuttons wurde jeweils name=\"colors\" zugewiesen. Sie bilden damit auch eine Radiobutton-Group (es kann immer nur ein Radiobutton daraus ausgew\u00e4hlt werden). In diesem Beispiel werden das mouseover - und das mouseout -Event behandelt. Beachten Sie auch die \u00dcbergabe von this an die JavaScript-Funktionen. Damit wird das <div> -Element \u00fcbergeben. Wir m\u00fcssen es innerhalb der Funktionen deshalb nicht mehr explizit mit getElementById() oder \u00e4hnliches holen. In diesem Beispiel wird JavaScript nicht als Funktion, sondern direkt in den Ereignis-Attributen aufgerufen. Noch ein einfaches Beispiel mit den Ereignissen mousedown , mouseup , mouseenter und mouseleave . Noch ein letztes Beispiel, das wir nicht in JSFiddle zeigen, da es daraum geht, die Gr\u00f6\u00dfe des Browsers zu \u00e4ndern (Ereignis resize - die JavaScript-Funktion hei\u00dft auch resize() , aber dieser Name ist frei gew\u00e4hlt): <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Arrays </ title > </ head > < body onresize = \"resize()\" > < h2 > Gr\u00f6\u00dfe des Browserfensters \u00e4ndern! </ h2 > < p id = \"demo\" ></ p > < script > function resize () { var w = window . outerWidth ; var h = window . outerHeight ; var txt = \"Fenstergr\u00f6\u00dfe: Breite=\" + w + \", H\u00f6he=\" + h ; document . getElementById ( \"demo\" ). innerHTML = txt ; } </ script > </ body > </ html > Wir haben uns nun einige Beispiele angesehen, wie wir HTML-Elemente \u00e4ndern k\u00f6nnen. Prinzipiell geht es mit den Eigenschaften: node.innerHTML = - Inhalt eines Elements \u00e4ndern node.attribute = - Attribut eines Elements \u00e4ndern node.style. property = - Style/Formatierung \u00e4ndern node.classList.add() - CSS-Klassen zum Element hinzuf\u00fcgen node.classList.remove() - CSS-Klassen vom Element entfernen","title":"HTML-Ereignisse"},{"location":"javascript/#auslesen-der-werte-in-formularen","text":"Wir zeigen noch ein einfaches Beispiel, in dem das Auslesen von Werten in Formularen gezeigt wird. In Formularen ( <form> ) gibt es die Besonderheit, dass das Absenden eines Formulares ( submit ) ein Neuladen der Seite zur Folge hat. Das liegt daran, dass die Formularwerte an den Webserver gesendet werden und der Browser die aktuelle Adresse neu l\u00e4dt (teilweise mit den eingegeben Werten in der URL, manchmal wird auch nur ein ? an die URL angeh\u00e4ngt - das diskutieren wir sp\u00e4ter nochmal genauer). Dieses default -Verhalten wollen wir zun\u00e4chst verhindern. Wir zeigen im Folgenden, wie das geht. Angenommen, wir haben folgenden HTML-Code (unter Verwendung von Bootstrap): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link href = \"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\" rel = \"stylesheet\" integrity = \"sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi\" crossorigin = \"anonymous\" > < title > \u00dcbung 4 </ title > </ head > < body > < div class = \"container\" > < h1 > Teilnehmerin Registrierung </ h1 > < form class = \"row g-3\" > < div class = \"col-md-6\" > < input type = \"text\" class = \"form-control\" id = \"firstname\" placeholder = \"First name\" required > < div id = \"firstnameFeedback\" class = \"invalid-feedback\" > Bitte Vornamen eingeben! </ div > </ div > < div class = \"col-md-6\" > < input type = \"text\" class = \"form-control\" id = \"lastname\" placeholder = \"Last name\" required > < div id = \"lastnameFeedback\" class = \"invalid-feedback\" > Bitte Nachnamen eingeben! </ div > </ div > < div class = \"col-md-6\" > < input type = \"email\" class = \"form-control\" id = \"email\" placeholder = \"E-Mail\" required > < div id = \"emailFeedback\" class = \"invalid-feedback\" > Bitte E-Mail eingeben! </ div > </ div > < div class = \"col-md-6\" > < input type = \"text\" class = \"form-control\" id = \"ipaddress\" placeholder = \"IP-Address\" required > < div id = \"ipaddressFeedback\" class = \"invalid-feedback\" > Bitte IP-Adresse eingeben! </ div > </ div > < div class = \"col-3\" > < button class = \"btn btn-secondary\" type = \"reset\" onclick = \"reset()\" > Abbrechen </ button > </ div > < div class = \"col-3\" > < button class = \"btn btn-success\" onclick = \"register()\" type = \"submit\" > Registrieren </ button > </ div > </ form > </ div > </ body > </ html > Es entsteht folgende Ansicht: Wenn Sie die Breite des Viewports (Browsers) weiter verringern, erscheinen alle Eingabefelder untereinander ( md -Option der col -Klassen). Die register() -Funktion k\u00f6nnte nun wie folgt aussehen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < script > function register () { let fname = document . querySelector ( '#firstname' ). value ; let lname = document . querySelector ( '#lastname' ). value ; let email = document . querySelector ( '#email' ). value ; let ipadr = document . querySelector ( '#ipaddress' ). value ; console . log ( fname ); console . log ( lname ); console . log ( email ); console . log ( ipadr ); } < /script> Wir greifen also mithilfe von querySelector() auf die Input-Elemente zu (h\u00e4tten wir auch mit getElementById() machen k\u00f6nnen), um den jeweiligen value auszulesen. Wir geben diesen Wert hier zun\u00e4chst jeweils nur auf die Konsole aus. Diese Ausgaben sehen wir aber gar nicht, weil die Konsole durch das Neuladen der Seite wieder gel\u00f6scht wird. Dieses Neuladen ensteht durch das Standardverhalten beim Submit eines Formulars (siehe oben). Wir wollen zun\u00e4chst nochmal zeigen, dass durch das Click -Ereignis des Buttons auch das Submit -Ereignis des Formulars ausgel\u00f6st wird, da es sich bei dem Button Registrieren um einen submit -Button des Formulars handelt. Dazu f\u00fchren wir folgende \u00c4nderungen um HTML-Code durch: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < link href = \"https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css\" rel = \"stylesheet\" integrity = \"sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi\" crossorigin = \"anonymous\" > < title > \u00dcbung 4 </ title > </ head > < body > < div class = \"container\" > < h1 > Teilnehmerin Registrierung </ h1 > < form class = \"row g-3\" onsubmit = \"alert('submit form')\" > < div class = \"col-md-6\" > < input type = \"text\" class = \"form-control\" id = \"firstname\" placeholder = \"First name\" required > < div id = \"firstnameFeedback\" class = \"invalid-feedback\" > Bitte Vornamen eingeben! </ div > </ div > < div class = \"col-md-6\" > < input type = \"text\" class = \"form-control\" id = \"lastname\" placeholder = \"Last name\" required > < div id = \"lastnameFeedback\" class = \"invalid-feedback\" > Bitte Nachnamen eingeben! </ div > </ div > < div class = \"col-md-6\" > < input type = \"email\" class = \"form-control\" id = \"email\" placeholder = \"E-Mail\" required > < div id = \"emailFeedback\" class = \"invalid-feedback\" > Bitte E-Mail eingeben! </ div > </ div > < div class = \"col-md-6\" > < input type = \"text\" class = \"form-control\" id = \"ipaddress\" placeholder = \"IP-Address\" required > < div id = \"ipaddressFeedback\" class = \"invalid-feedback\" > Bitte IP-Adresse eingeben! </ div > </ div > < div class = \"col-3\" > < button class = \"btn btn-secondary\" type = \"reset\" onclick = \"reset()\" > Abbrechen </ button > </ div > < div class = \"col-3\" > < button class = \"btn btn-success\" onclick = \"alert('click button')\" type = \"submit\" > Registrieren </ button > </ div > </ form > </ div > </ body > </ html > Wir reagieren also auf das Click -Ereignis mit einem alert() und ebenso auf das Submit -Ereignis des Formulars. Wenn wir nun den Registrieren -Button klicken, dann erscheint zun\u00e4chst die Nachricht click button und wenn wir dieses Nachrichtenfenster schlie\u00dfen auch gleich die Nachricht submit form . Es werden also beide Ereignisse ausgel\u00f6st, wovon das Submit -Ereignis das neuladen der Seite nach sich zieht. Wenn Sie nun f\u00fcr den Button wieder onclick=\"register()\" vereinbaren, dann sehen Sie, dass die Werte auf die Konsole ausgegeben werden und das alert -Fenster f\u00fcr das Formular erscheint. Nachdem Sie das Fenster schlie\u00dfen, wird die Seite neu geladen und die Konsole wird gel\u00f6scht. Wir verhindern dieses neuladen, indem wir f\u00fcr das Formular onsubmit=\"return false;\" definieren. Dann wird das Neuladen der Seite verhindert. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 < script > function register () { let fname = document . querySelector ( '#firstname' ). value ; let lname = document . querySelector ( '#lastname' ). value ; let email = document . querySelector ( '#email' ). value ; let ipadr = document . querySelector ( '#ipaddress' ). value ; console . log ( fname ); console . log ( lname ); console . log ( email ); console . log ( ipadr ); } < /script> Eine andere M\u00f6glichkeit w\u00e4re gewesen, der register() -Funktion das ausl\u00f6sende Event als Objekt zu \u00fcbergeben (wird dann automatisch \u00fcbergeben) und f\u00fcr dieses Event die preventDefault() -Funktion aufzurufen: 46 < button class = \"btn btn-success\" type = \"submit\" onclick = \"register(event)\" > Registrieren </ button > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 function register ( event ) { let fname = document . querySelector ( '#firstname' ). value ; let lname = document . querySelector ( '#lastname' ). value ; let email = document . querySelector ( '#email' ). value ; let ipadr = document . querySelector ( '#ipaddress' ). value ; console . log ( fname ); console . log ( lname ); console . log ( email ); console . log ( ipadr ); event . preventDefault (); } Zur Funktion preventDefault() siehe hier .","title":"Auslesen der Werte in Formularen"},{"location":"javascript/#elemente-hinzufugen-und-loschen","text":"Nun wollen wir den DOM insofern manipulieren, als dass wir zun\u00e4chst Objekte hinzuf\u00fcgen. Die wichtigsten Funktionen daf\u00fcr sind: document.createElement('tag') - Element erzeugen document.createTextNode(\"text\") - Textelement erzeugen node.appendChild(childNode) - Element childNode dem Knoten node als direktes (letztes) Kind hinzuf\u00fcgen node.removeChild(childNode) - Kind childNode des Elementes node l\u00f6schen node.replaceChild(newNode, oldNode) - Kind oldNode des Knotens node durch newNode ersetzen node.insertBefore(newNode, oldNode) - Kind newNode des Knotens node vor das Kind oldNode des Knotens node einf\u00fcgen","title":"Elemente hinzuf\u00fcgen und l\u00f6schen"},{"location":"javascript/#create","text":"Wir betrachten wieder ein einfaches Beispiel: Im HTML-Code sehen wir ein <input> -Element und eine Liste <ul> , die bereits 2 Listitems <li> enth\u00e4lt. Dem <input> -Element wurde ein change -Listener hinzugef\u00fcgt. Sobald sich der Wert in dem <input> -Element ge\u00e4ndert hat, wird dieses Ereignis ausgel\u00f6st und die Funktion addItem() aufgerufen. Dieser Funktion wird das <input> -Element als Parameter \u00fcbergeben. In dieser Funktion wird zuerst ein Textknoten erzeugt ( let textNode = document.createTextNode(text); ) Der text ist der Wert value des <input> -Elementes. Au\u00dferdem wird ein <li> -Knoten (Objekt) erzeugt ( let liNode = document.createElement('li'); ). An diesen <li> -Knoten wird der Textknoten angeh\u00e4ngt ( liNode.appendChild(textNode); ). Danach wird an die <ul> -Liste der <li> -Knoten (mit dem Textknoten) angeh\u00e4ngt ( ulNode.appendChild(liNode); ). Das neue List-item erscheint sofort als letztes Kind in der Liste. Im folgenden Beispiel passiert das gleiche, nur wird das neu erzeugte List-Item nicht hinten an die Liste angeh\u00e4ngt, sondern vorne eingef\u00fcgt: Tats\u00e4chlich \u00e4ndert sich daf\u00fcr nur die letzte Anweisung in der Funktion. Aus ulNode.appendChild(liNode); wird ulNode.insertBefore(liNode, ulNode.childNodes[0]); . Mit ulNode.childNodes[0] greifen wir auf das erste Kind des ulNode zu. Das h\u00e4tten wir auch durch ulNode.firstChild haben k\u00f6nnen.","title":"Create"},{"location":"javascript/#clone","text":"Eine weitere M\u00f6glichkeit, ein Element zu erzeugen, ist durch clonen eines anderen Knotens (Elementes). Der Vorteil des Clonens besteht darin, dass ein gesamter Unterbaum eines Elementes mitkopiert werden kann. Die Syntax f\u00fcr das Clonen eines Knotens node ist nod.cloneNode(deep) . Wenn deep true ist, werden auch alle Kindelemente geklont, wenn false , dann nur das Element selbst. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Clone </ title > </ head > < body > < img src = \"./images/fiw.jpg\" ondblclick = \"cloneFunc(this)\" class = \"rounded mx-auto d-block\" style = \"width: 150px;\" alt = \"fiw\" /> < div id = \"div1\" ></ div > < script > function cloneFunc ( obj ) { let imgClone = obj . cloneNode ( true ); let divNode = obj . nextElementSibling ; console . log ( divNode ); // inspizieren Sie die Konsole in den DevTools divNode . appendChild ( imgClone ); } </ script > </ body > </ html > Im obigen Beispiel verwenden wir Bootstrap und f\u00fcr das <img> -Element einige Bootstrap-Klassen (haupts\u00e4chlich, damit es in der Mitte ist). Wenn wir auf das Bild Doppelklicken ( dblclick ), wird die Funktion cloneFunc() aufgerufen, der wir das img -Objekt \u00fcbergeben. In der Funktion clonen wir das Bild (hier ist es egal, ob deep clone oder nicht, da das img -Element keine Kindknoten hat). Der Clone wird dem div -Element als Kind hinzugef\u00fcgt. Durch jeden Doppelklick auf das Bild wird ein weiterer Clone dem <div> -Element hinzugef\u00fcgt.","title":"Clone"},{"location":"javascript/#addeventlistener","text":"Eigentlich ist die Verwendung der Attribute onEvent nicht optimal, da die Trennung zwischen HTML und JavaScript nicht gro\u00df genug ist. Wir erinnern uns, wir wollen eine Trennung in die Zust\u00e4ndigkeiten: HTML f\u00fcr den Inhalt, CSS f\u00fcr das Layout und JavaScript f\u00fcr das Verhalten. Besser ist es, die Event-Listener ebenfalls durch JavaScript hinzuzuf\u00fcgen und nicht durch HTML-Attribute. Wir erweitern unser obiges Clone-Beispiel zun\u00e4chst wie folgt (hinzugekommener Code hervorgehoben): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Clone </ title > </ head > < body > < img src = \"./images/fiw.jpg\" ondblclick = \"cloneFunc(this)\" class = \"rounded mx-auto d-block\" style = \"width: 150px;\" alt = \"fiw\" /> < div id = \"div1\" ></ div > < script > function cloneFunc ( obj ) { let imgClone = obj . cloneNode ( true ); let divNode = obj . nextElementSibling ; divNode . addEventListener ( \"click\" , removeFunc ); console . log ( divNode ); // inspizieren Sie die Konsole in den DevTools divNode . appendChild ( imgClone ); } function removeFunc ( event ) { let obj = event . target ; console . log ( obj ); let parent = obj . parentElement ; console . log ( parent ); parent . removeChild ( obj ); } </ script > </ body > </ html > In Zeile 17 melden wir unseren geklonten Knoten an den Event-Listener f\u00fcr das click -Ereignis an. Wird auf das Bild geklickt, dann wird die Funktion removeFunc() aufgerufen. Beachten Sie, dass der erste Parameter der addEventListener() -Funktion das Ereignis click ist (und nicht das HTML-Attribut onClick ) und dass der zweite Parameter die Referenz auf die Funktion removeFunc ist, nicht der Aufruf der Funktion. W\u00fcrden wir dort anstelle von removeFunc removeFunc() schreiben, entspr\u00e4che das dem Aufruf der Funktion und diese w\u00fcrde bei Aufruf der Funktion addEventListener() sofort ausgef\u00fchrt. Beachten Sie au\u00dferdem, dass bei der Funktionsdefinition von removeFunc() das ausgel\u00f6ste Event event als Parameter \u00fcbergeben wird. Dies passiert automatisch (also immer). Wenn wir den Parameter benennen, dann k\u00f6nnen wir auf dieses Ereignis zugreifen. Das machen wir auch, n\u00e4mlich in Zeile 24 , wo wir das target des Events abfragen, also das das Ereignis ausl\u00f6sende Element (unser jeweiliges <img> ). Die console.log() -Aufrufe sind jeweils nur zum Debuggen bzw. Inspizieren. Es gibt zwei JavaScript-Funktionen zum L\u00f6schen eines Elementes: parent.removeChild(child) - das Elternelement parent ruft die Funktion auf und l\u00f6scht das \u00fcbergebene Kind child node.remove() - ein Knoten (Element) ruft f\u00fcr sich selbst die remove() -Funktion auf und l\u00f6scht sich also selbst Wir haben im obigen Abschnitt die erste Variante gew\u00e4hlt, um zu zeigen, wie der Elternknoten ermittelt werden kann. Man h\u00e4tte aber auch auf Zeile 26 verzeichten und in Zeile 28 einfach obj.remove() schreiben k\u00f6nnen.","title":"addEventListener"},{"location":"javascript/#beispiel-vollstandig-mit-javascript-erzeugt","text":"Das soeben gezeigte Beispiel soll nun exemplarisch vollst\u00e4ndig durch JavaScript erzeugt werden. Wir verwenden genau ein Event-Attribut, n\u00e4mlich onload , das wir dem body zuweisen. Das load -Event wird aufgerufen, sobald die Seite vollst\u00e4ndig geladen ist. Ist die (leere) Seite vollst\u00e4ndig geladen, wird die Funktion createAllElements() aufgerufen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"stylesheet\" href = \"https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css\" integrity = \"sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2\" crossorigin = \"anonymous\" > < title > Clone </ title > </ head > < body onload = \"createAllElements()\" > < script > function cloneFunc ( event ) { let obj = event . target ; let imgClone = obj . cloneNode ( true ); let divNode = obj . nextElementSibling ; divNode . addEventListener ( \"click\" , removeFunc ); console . log ( divNode ); // inspizieren Sie die Konsole in den DevTools divNode . appendChild ( imgClone ); } function removeFunc ( event ) { let obj = event . target ; console . log ( obj ); let parent = obj . parentElement ; console . log ( parent ); parent . removeChild ( obj ); } function createAllElements () { let imgNode = document . createElement ( 'img' ); imgNode . src = \"./images/fiw.jpg\" ; imgNode . classList . add ( \"rounded\" , \"mx-auto\" , \"d-block\" ); imgNode . style . width = \"150px\" ; imgNode . alt = \"fiw\" ; imgNode . addEventListener ( \"dblclick\" , cloneFunc ); let divNode = document . createElement ( 'div' ); divNode . id = \"div1\" ; let scriptNode = document . getElementsByTagName ( 'script' )[ 0 ]; document . body . insertBefore ( imgNode , scriptNode ); document . body . insertBefore ( divNode , scriptNode ); } </ script > </ body > </ html > Hervorgehoben sind wieder die Zeilen, in dennen sich etwas ge\u00e4ndert hat. Zeile 10 : Der <body> enth\u00e4lt nun nur noch ein <script> -Element. Ansonsten keine weiteren HTML-Elemente. Zeile 12 : Der Funktion cloneFunc() kann nun nicht mehr das img -Objekt selbst \u00fcbergeben werden (da wir in addEventListener() nur die Referenz auf die Funktion \u00fcbergeben). Deswegen verwenden wir auch hier wieder das automatisch \u00fcbergebene event und ermitteln das target des ausgel\u00f6sten Ereignisses (Zeile 14 ). Zeilen 31-46 : Die Funktion createAllElements() erzeugt zun\u00e4chst ein img -Knoten mit allen erforderlichen Attributen. Au\u00dferdem wird dieser Knoten auch noch an das dblclick -Ereignis angemeldet und die Referenz auf die Funktion cloneFunc als Event-Handler \u00fcbergeben. In Zeile 44 wird dieser img -Knoten dem <body> hinzugef\u00fcgt, und zwar vor dem <script> -Element. Au\u00dferdem wird noch unser <div> mit der id=\"div1\" erzeugt und ebenfalls vor dem <script> -Element (und hinter das <img> -Element) eingef\u00fcgt. Es entsteht die exakt gleiche Webseite wie in dem Beispiel davor (siehe Beispiel aus addEventListener ).","title":"Beispiel vollst\u00e4ndig mit JavaScript erzeugt"},{"location":"javascript/#javascript-sprachelemente","text":"","title":"JavaScript - Sprachelemente"},{"location":"javascript/#var-let-und-const","text":"Mithilfe der Schl\u00fcsselw\u00f6rter var , let und const k\u00f6nnen in JavaScript Variablen deklariert werden. Wenn Sie eine Variable mit var deklarieren, dann ist diese Variable innerhalb der gesamten Funktion, in der Sie die Variable deklarieren, g\u00fcltig. Dagegen hat let nur eine Blockg\u00fcltigkeit , d.h. eine mit let deklarierte Variable ist nur in dem Anweisungsblock g\u00fcltig, in dem sie deklariert wurde. Eine mit let deklarierte Variable verh\u00e4lt sich also wie eine in Java deklarierte Variable. const wird zur Deklaration von Konstanten verwendet. Es ist zu bachten: Falls es sich bei der mit const deklarierten Konstante um eine Referenzvariable handelt (also auf ein Objekt oder Array zeigt), dann kann diese Variable ihre Referenz zwar nicht mehr \u00e4ndern, das jeweilige Objekt, auf das die Variable (konstant) zeigt, kann sich aber schon \u00e4ndern. Globale Variablen, also Variablen, die von allen Funktionen geteilt werden (in allen Funktionen genutzt werden k\u00f6nnen), werden au\u00dferhalb der Funktionen deklariert. Man sollte nur sehr selten globale Variablen einsetzen, da sie in allen anderen Funktionen (auch externen) \u00fcberschrieben werden k\u00f6nnen. Bl\u00f6derweise ist eine Variable auch dann global, wenn sie ohne eines der genannten Schl\u00fcsselw\u00f6rter ( var , let und const ) innerhalb einer Funktion \"deklariert\" wurde. Das geschieht meistens durch eine Wertzuweisung in der Annahme, dass die Variable bereits deklariert wurde. Eine solche unbeabsichtigte Erstellung einer globalen Variable sollte vermieden werden - die absichtliche erst recht. Wenn globale Variable, dann die Deklaration au\u00dferhalb aller Funktionen.","title":"var, let und const"},{"location":"javascript/#objekte","text":"Objekte in JavaScript werden in JavaScript Object Notation beschrieben. Wir werden darauf noch genauer eingehen , zeigen hier aber schonmal ein einfaches Beispiel zur Einf\u00fchrung: let person = { vorname : \"Maria\" , nachname : \"Musterfrau\" }; Es wurde eine person definiert mit 2 Feldern vorname und nachname und diesen Feldern wurden Werte zugewiesen. Der Zugriff auf die Felder erfolgt mittels Punkt-Notation, also person.vorname und person.nachname . Sie k\u00f6nnen die Werte auch einfach \u00fcberschreiben, z.B. person.nachname = \"Schmidt\" . Sie k\u00f6nnen das Objekt auch um weitere Eigenschaften erweitern, z.B. person.alter = 42 . Neben der \u00fcblichen Punktnotation ist auch zu erw\u00e4hnen, dass die Eigenschaften auch Schl\u00fcssel eines assoziativen Arrays sind, d.h. Sie k\u00f6nnen auf die Werte auch wie folgt zugreifen: person [ \"vorname\" ] // Maria person [ \"nachname\" ] // Schmidt person [ \"alter\" ] // 42 Mithilfe von delete k\u00f6nnen Eigenschaften gel\u00f6scht werden, z.B. delete person.alter; . Ab dann ist person.alter undefined . Objekteigenschaften k\u00f6nnen auch Funktionen sein, z.B. person . name = function (){ return this . vorname + \" \" + this . nachname }; Der Aufruf erfolgt dann \u00fcber person.name();","title":"Objekte"},{"location":"javascript/#arrays","text":"Arrays in JavaScript werden fast genauso behandelt wie in Java. Hier ein Beispiel: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Arrays </ title > </ head > < body > < h2 > JavaScript Arrays </ h2 > < p id = \"demo\" ></ p > < script > let sgs = [ \"FIW\" , \"AI\" , \"IMI\" , \"WI\" ]; let lange = sgs . length ; text = \"<ul>\" ; for ( let i = 0 ; i < sgs . length ; i ++ ) { text += \"<li>\" + sgs [ i ] + \"</li>\" ; } text += \"</ul>\" ; document . getElementById ( \"demo\" ). innerHTML = text ; </ script > </ body > </ html > In Zeile 12 wird das Array sgs (soll Studieng\u00e4nge hei\u00dfen - immer sprechende Namen verwenden ;-) definiert. Es enth\u00e4lt lauter Strings. In JavaScript k\u00f6nnen die Elemente eines Arrays von verschiedenen Typen sein. In Zeile 16 definieren wir die for -Schleife, mit der wir durch das Array laufen (ist genau so numerisch indiziert, wie wir das von Java kennen). Wir greifen \u00fcber die Index-Schreibweise sgs[i] auf alle Elemente des Arrays zu (Zeile 17 ). Das Array kann auch aus Objekten bestehen. Angenommen, das Array sieht so aus: var staedte = [ { \"jahr\" : 1237 , \"stadt\" : \"Berlin\" , \"link\" : \"http://de.wikipedia.org/wiki/Berlin\" , \"bild\" : \"images/berlin.png\" }, { \"jahr\" : 1624 , \"stadt\" : \"New York\" , \"link\" : \"http://de.wikipedia.org/wiki/New_York_City\" , \"bild\" : \"images/newyork.png\" }, { \"jahr\" : 1252 , \"stadt\" : \"Stockholm\" , \"link\" : \"http://de.wikipedia.org/wiki/Stockholm\" , \"bild\" : \"images/stockholm.png\" }, { \"jahr\" : 852 , \"stadt\" : \"Madrid\" , \"link\" : \"http://de.wikipedia.org/wiki/Madrid\" , \"bild\" : \"images/madrid.png\" }, { \"jahr\" : 1827 , \"stadt\" : \"Bremerhaven\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremerhaven\" , \"bild\" : \"images/bremerhaven.png\" }, { \"jahr\" : 150 , \"stadt\" : \"Bremen\" , \"link\" : \"http://de.wikipedia.org/wiki/Bremen\" , \"bild\" : \"images/bremen.png\" }, { \"jahr\" : 1202 , \"stadt\" : \"Bernau\" , \"link\" : \"http://de.wikipedia.org/wiki/Bernau_bei_Berlin\" , \"bild\" : \"images/bernau.png\" }, { \"jahr\" : 929 , \"stadt\" : \"Brandenburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Brandenburg_an_der_Havel\" , \"bild\" : \"images/brandenburg.png\" }, { \"jahr\" : 805 , \"stadt\" : \"Magdeburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Magdeburg\" , \"bild\" : \"images/magdeburg.png\" }, { \"jahr\" : 1222 , \"stadt\" : \"Marburg\" , \"link\" : \"http://de.wikipedia.org/wiki/Marburg\" , \"bild\" : \"images/marburg.png\" }, { \"jahr\" : 766 , \"stadt\" : \"Mannheim\" , \"link\" : \"http://de.wikipedia.org/wiki/Mannheim\" , \"bild\" : \"images/mannheim.png\" }, { \"jahr\" : 782 , \"stadt\" : \"Mainz\" , \"link\" : \"http://de.wikipedia.org/wiki/Mainz\" , \"bild\" : \"images/mainz.png\" } ]; Dann sind die Elemente des Arrays numerisch indiziert.","title":"Arrays"},{"location":"javascript/#javascript-ist-dynamisch-typisiert","text":"Im Gegensatz zu z.B. Java ist JavaScript nicht statisch, sondern dynamisch typisiert. Der Wert einer Variablen bestimmt deren Typ. Beispiel: var number = 16 ; // number var name = \"Johnson\" ; // string var cars = [ \"Saab\" , \"Volvo\" , \"BMW\" ]; // object (Array) var obj = { firstName : \"John\" , lastName : \"Doe\" }; // object var func = new Function (); // function var correct = true ; // boolean var x ; // now x is undefined var x = 5 ; // now x is a Number var x = \"John\" ; // now x is a String typeof kann verwendet werden, ob zu \u00fcberpr\u00fcfen, ob eine Variable \u00fcberhaupt definiert ist und/oder von welchem Typ sie ist. Es liefert folgende Resultate: undefined boolean function number object string symbol Beispiel: < div id = \"myDiv\" ></ div > < script > var x ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // undefined x = \"12\" ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // string x = 12 ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // number x = 12.12 ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // number x = true ; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // boolean x = function (){ alert ( \"Funktion\" );}; document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // function x = new Function ( \"alert('Funktion')\" ); document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // function x = new Object (); document . getElementById ( \"myDiv\" ). innerHTML += typeof ( x ) + \"<br/>\" ; // object </ script >","title":"JavaScript ist dynamisch typisiert"},{"location":"javascript/#funktionen","text":"Die Definition von Funktionen in JavaScript erfolgt \u00fcber das Schl\u00fcsselwort function . Wir haben oben bereits mehrere Beispiele f\u00fcr Funktionen gezeigt. Hier ein weiteres: < p id = \"demo\" ></ p > < script > function myFunction ( a , b ) { return a * b ; } document . getElementById ( \"demo\" ). innerHTML = myFunction ( 4 , 3 ); </ script > Es wird eine Funktion myFunction() definiert, der 2 Parameter a und b \u00fcbergeben werden. Die Funktion berechnet das Produkt aus a und b und gibt dieses mithilfe von return zur\u00fcck. Der zur\u00fcckgegebene Wert wird als Inhalt des Absatzes <p> mit der id=\"demo\" verwendet. myFunction(4, 3); ist der Aufruf der Funktion. Au\u00dferdem k\u00f6nnen Funktionen als anonyme Funktionen deklariert werden. Es ist m\u00f6glich, dass eine Variable auf eine (anonyme) Funktion zeigt. Diese Variable kann dann wie die Funktion selbst verwendet werden. Beispiel: var x = function ( a , b ) { return a * b }; Die Funktion kann nun \u00fcber z.B. x(4,3); aufgerufen werden. Eine weitere (aber selten verwendete) M\u00f6glichkeit, eine Funktion zu definieren, ist die Verwendung des Function() -Konstruktors. Beispiel: var myFunction = new Function ( \"a\" , \"b\" , \"return a * b\" ); Diese Funktion kann dann (wie oben mit x ) mit myFunction(4,3); aufgerufen werden. Aber, wie gesagt, das ist eher un\u00fcblich, denn es ist \u00e4quivalent zu: var myFunction = function ( a , b ) { return a * b }; mit dem Aufruf myFunction(4,3); . Die Verwendung des Function() -Konstruktors zeigt aber, dass jede Funktion vom Typ function ist. In JavaScript gibt es also einen Typ function . W\u00fcrde man f\u00fcr das Beispiel mit x z.B. typeof(x) aufrufen, ist das Resultat function .","title":"Funktionen"},{"location":"javascript/#variable-anzahl-von-parametern","text":"Die Anzahl der Parameter kann, muss aber nicht in der Funktionsdefinition angegeben werden. Es geht immer (auch wenn eine feste Anzahl von Parametern angegeben wurde): function summe () { var i , sum = 0 ; for ( i = 0 ; i < arguments . length ; i ++ ) { sum += arguments [ i ]; } return sum ; } Diese Funktion kann jetzt mit beliebig vielen Parametern aufgerufen werden: summe ( 1 , 2 , 3 , 4 , 5 , 6 ); summe ( 1 , 2 , 3 );","title":"Variable Anzahl von Parametern"},{"location":"javascript/#arrow-funktionen","text":"Arrow-Funktionen werden auch als Lambda-Ausdr\u00fccke bezeichnet. Eine Arrow-Funktion ist eine Kurzschreibweise f\u00fcr eine anonyme Funktion. Anstelle von function() schreibt man nur noch einen Pfeil. Enth\u00e4lt die anonyme Funktion sogar nur ein Argument (Parameter), kann man links vom Pfeil sogar die runden Klammern weglassen. Auch die geschweiften Klammern des Funktionsk\u00f6rpers k\u00f6nnen entfallen. Wenn die geschweiften Klammwern weggelassen werden, dann entspricht die rechte Seite des Pfeils dem R\u00fcckgabewert der Funktion, d.h. es kann sogar return weggelassen werden. Folgende Funktionsdefinitionen sind \u00e4quivalent: function ( foo ) = { return foo + 1 ;} ( foo ) => { return foo + 1 ;} foo => { return foo + 1 ;} foo => foo + 1 ;","title":"Arrow-Funktionen"},{"location":"javascript/#callback-funktionen","text":"Eine Callback -Funktion ist eine Funktion, die einer anderen Funktion als Parameter \u00fcbergeben wird. Callback-Funktionen sind z.B. hier erl\u00e4utert. Darin finden Sie auch das folgende einfache Beispiel einer Callback-Funktion: 1 2 3 4 5 6 7 8 9 10 function greeting ( name ) { alert ( 'Hello ' + name ); } function processUserInput ( callback ) { var name = prompt ( 'Please enter your name.' ); callback ( name ); } processUserInput ( greeting ); In den Zeilen 1-3 wird eine Funktion greeting() definiert, welche einen name erwartet. Diese Funktion gibt Hello zusammen mit dem Namen in einem Alarmfenster aus. Die Funktion greeting() wird als Callback -Funktion in der Funktion processUserInput() (Zeilen 5-8) verwendet. Das hei\u00dft, die Funktion greeting() wird der Funktion processUserInput() als Parameter \u00fcbergeben. Innerhalb der Funktion processUserInput() hei\u00dft die Referenz auf die Funktion greeting() callback . Der Parametername kann beliebig gew\u00e4hlt werden. Wir die Funktion processUserInput() aufgerufen (Zeile 10) und die Funktion greeting() als Parameter \u00fcbergeben, dann erscheint zun\u00e4chst ein Eingabefenster, in dem der Name eingeben wird und dieser Name wird der greeting() -Funktion als Parameter \u00fcbergeben. Es erscheint das Alarmfenster mit der Ausgabe Hello plus dem Namen. Der Funktion processUserInput() k\u00f6nnte auch jede andere Funktion als Callback-Funktion \u00fcbergeben werden.","title":"Callback-Funktionen"},{"location":"javascript/#promises","text":"Eine Promise ist das Ergebnis einer asynchronen Operation. Es gibt vier Status einer Promis (uns interessiert in der Regel nur resolved oder rejected ): Status Erkl\u00e4rung pending die Promise wartet noch auf die Beendigung der asynchronen Operation settled die asynchrone Operation wurde beendet resolved die asynchrone Operation wurde erfolgreich beendet rejected die asynchrone Operation ist fehlgeschlagen Um das Prinzip einer Promise zu erl\u00e4utern, schauen wir uns ein Beispiel aus Node.js \u2192 Eine Movie-Datenbank an: function getAll () { return new Promise (( resolve , reject ) => { const query = 'SELECT * FROM Movies' ; connection . query ( query , ( error , results ) => { if ( error ) reject ( error ); else resolve ( results ); }) }); } Die Funktion getAll() gibt eine Promise zur\u00fcck. Diese wird mit dem Konstruktor erzeugt. Dem Konstruktor wird eine Callback-Funktion \u00fcbergeben. Hier ist diese Funktion die Anfrage an die Datenbank connection.query() . Diese Funktion ist asynchron, d.h. sie wird ausgef\u00fchrt, ohne dass andere Funktionsaufrufe stoppen m\u00fcssen. Man kann auch sagen, dass die Promise die asynchrone Funktion kapselt . Die asynchrone Funktion enth\u00e4lt ebenfalls eine Callback-Funktion. Hier wurden als Parameternamen der Callback-Funktion error und results gew\u00e4hlt. Der erste Parameter wirft einen Fehler, wenn die asynchrone Funktion fehlschl\u00e4gt, der zweite Parameter enth\u00e4lt die Daten bei Erfolg. Mit reject gibt man den Fehler zur\u00fcck (im Fehlerfall) und mit resolve die Daten (im Erfolgsfall). return new Promise() Wir merken uns also: die getAll() -Funktion gibt ein Promise -Objekt zur\u00fcck. Wie kann eine solche Promise nun verwendet werden? Dazu schauen wir uns erneut das Beispiel aus Node.js \u2192 Eine Movie-Datenbank an: function listAction ( request , response ) { model . getAll (). then ( movies => response . send ( view ( movies )), error => response . send ( error ), ); } Der entscheidende Punkt ist, dass ein Promise-Objekt eine then -Methode besitzt. Dieser then -Methode k\u00f6nnen wiederum zwei Callback-Funktionen \u00fcbergeben werden. Die erste Funktion wird durch die resolve -Funktion der Promise aufgerufen, die zweite Funktion, falls die Promise die reject -Funktion aufruft. Werden der resolve - und der reject -Funktion Argumente \u00fcbergeben (so wie oben resolve(results) und reject(error) ), dann k\u00f6nnen diese Argumente in der jeweiligen Callback-Funktion ausgewertet werden ( results \u2192 movies bzw. error \u2192 error ). Die then -Funktion selbst gibt \u00fcbrigens wieder ein Promise -Objekt zur\u00fcck. Somit k\u00f6nnen mehrere Promises verkettet werden.","title":"Promises"},{"location":"rwd/","text":"Responsive Web Design \u00b6 Responsive bedeutet reagierend und wenn wir von Resonsive Web Design (RWD) sprechen, dann meinen wir damit, dass wir das Layout der Webseite so gestalten, dass es auf die Gr\u00f6\u00dfe des Ausgabeger\u00e4tes \"reagiert\". Das hei\u00dft, dass wir f\u00fcr kleine (schmale) Ausgabeger\u00e4te (z.B. Mobiltelefone) ein anderes Layout (Design) w\u00e4hlen, als f\u00fcr breitere Ausgabeger\u00e4te (z.B. Tablets) und ein noch anderes Layout f\u00fcr sehr breite Ausgabeger\u00e4te (z.B. Monitore). Responsive Web Design realisieren wir haupts\u00e4chlich mit CSS. Insofern h\u00e4tte es auch gut in den Skript-Teil f\u00fcr CSS gepasst. Da dies jedoch schon so lang war, haben wir eine eigene Unterseite f\u00fcr RWD erstellt. Damit \u00fcberhaupt auf unterschiedliche Ausgabeger\u00e4te reagiert werden kann, wurde sogenannte Media Queries in CSS eingef\u00fchrt. Diese schauen wir uns deshalb zun\u00e4chst genauer an. Zuvor noch ein wichtiger Tipp! Um unsere Webseite im responsiven Design zu gestalten, m\u00fcssen wir dem Browser mitteilen, dass er die Gr\u00f6\u00dfe des Viewports (also des Ausgabefensters) ber\u00fccksichtigen soll und die Darstellung an die Gr\u00f6\u00dfe des Ger\u00e4tes anpassen muss. Dazu f\u00fcgen wir im <head> unserer Webseite von nun an immer das viewport meta tag ein und geben damit an, dass einerseits die Ausgabe an die Ger\u00e4tegr\u00f6\u00dfe angepasst werden soll und wir mit einem Zoom-Faktor von 1 starten: <!-- ab jetzt immer im <head> angeben! --> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > Media Queries \u00b6 Grob gesagt, definieren wir mithilfe von Media Queries , welche CSS-Eigenschaften f\u00fcr welche Bildschirmgr\u00f6\u00dfe gelten sollen. Das hei\u00dft, wir definieren unterschiedliche CSS-Eigenschaften f\u00fcr unterschiedliche Bildschirmgr\u00f6\u00dfen. So k\u00f6nnen wir z.B. definieren, dass f\u00fcr Bildschirmbreiten unter 480px ein einspaltiges Layout gew\u00e4hlt wird, f\u00fcr Bildschirmbreiten gr\u00f6\u00dfer als 480px , aber kleiner gleich 720px ein 2-spaltiges Layout und f\u00fcr gr\u00f6\u00dfer als 720px ein 3-spaltiges Layout. Wir betrachten Media Queries zun\u00e4chst von der syntaktischen Seite. Das ist f\u00fcr Sie vielleicht zun\u00e4chst unspannend, aber wir \u00fcberlegen dabei, was alles geht, um dann zu sagen, dass wir uns doch nur um Screens (also Minitore) und doch nur um deren Breiten k\u00fcmmern - aber es ginge noch viel mehr ;-). Syntax von Media Queries \u00b6 Media Queries k\u00f6nnen zun\u00e4chst einmal true oder false sein. Um diesen Wert zu ermitteln, wird f\u00fcr einen Medientyp ( media type ) ein Ausdruck ( expression ) ausgewertet. Die allgemeine Syntax f\u00fcr eine Media Query ist wie folgt: @media [not|only] mediatype and (expressions) { CSS-Code; } Eine Media Query beginnt immer mit @media . Dann kann ein not oder ein only kommen, muss aber nicht und wir werden es auch nicht verwenden. Danach kommt der Medientyp (sollte kein Medientyp angegeben werden, ist screen , also Monitor gemeint). Medientypen k\u00f6nnen z.B. Drucker ( print ), Monitore ( screen ), Screenreader ( speech ) oder all sein. Wir werden uns (fast) ausschlie\u00dflich mit Monitoren bzw Monitorgr\u00f6\u00dfen und damit als Medientyp screen besch\u00e4ftigen. Ein angegebener Medientyp wird mithilfe von and mit einem Ausdruck verkn\u00fcpft. Ein Ausdruck besteht aus einem media feature und einem Wert. Ein media feature ist z.B. width , min-width , max-width , height , min-height , max-height , device-width , min-device-width , max-device-width , device-height , min-device-height , max-device-height , orientation , usw. Ausdr\u00fccke ( expressions ) ergeben sich dann aus media feature und Wert, z.B. orientation: landscape , orientation: portrait , min-width: 480px , max-width: 480px , resolution: 150dpi . Beispiele von Media Queries \u00b6 Wir betrachten zun\u00e4chst einige Beispiele von Media Queries: @ media screen and ( max-width : 800px ) { /* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) h\u00f6chstens 800px breit ist */ } @ media only screen and ( min-width : 320px ) and ( max-width : 480px ) and ( min-resolution : 150dpi ) { /* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) mindestens 320px und h\u00f6chstens 480px breit ist und mindestens eine Aufl\u00f6sung von 150dpi besitzt */ } Seit Media Queries Level 4 kann man auch direkt schreiben: @ media ( 320px <= width <= 480px ) and ( min-resolution : 150dpi ) { /* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) mindestens 320px und h\u00f6chstens 480px breit ist und mindestens eine Aufl\u00f6sung von 150dpi besitzt */ } @ media ( orientation : portrait ) { /* hier die CSS-Eigenschaften f\u00fcr hochformatige Ausgabemedien */ } @ media ( orientation : landscape ) { /* hier die CSS-Eigenschaften f\u00fcr querformatige Ausgabemedien */ } Erstes Beispiel \u00b6 Wir versuchen, zun\u00e4chst immer mobile first zu designen, d.h. wir geben zun\u00e4chst die CSS-Eigenschaften an, die f\u00fcr mobile Ger\u00e4te (schmaler Viewport) gelten und f\u00fcgen dann Media Queries hinzu, die f\u00fcr gr\u00f6\u00dfere Ausgabebreiten Anwendung finden soll. Hier ein erstes Beispiel: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > Media Queries </ title > < style > div { margin : auto ; width : 100 % ; height : 100 % ; text-align : center ; background-color : red ; padding-top : 20 % ; padding-bottom : 20 % ; font-size : medium ; } @ media screen and ( min-width : 800px ) { div { background-color : green ; color : yellow ; font-size : large ;; } } @ media screen and ( min-width : 1200px ) { div { background-color : blue ; color : white ; font-size : xx-large ; } } @ media screen and ( orientation : portrait ) { div { writing-mode : vertical - rl ; text-orientation : mixed ; background-color : yellow ; color : brown ; } } </ style > </ head > < body > < div > \u00c4ndern Sie die Breite des Browsers, um den Effekt zu sehen. </ div > </ body > </ html > Der HTML-Code ist kurz: wir erstellen ein <div> , welches einen Text enth\u00e4lt. Im <style> -Element definieren wir f\u00fcr dieses <div> , dass der Text zentriert sein soll (vertikal, also von links nach rechts betrachtet) und dass nach oben und unten ein Abstand zum Rand von jeweils 20% der Viewport-H\u00f6he eingehalten werden soll. Dadurch wird das <div> einigerma\u00dfen hoch (weil <div> ein Block-Element ist, geht es sowieso \u00fcber die gesamte Breite). Au\u00dferdem legen wir fest, dass der Hintergrund rot und die Schriftgr\u00f6\u00dfe medium sein soll. Unsere erste Media Query definiert f\u00fcr eine Mindestbreite des Viewports von 800px , dass der Hintergrund nun gr\u00fcn, die Schriftfarbe gelb und die Schriftgr\u00f6\u00dfe large sein soll. Die zweite Media Query definiert f\u00fcr eine Mindestbreite des Viewports von 1200px , dass der Hintergrund blau, die Schriftfarbe wei\u00df und die Schriftgr\u00f6\u00dfe xx-large sein soll. Wenn wir die Seite im Browser aufrufen, wird nun abh\u00e4ngig von der Gr\u00f6\u00dfe des Viewports eine der drei folgenden Ansichten gezeigt: \u00c4ndern Sie die Gr\u00f6\u00dfe der Browserbreite, um alle drei Ansichten zu sehen. Die dritte Media Query definiert eine eigene Ansicht f\u00fcr den Fall, dass die H\u00f6he des Viewports gr\u00f6\u00dfer ist als die Breite ( orientation: portrait ). Sie k\u00f6nnen diese Ansicht erreichen, indem Sie den Browser m\u00f6glichst schmal machen oder Sie nutzen die Developer Tools Ihres Browsers und \"drehen\" Ihr Ger\u00e4t. Zweites Beispiel \u00b6 Wir wollen uns noch ein zweites Beispiel anschauen. Dieses Beispiel zeigt bereits das Prinzip, auf dem das sogenannte Grid-Konzept beruht, welches in CSS-Frameworks verwendet wird. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > Responsive Webdesign </ title > < style > . small { float : left ; width : 98 % ; padding : 1 % ; } @ media screen and ( min-width : 800px ) { . medium { float : left ; width : 48 % ; padding : 1 % ; } } @ media screen and ( min-width : 1200px ) { . large { float : left ; width : 23 % ; padding : 1 % ; } } </ style > </ head > < body > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > </ body > </ html > Der HTML-Code ist wieder einfach gehalten. Wir haben vier <p> -Elemente, die einen Text enthalten und denen jeweils drei Klassen zugeordnet sind: small , medium und large . In den CSS-Definitionen (siehe <style> -Element) definieren wir zun\u00e4chst Eigenschaften f\u00fcr die Klasse small . Wir geben dort zwar float:left an, das ist aber eigentlich unsinnig, da die Breite jedes einzelnen Absatzes 100% der Breite des Viewports ist ( widt: 98% + 2x padding: 1% ). Es w\u00fcrde dort auch gen\u00fcgen, wenn wir einfach nur padding: 1% definieren w\u00fcrden. Wichtiger sind die Definitionen in den beiden Media Queries. F\u00fcr eine Viewport-Breite zwischen 800px und 1199px definieren wir die Klasse medium so, dass jedes Element, dem diese Klasse zugeordnet ist (hier alle <p> -Elemente) umflossen werden kann ( float: left ) und eine Breite von 50% des Viewports einnimmt. Das f\u00fchrt dazu, dass dann zwei Abs\u00e4tze nebeneinander passen. F\u00fcr eine Viewport-Breite gr\u00f6\u00dfer als 1199px definieren wir die Klasse large so, dass jedes Element, dem diese Klasse zugeordnet ist (hier alle <p> -Elemente) umflossen werden kann ( float: left ) und eine Breite von 25% des Viewports einnimmt. Das f\u00fchrt dazu, dass dann vier Abs\u00e4tze nebeneinander passen. F\u00fchren Sie das Beispiel aus und \u00e4ndern Sie Ihre Browserbreite, dann werden Sie den Effekt sehen: Eine Anmerkung noch: Sie stellen sich vielleicht die Frage, warum z.B. bei einer Viewportbreite von mehr als 1200px die Definition der Klasse large wirkt, nicht jedoch die Definitionen der Klassen small und medium . Wenn wir uns an die Gewichtung der Selektoren erinnern, dann sollten alle drei Definitionen gleichgewichtet sein, denn es ist jeweils eine Klasse betroffen. Es steht als jeweils in Kategorie A eine 0 ( style -Attribut), in Kategorie B eine 0 (keine id ), in Kategorei C eine 1 (eine Klasse) und in Kategorie D eine 0 (kein Element). Tats\u00e4chlich sind auch alle drei Definitionen gleichgewichtet. Hier entscheidet jetzt tats\u00e4chlich die Reihenfolge der Definitionen und da zuerst small definiert wird, dann medium und dann large , wirkt large am st\u00e4rksten, wenn alle drei Klassen definiert sind. Das hei\u00dft auch, Sie d\u00fcrfen nicht zuerst mit der Media Query f\u00fcr gro\u00dfe Viewports beginnen, dann die Media Query f\u00fcr mittlere Viewports und erst dann die small -Definition, denn dann w\u00fcrde es nicht funktionieren. CSS-Frameworks \u00b6 F\u00fcr gr\u00f6\u00dfere Webanwendungen m\u00fcssen wir keine eigenen CSS-Definitionen schreiben, sondern k\u00f6nnen auf CSS-Frameworks zur\u00fcckgreifen, die ein einheitliches und mordernes Aussehen f\u00fcr Webanwendungen zur Verf\u00fcgung stellen. In diesen Frameworks wurden viele Klassen definiert und wir k\u00f6nnen unter Verwendung eines solchen Frameworks unseren HTML-Elementen gezielt Klassen zuweisen, die dann das Aussehen dieses Elementes beeinflussen. Einige solcher Frameworks haben bereits eine hohe Verbreitung: Bootstrap SemanticUI Materialize CSS Foundation Einen \u00dcberblick \u00fcber bekannte CSS-Frameworks finden Sie z.B. hier und hier . Wir erl\u00e4utern hier die Verwendung eines solchen Frameworks anhand von Bootstrap. Bootstrap \u00b6 Um Bootstrap zu verwenden, haben Sie zun\u00e4chst die Wahl zwischen der Verwendung eines Content Delivery Networks (CDN) oder dem Download der externen Bootstrap-CSS-Datei. Wenn Sie ein CDN verwenden, dann werden die Quellen in dem Moment geladen, in dem Sie die Webseite aufrufen. Der <head> Ihrer HTML-Datei sieht dann so aus: < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link href = \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel = \"stylesheet\" integrity = \"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin = \"anonymous\" > < title > Title </ title > </ head > Den entsprechenden Link zum CDN finden Sie auf der Bootstrap-Webseite . Sie k\u00f6nnen die CSS-Dateien aber auch herunterladen. Auf der Download Bootstrap-Webseite klicken Sie unter \"Compiled CSS and JS\" auf den \"Download\"-Button. Sie erhalten eine Datei bootstrap-5.1.3-dist.zip . Entpacken Sie diese Datei. Der entstehende Ordner enth\u00e4lt 2 Unterordner css und js . Letzterer enth\u00e4lt JavaScript-Dateien des Frameworks. Diese ben\u00f6tigen wir f\u00fcr unsere Zwecke hier (noch) nicht. Verschieben Sie den css-Ordner in Ihren Projekt-Ordner (z.B. Webtech20 ). Dann k\u00f6nnen Sie diese externen Dateien mit dem <link> -Tag wie bekannt einbinden. Der <head> sieht dann so aus: < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Title </ title > </ head > Das min im Dateinamen bootstrap.min.css steht \u00fcbrigens daf\u00fcr, dass aus dieser CSS-Datei alle unn\u00f6tigen Whitespaces (Leerzeichen und Tabs) entfernt wurden, um die Datei m\u00f6glichst klein zu halten (sie ist immer noch 160 KB) gro\u00df - das muss bei jedem Abruf vom Webserver mitgeladen werden (wenn es nicht bereits im Cache ist). Mit den Whitespaces ( bootstrap.css ) ist die Datei sogar 198 KB gro\u00df. Wir erstellen mal eine erste Seite: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Bootstrap </ title > </ head > < body > < div class = \"p-5 mb-4 bg-light rounded-3\" > < div class = \"container-fluid py-5\" > < h1 class = \"display-5 fw-bold\" > Jetzt mit Bootstrap! </ h1 > < p class = \"col-md-8 fs-4\" > Wir verwenden jetzt Bootstrap und schauen uns mal die Anwendung ein wenig genauer an. Das Grundprinzip besteht darin, HTML-Elementen Klassen zuzuordnen. </ p > < p >< a class = \"btn btn-primary btn-lg\" href = \"https://getbootstrap.com/docs/5.1/examples/\" role = \"button\" > Bootstrap Beispiele &raquo; </ a ></ p > </ div > </ div > </ body > </ html > Wenn Sie Bootstrap richtig eingebunden haben, dann sieht die Seite so aus: In dem obigen Beispiel habe ich einen Link auf Beispiele hinterlegt, in denen Bootstrap verwendet wird. Es lohnt sich, diese Beispiel genauer unter die Lupe zu nehmen, um ein Gef\u00fchl daf\u00fcr zu bekommen, wie die Klassen wirken und was alles so mit Bootstrap geht. Man muss keine dieser Klassen kennen, sondern sucht immer in bereits existierenden Beispielen, wie man ein Problem mithilfe von Bootstrap l\u00f6sen kann. Neben der Bootstrap-Webseite selbst bietet auch w3schools eine gute \u00dcbersicht. Daraus auch noch eine weitere Erg\u00e4nzung, n\u00e4mlich ein Formular, bei dem \u00fcberpr\u00fcft wird, ob eine Eingabe \u00fcberhaupt erfolgte. Der hinzugef\u00fcgte Code ist gelb unterlegt. Erweiterung des Beispiels um ein Formular 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Bootstrap </ title > </ head > < body > < main role = \"main\" > < div class = \"p-5 mb-4 bg-light rounded-3\" > < div class = \"container-fluid py-5\" > < h1 class = \"display-5 fw-bold\" > Jetzt mit Bootstrap! </ h1 > < p class = \"col-md-8 fs-4\" > Wir verwenden jetzt Bootstrap und schauen uns mal die Anwendung ein wenig genauer an. Das Grundprinzip besteht darin, HTML-Elementen Klassen zuzuordnen. </ p > < p >< a class = \"btn btn-primary btn-lg\" href = \"https://getbootstrap.com/docs/5.1/examples/\" role = \"button\" > Bootstrap Beispiele &raquo; </ a ></ p > </ div > </ div > < div class = \"container\" > < h2 > Formular mit Validierung, ob Eingabe erfolgte (nur mit CSS - kein JavaScript!) </ h2 > < p > Hier wird z.B. die Klasse < code > .was-validated </ code > verwendet, um zu \u00fcberpr\u00fcfen, ob in den Textfeldern und der Checkbox eine Eingabe erfolgt ist. </ p > < form class = \"was-validated\" > < div class = \"form-group\" > < label for = \"uname\" > Username: </ label > < input type = \"text\" class = \"form-control\" id = \"uname\" placeholder = \"Enter username\" name = \"uname\" required > < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Feld bitte ausf\u00fcllen! </ div > </ div > < div class = \"form-group\" > < label for = \"pwd\" > Password: </ label > < input type = \"password\" class = \"form-control\" id = \"pwd\" placeholder = \"Enter password\" name = \"pswd\" required > < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Feld bitte ausf\u00fcllen! </ div > </ div > < div class = \"form-group form-check\" > < label class = \"form-check-label\" > < input class = \"form-check-input\" type = \"checkbox\" name = \"remember\" required > Ich habe die Datenschutzerkl\u00e4rung gelesen und stimme ihr zu. < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Hier bitte best\u00e4tigen! </ div > </ label > </ div > < button type = \"submit\" class = \"btn btn-primary\" > Login </ button > </ form > </ div > </ main > </ body > </ html > Die Seite sieht dann so aus: Wir wollen gar keine weiteren Beispiele hier auff\u00fchren. Wie gesagt, wenn Sie etwas ben\u00f6tigen, dann gucken Sie unter Bootstrap oder w3schools nach, ob es dort passende Beispiele gibt, die Sie kopieren und anpassen k\u00f6nnen. Uns geht es haupts\u00e4chlich um das Grid-Konzept, das im folgenden vorgestellt wird. Grid-Konzept \u00b6 Alle CSS-Frameworks beruhen zur Gestaltung eines responiven Webdesigns auf einem sogenannten Grid-Konzept . Bei diesem Konzept wird der Viewport in Spalten (columns) aufgeteilt. Bei den meisten CSS-Frameworks, auch bei Bootstrap, in 12 Spalten . Sie k\u00f6nnen einem Blockelement nun \u00fcber die Zuweisung zu einer bestimmten Klasse mitteilen, wieviele solcher Spalten f\u00fcr dieses Element zur Verf\u00fcgung stehen. Erstes Beispiel \u00b6 Wir betrachten zun\u00e4chst wieder ein einfaches Beispiel: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Grid </ title > < style > div div { padding : 10 px ; } </ style > </ head > < body > < main class = \"container pt-5 \" > < h2 > Wichtig ist, dass die Spaltenanzahl in einer Zeile 12 ergibt </ h2 > < div class = \"row\" > < div class = \"col-3\" style = \"background-color: lightgrey;\" > < h3 > col-3 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-3 </ code > zugewiesen </ p > </ div > < div class = \"col-4\" style = \"background-color: darkgrey;\" > < h3 > col-4 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-4 </ code > zugewiesen </ p > </ div > < div class = \"col-5\" style = \"background-color: grey;\" > < h3 > col-5 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-5 </ code > zugewiesen </ p > </ div > </ div > </ main > </ body > </ html > Wir haben drei <div> -Elemente in einem <div> , dem die Klasse row zugewiesen ist. Die drei <div> -Elemente innerhalb von row nehmen jeweils eine gewisse Anzahl von Spalten ein. das erste <div> ist 3 Spalten breit ( col-3 ), das zweite <div> 4 Spalten ( col-4 ) und das dritte <div> ist 5 Spalten breit ( col-5 ). Dadurch, dass die drei Container in einem Container mit der Klasse row und den drei Containern jeweils mit col-* eine Anzahl von Spalten zugewiesen wurden, erscheinen die drei Container nebeneinander und haben die Breite entsprechend der ihnen zugewiesenen Spaltenanzahl. Das erste <div> nimmt also 3/12 der Viewportbreite ein, das zweite <div> 4/12 und das dritte 5/12. Wichtig ist, dass die Summe der Spalten 12 ergibt (3+4+5), damit die drei Elemente auch nebeneinander passen (es darf zumindest nicht mehr sein). Folgende Abbildung zeigt die M\u00f6glichkeiten, wenn die jeweiligen Blockelemente jeweils gleichverteilt \u00fcber die gesamten 12 Spalten w\u00fcrden. Aber wie Sie gesehen haben, k\u00f6nnen die Spaltenbreiten auch beliebig gemischt werden (z.B. col-2 , col-3 , col-1 , col-6 ) - in Summe soll immer 12 herauskommen. Falls Sie mehrere Spalten gleichverteilen wollen (also gleiche Spaltenbreiten), k\u00f6nnen Sie auch einfach die Klasse col verwenden: < div class = \"row\" > < div class = \"col\" ></ div > < div class = \"col\" ></ div > < div class = \"col\" ></ div > < div class = \"col\" ></ div > </ div > Hier nehmen die inneren <div> nun jeweils 25% des Viewports ein und sind nebeneinander. Responsive \u00b6 Blockelemente nebeneinander anzuordnen, geht nun also schonmal recht leicht. Die eigentlich gute Idee des Grid-Konzeptes ist jedoch, dass man genau so einfach die Anordnung der Elemente responsiv gestalten kann. Neben der Klasse col (automatisch gleichverteilen) gibt es, wie wir bereits gesehen haben, die Klassen col-1 , col-2 , ... , col-12 . Damit k\u00f6nnen wir, wie im ersten Beispiel gezeigt, Blockelementen jeweils eine bestimmte Spaltenanzahl zuordnen. Jetzt kommt noch eine weitere Bedeutung dieser Klassen hinzu: man verwendet sie f\u00fcr extra schmale Ausgabeger\u00e4te (kleiner als 576px ). Daneben gibt es noch weitere Klassen (wir listen col- trotzdem nochmal mit auf): col- (xs-Ger\u00e4te; Bildschirmbreite kleiner als 576px) col-sm- (sm-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 576px) col-md- (md-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 768px) col-lg- (lg-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 992px) col-xl- (xl-Ger\u00e4te - Bildschirmbreite als 1200px) Hinter dem Strich steht bei allen Klassen eine Zahl 1 bis 12 . Die Klassen skalieren auch nach oben, d.h. wenn man nur die Klassen f\u00fcr xs-Ger\u00e4te angibt und keine weiter (so wie in unserem ersten Beispiel oben), dann gilt diese Angabe f\u00fcr alle weiteren Bildschirmbreiten. M\u00f6chte man z.B., dass die Darstellung in md-Ger\u00e4ten und lg-Ger\u00e4ten genau so sein soll, wie in sm-Ger\u00e4ten, dann l\u00e4sst man die Angabe f\u00fcr die md-Ger\u00e4te und lg-Ger\u00e4te einfach weg. Wir schauen uns das mal an: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Grid </ title > < style > div div { padding : 10 px ; margin-top : 5 px ; margin-bottom : 5 px ; } . row div : nth-child ( odd ) { background-color : lightgrey ; color : black ; } . row div : nth-child ( even ) { background-color : grey ; color : white ; } </ style > </ head > < body > < main class = \"container pt-5 \" > < h2 > Jetzt resonsiv - \u00e4ndern Sie die Monitorbreite </ h2 > < div class = \"row\" > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 1/3 </ li > < li > lg: < code > col-lg-3 </ code > 1/4 </ li > < li > xl: < code > col-xl-2 </ code > 1/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 2/3 </ li > < li > lg: < code > col-lg-3 </ code > 2/4 </ li > < li > xl: < code > col-xl-2 </ code > 2/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 3/3 </ li > < li > lg: < code > col-lg-3 </ code > 3/4 </ li > < li > xl: < code > col-xl-2 </ code > 3/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 1/3 </ li > < li > lg: < code > col-lg-3 </ code > 4/4 </ li > < li > xl: < code > col-xl-2 </ code > 4/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 2/3 </ li > < li > lg: < code > col-lg-6 </ code > 1/2 </ li > < li > xl: < code > col-xl-2 </ code > 5/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 3/3 </ li > < li > lg: < code > col-lg-6 </ code > 2/2 </ li > < li > xl: < code > col-xl-2 </ code > 6/6 </ li > </ ul > </ div > </ div > </ main > </ body > </ html > Die <div> -Elemente innerhalb der row sind alle gleich. Ihnen wurden jeweils folgende Klassen zugeordnet: col-12 : bei Bildschirmbreiten unter 576px geht ein div \u00fcber alle 12 Spalten, d.h. alle <div> sind untereinander (6 Zeilen) col-sm-6 : bei Bildschirmbreiten gr\u00f6\u00dfer als 576px und kleiner als 768px geht ein div \u00fcber 6 Spalten, d.h. 2 <div> passen jeweils nebeneinander (3 Zeilen) col-md-4 : bei Bildschirmbreiten gr\u00f6\u00dfer als 768px und kleiner als 992px geht ein div \u00fcber 4 Spalten, d.h. 3 <div> passen jeweils nebeneinander (2 Zeilen) col-xl-2 : bei Bildschirmbreiten \u00fcber 1200px geht ein div \u00fcber 2 Spalten, d.h. alle 6 <div> passen nebeneinander (1 Zeile) Eine Abweichung gibt es f\u00fcr col-lg- . Den ersten 4 <div> -Elementen ist jeweils die Klasse col-lg-3 zugeordnet. Damit passen diese 4 <div> -Elemente nebeneinander. Dann bleiben noch 2 <div> -Elemente \u00fcbrig. Denen wurde die Klasse col-lg-6 zugeordnet, so dass beide Elemente jeweils 6 Spalten breit sind und den Viewport zusammen vollst\u00e4ndig ausf\u00fcllen. Die folgenden Screenshots zeigen die jeweiligen Ansichten: Zusammenfassend l\u00e4sst sich also sagen, dass Sie ein responsives Layout erhalten, wenn Sie einem Container die Klasse row zurodnen und den darin enthaltenen Containern die f\u00fcr Ihr Layout entsprechenden Klassen col-* , col-sm-* , col-md-* , col-lg-* und/oder col-xl-* . Achten Sie darauf, dass die Spaltenbreite in einer Zeile insgesamt (h\u00f6chstens) 12 ergibt und dass die Definitionen nach oben (zum breiteren) skalieren. Das bedeutet, dass wenn Sie beispielsweise keine Definitionen f\u00fcr col-md-* angeben, dann wirken die Definitionen f\u00fcr col-sm-* . Sollten auch diese nicht angegeben sein, dann col-* . Vielleicht noch 2 weitere Beispiele zur Festigung des Verst\u00e4ndnisses. Erstens bestimmt die H\u00f6he des \"h\u00f6chsten\" inneren Containes die H\u00f6he aller Container in einer Reihe: < h2 > Alle Container in einer Reihe gleich hoch </ h2 > < div class = \"row\" > < div class = \"col\" style = \"background-color: blue; color: white;\" > Lorem ipsum dolor sit amet, cibo sensibus interesset no sit. Et dolor possim volutpat qui. No malis tollit iriure eam, et vel tale zril blandit, rebum vidisse nostrum qui eu. No nostrud dolorem legendos mea, ea eum mucius oporteat platonem.Eam an case scribentur, ei clita causae cum, alia debet eu vel. </ div > < div class = \"col\" style = \"background-color: lightblue; color: black;\" > .col </ div > < div class = \"col\" style = \"background-color: dodgerblue; color: black;\" > .col </ div > </ div > Das style -Attribut k\u00f6nnen Sie jeweils ignorieren, ist nur zur besseren Sichtbarkeit. Allen inneren Containern wurde die Klasse col zugeordnet, sie werden also innerhalb der Reihe gleichverteilt. Die H\u00f6he des h\u00f6chsten Containers (der erste mit dem l\u00e4ngeren Text) bestimmt auch die H\u00f6he der anderen Container in der Reihe. Es entsteht folgende Ansicht: Zweitens k\u00f6nnen Sie die Spalten auch verschachteln. Innerhalb eines Elternelementes soll die Spaltensumme wieder 12 sein. < h2 > Verschachtelte Spalten </ h2 > < div class = \"row\" > < div class = \"col-8\" style = \"background-color: yellowgreen; color: black;\" > .col-8 < div class = \"row\" > < div class = \"col-6\" style = \"background-color: grey; color: white;\" > .col-6 </ div > < div class = \"col-6\" style = \"background-color: dimgrey; color: white;\" > .col-6 </ div > </ div > </ div > < div class = \"col-4\" style = \"background-color: green; color: black;\" > .col-4 </ div > </ div > Auch hier k\u00f6nnen Sie die style -Attribute wieder ignorieren. Es gibt eine \"\u00e4u\u00dfere\" Reihe mit 2 inneren <div> -Elementen. Das erste <div> -Element geht \u00fcber 8 Spalten und das zweite <div> -Element \u00fcber 4 Spalten. Das erste <div> -Element ist selbst ein Elternelement f\u00fcr eine weitere Reihe. Diese enth\u00e4lt wiederum zwei <div> -Elemente, beide gehen \u00fcber 12 Spalten. Der Bezug ist hier aber das Elternelement. Es entsteht folgende Ansicht:","title":"RWD"},{"location":"rwd/#responsive-web-design","text":"Responsive bedeutet reagierend und wenn wir von Resonsive Web Design (RWD) sprechen, dann meinen wir damit, dass wir das Layout der Webseite so gestalten, dass es auf die Gr\u00f6\u00dfe des Ausgabeger\u00e4tes \"reagiert\". Das hei\u00dft, dass wir f\u00fcr kleine (schmale) Ausgabeger\u00e4te (z.B. Mobiltelefone) ein anderes Layout (Design) w\u00e4hlen, als f\u00fcr breitere Ausgabeger\u00e4te (z.B. Tablets) und ein noch anderes Layout f\u00fcr sehr breite Ausgabeger\u00e4te (z.B. Monitore). Responsive Web Design realisieren wir haupts\u00e4chlich mit CSS. Insofern h\u00e4tte es auch gut in den Skript-Teil f\u00fcr CSS gepasst. Da dies jedoch schon so lang war, haben wir eine eigene Unterseite f\u00fcr RWD erstellt. Damit \u00fcberhaupt auf unterschiedliche Ausgabeger\u00e4te reagiert werden kann, wurde sogenannte Media Queries in CSS eingef\u00fchrt. Diese schauen wir uns deshalb zun\u00e4chst genauer an. Zuvor noch ein wichtiger Tipp! Um unsere Webseite im responsiven Design zu gestalten, m\u00fcssen wir dem Browser mitteilen, dass er die Gr\u00f6\u00dfe des Viewports (also des Ausgabefensters) ber\u00fccksichtigen soll und die Darstellung an die Gr\u00f6\u00dfe des Ger\u00e4tes anpassen muss. Dazu f\u00fcgen wir im <head> unserer Webseite von nun an immer das viewport meta tag ein und geben damit an, dass einerseits die Ausgabe an die Ger\u00e4tegr\u00f6\u00dfe angepasst werden soll und wir mit einem Zoom-Faktor von 1 starten: <!-- ab jetzt immer im <head> angeben! --> < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" >","title":"Responsive Web Design"},{"location":"rwd/#media-queries","text":"Grob gesagt, definieren wir mithilfe von Media Queries , welche CSS-Eigenschaften f\u00fcr welche Bildschirmgr\u00f6\u00dfe gelten sollen. Das hei\u00dft, wir definieren unterschiedliche CSS-Eigenschaften f\u00fcr unterschiedliche Bildschirmgr\u00f6\u00dfen. So k\u00f6nnen wir z.B. definieren, dass f\u00fcr Bildschirmbreiten unter 480px ein einspaltiges Layout gew\u00e4hlt wird, f\u00fcr Bildschirmbreiten gr\u00f6\u00dfer als 480px , aber kleiner gleich 720px ein 2-spaltiges Layout und f\u00fcr gr\u00f6\u00dfer als 720px ein 3-spaltiges Layout. Wir betrachten Media Queries zun\u00e4chst von der syntaktischen Seite. Das ist f\u00fcr Sie vielleicht zun\u00e4chst unspannend, aber wir \u00fcberlegen dabei, was alles geht, um dann zu sagen, dass wir uns doch nur um Screens (also Minitore) und doch nur um deren Breiten k\u00fcmmern - aber es ginge noch viel mehr ;-).","title":"Media Queries"},{"location":"rwd/#syntax-von-media-queries","text":"Media Queries k\u00f6nnen zun\u00e4chst einmal true oder false sein. Um diesen Wert zu ermitteln, wird f\u00fcr einen Medientyp ( media type ) ein Ausdruck ( expression ) ausgewertet. Die allgemeine Syntax f\u00fcr eine Media Query ist wie folgt: @media [not|only] mediatype and (expressions) { CSS-Code; } Eine Media Query beginnt immer mit @media . Dann kann ein not oder ein only kommen, muss aber nicht und wir werden es auch nicht verwenden. Danach kommt der Medientyp (sollte kein Medientyp angegeben werden, ist screen , also Monitor gemeint). Medientypen k\u00f6nnen z.B. Drucker ( print ), Monitore ( screen ), Screenreader ( speech ) oder all sein. Wir werden uns (fast) ausschlie\u00dflich mit Monitoren bzw Monitorgr\u00f6\u00dfen und damit als Medientyp screen besch\u00e4ftigen. Ein angegebener Medientyp wird mithilfe von and mit einem Ausdruck verkn\u00fcpft. Ein Ausdruck besteht aus einem media feature und einem Wert. Ein media feature ist z.B. width , min-width , max-width , height , min-height , max-height , device-width , min-device-width , max-device-width , device-height , min-device-height , max-device-height , orientation , usw. Ausdr\u00fccke ( expressions ) ergeben sich dann aus media feature und Wert, z.B. orientation: landscape , orientation: portrait , min-width: 480px , max-width: 480px , resolution: 150dpi .","title":"Syntax von Media Queries"},{"location":"rwd/#beispiele-von-media-queries","text":"Wir betrachten zun\u00e4chst einige Beispiele von Media Queries: @ media screen and ( max-width : 800px ) { /* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) h\u00f6chstens 800px breit ist */ } @ media only screen and ( min-width : 320px ) and ( max-width : 480px ) and ( min-resolution : 150dpi ) { /* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) mindestens 320px und h\u00f6chstens 480px breit ist und mindestens eine Aufl\u00f6sung von 150dpi besitzt */ } Seit Media Queries Level 4 kann man auch direkt schreiben: @ media ( 320px <= width <= 480px ) and ( min-resolution : 150dpi ) { /* hier die CSS-Eigenschaften, die gelten sollen, falls der Monitor (Viewport) mindestens 320px und h\u00f6chstens 480px breit ist und mindestens eine Aufl\u00f6sung von 150dpi besitzt */ } @ media ( orientation : portrait ) { /* hier die CSS-Eigenschaften f\u00fcr hochformatige Ausgabemedien */ } @ media ( orientation : landscape ) { /* hier die CSS-Eigenschaften f\u00fcr querformatige Ausgabemedien */ }","title":"Beispiele von Media Queries"},{"location":"rwd/#erstes-beispiel","text":"Wir versuchen, zun\u00e4chst immer mobile first zu designen, d.h. wir geben zun\u00e4chst die CSS-Eigenschaften an, die f\u00fcr mobile Ger\u00e4te (schmaler Viewport) gelten und f\u00fcgen dann Media Queries hinzu, die f\u00fcr gr\u00f6\u00dfere Ausgabebreiten Anwendung finden soll. Hier ein erstes Beispiel: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > Media Queries </ title > < style > div { margin : auto ; width : 100 % ; height : 100 % ; text-align : center ; background-color : red ; padding-top : 20 % ; padding-bottom : 20 % ; font-size : medium ; } @ media screen and ( min-width : 800px ) { div { background-color : green ; color : yellow ; font-size : large ;; } } @ media screen and ( min-width : 1200px ) { div { background-color : blue ; color : white ; font-size : xx-large ; } } @ media screen and ( orientation : portrait ) { div { writing-mode : vertical - rl ; text-orientation : mixed ; background-color : yellow ; color : brown ; } } </ style > </ head > < body > < div > \u00c4ndern Sie die Breite des Browsers, um den Effekt zu sehen. </ div > </ body > </ html > Der HTML-Code ist kurz: wir erstellen ein <div> , welches einen Text enth\u00e4lt. Im <style> -Element definieren wir f\u00fcr dieses <div> , dass der Text zentriert sein soll (vertikal, also von links nach rechts betrachtet) und dass nach oben und unten ein Abstand zum Rand von jeweils 20% der Viewport-H\u00f6he eingehalten werden soll. Dadurch wird das <div> einigerma\u00dfen hoch (weil <div> ein Block-Element ist, geht es sowieso \u00fcber die gesamte Breite). Au\u00dferdem legen wir fest, dass der Hintergrund rot und die Schriftgr\u00f6\u00dfe medium sein soll. Unsere erste Media Query definiert f\u00fcr eine Mindestbreite des Viewports von 800px , dass der Hintergrund nun gr\u00fcn, die Schriftfarbe gelb und die Schriftgr\u00f6\u00dfe large sein soll. Die zweite Media Query definiert f\u00fcr eine Mindestbreite des Viewports von 1200px , dass der Hintergrund blau, die Schriftfarbe wei\u00df und die Schriftgr\u00f6\u00dfe xx-large sein soll. Wenn wir die Seite im Browser aufrufen, wird nun abh\u00e4ngig von der Gr\u00f6\u00dfe des Viewports eine der drei folgenden Ansichten gezeigt: \u00c4ndern Sie die Gr\u00f6\u00dfe der Browserbreite, um alle drei Ansichten zu sehen. Die dritte Media Query definiert eine eigene Ansicht f\u00fcr den Fall, dass die H\u00f6he des Viewports gr\u00f6\u00dfer ist als die Breite ( orientation: portrait ). Sie k\u00f6nnen diese Ansicht erreichen, indem Sie den Browser m\u00f6glichst schmal machen oder Sie nutzen die Developer Tools Ihres Browsers und \"drehen\" Ihr Ger\u00e4t.","title":"Erstes Beispiel"},{"location":"rwd/#zweites-beispiel","text":"Wir wollen uns noch ein zweites Beispiel anschauen. Dieses Beispiel zeigt bereits das Prinzip, auf dem das sogenannte Grid-Konzept beruht, welches in CSS-Frameworks verwendet wird. <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > Responsive Webdesign </ title > < style > . small { float : left ; width : 98 % ; padding : 1 % ; } @ media screen and ( min-width : 800px ) { . medium { float : left ; width : 48 % ; padding : 1 % ; } } @ media screen and ( min-width : 1200px ) { . large { float : left ; width : 23 % ; padding : 1 % ; } } </ style > </ head > < body > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > < p class = \"small medium large\" > Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. Duis autem vel eum iriure dolor in hendrerit in vulputate velit esse molestie consequat, vel illum dolore eu feugiat nulla facilisis at vero eros et accumsan et iusto odio dignissim qui blandit praesent luptatum zzril delenit augue duis dolore te feugait nulla facilisi. Lorem ipsum dolor sit amet, </ p > </ body > </ html > Der HTML-Code ist wieder einfach gehalten. Wir haben vier <p> -Elemente, die einen Text enthalten und denen jeweils drei Klassen zugeordnet sind: small , medium und large . In den CSS-Definitionen (siehe <style> -Element) definieren wir zun\u00e4chst Eigenschaften f\u00fcr die Klasse small . Wir geben dort zwar float:left an, das ist aber eigentlich unsinnig, da die Breite jedes einzelnen Absatzes 100% der Breite des Viewports ist ( widt: 98% + 2x padding: 1% ). Es w\u00fcrde dort auch gen\u00fcgen, wenn wir einfach nur padding: 1% definieren w\u00fcrden. Wichtiger sind die Definitionen in den beiden Media Queries. F\u00fcr eine Viewport-Breite zwischen 800px und 1199px definieren wir die Klasse medium so, dass jedes Element, dem diese Klasse zugeordnet ist (hier alle <p> -Elemente) umflossen werden kann ( float: left ) und eine Breite von 50% des Viewports einnimmt. Das f\u00fchrt dazu, dass dann zwei Abs\u00e4tze nebeneinander passen. F\u00fcr eine Viewport-Breite gr\u00f6\u00dfer als 1199px definieren wir die Klasse large so, dass jedes Element, dem diese Klasse zugeordnet ist (hier alle <p> -Elemente) umflossen werden kann ( float: left ) und eine Breite von 25% des Viewports einnimmt. Das f\u00fchrt dazu, dass dann vier Abs\u00e4tze nebeneinander passen. F\u00fchren Sie das Beispiel aus und \u00e4ndern Sie Ihre Browserbreite, dann werden Sie den Effekt sehen: Eine Anmerkung noch: Sie stellen sich vielleicht die Frage, warum z.B. bei einer Viewportbreite von mehr als 1200px die Definition der Klasse large wirkt, nicht jedoch die Definitionen der Klassen small und medium . Wenn wir uns an die Gewichtung der Selektoren erinnern, dann sollten alle drei Definitionen gleichgewichtet sein, denn es ist jeweils eine Klasse betroffen. Es steht als jeweils in Kategorie A eine 0 ( style -Attribut), in Kategorie B eine 0 (keine id ), in Kategorei C eine 1 (eine Klasse) und in Kategorie D eine 0 (kein Element). Tats\u00e4chlich sind auch alle drei Definitionen gleichgewichtet. Hier entscheidet jetzt tats\u00e4chlich die Reihenfolge der Definitionen und da zuerst small definiert wird, dann medium und dann large , wirkt large am st\u00e4rksten, wenn alle drei Klassen definiert sind. Das hei\u00dft auch, Sie d\u00fcrfen nicht zuerst mit der Media Query f\u00fcr gro\u00dfe Viewports beginnen, dann die Media Query f\u00fcr mittlere Viewports und erst dann die small -Definition, denn dann w\u00fcrde es nicht funktionieren.","title":"Zweites Beispiel"},{"location":"rwd/#css-frameworks","text":"F\u00fcr gr\u00f6\u00dfere Webanwendungen m\u00fcssen wir keine eigenen CSS-Definitionen schreiben, sondern k\u00f6nnen auf CSS-Frameworks zur\u00fcckgreifen, die ein einheitliches und mordernes Aussehen f\u00fcr Webanwendungen zur Verf\u00fcgung stellen. In diesen Frameworks wurden viele Klassen definiert und wir k\u00f6nnen unter Verwendung eines solchen Frameworks unseren HTML-Elementen gezielt Klassen zuweisen, die dann das Aussehen dieses Elementes beeinflussen. Einige solcher Frameworks haben bereits eine hohe Verbreitung: Bootstrap SemanticUI Materialize CSS Foundation Einen \u00dcberblick \u00fcber bekannte CSS-Frameworks finden Sie z.B. hier und hier . Wir erl\u00e4utern hier die Verwendung eines solchen Frameworks anhand von Bootstrap.","title":"CSS-Frameworks"},{"location":"rwd/#bootstrap","text":"Um Bootstrap zu verwenden, haben Sie zun\u00e4chst die Wahl zwischen der Verwendung eines Content Delivery Networks (CDN) oder dem Download der externen Bootstrap-CSS-Datei. Wenn Sie ein CDN verwenden, dann werden die Quellen in dem Moment geladen, in dem Sie die Webseite aufrufen. Der <head> Ihrer HTML-Datei sieht dann so aus: < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link href = \"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel = \"stylesheet\" integrity = \"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin = \"anonymous\" > < title > Title </ title > </ head > Den entsprechenden Link zum CDN finden Sie auf der Bootstrap-Webseite . Sie k\u00f6nnen die CSS-Dateien aber auch herunterladen. Auf der Download Bootstrap-Webseite klicken Sie unter \"Compiled CSS and JS\" auf den \"Download\"-Button. Sie erhalten eine Datei bootstrap-5.1.3-dist.zip . Entpacken Sie diese Datei. Der entstehende Ordner enth\u00e4lt 2 Unterordner css und js . Letzterer enth\u00e4lt JavaScript-Dateien des Frameworks. Diese ben\u00f6tigen wir f\u00fcr unsere Zwecke hier (noch) nicht. Verschieben Sie den css-Ordner in Ihren Projekt-Ordner (z.B. Webtech20 ). Dann k\u00f6nnen Sie diese externen Dateien mit dem <link> -Tag wie bekannt einbinden. Der <head> sieht dann so aus: < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Title </ title > </ head > Das min im Dateinamen bootstrap.min.css steht \u00fcbrigens daf\u00fcr, dass aus dieser CSS-Datei alle unn\u00f6tigen Whitespaces (Leerzeichen und Tabs) entfernt wurden, um die Datei m\u00f6glichst klein zu halten (sie ist immer noch 160 KB) gro\u00df - das muss bei jedem Abruf vom Webserver mitgeladen werden (wenn es nicht bereits im Cache ist). Mit den Whitespaces ( bootstrap.css ) ist die Datei sogar 198 KB gro\u00df. Wir erstellen mal eine erste Seite: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Bootstrap </ title > </ head > < body > < div class = \"p-5 mb-4 bg-light rounded-3\" > < div class = \"container-fluid py-5\" > < h1 class = \"display-5 fw-bold\" > Jetzt mit Bootstrap! </ h1 > < p class = \"col-md-8 fs-4\" > Wir verwenden jetzt Bootstrap und schauen uns mal die Anwendung ein wenig genauer an. Das Grundprinzip besteht darin, HTML-Elementen Klassen zuzuordnen. </ p > < p >< a class = \"btn btn-primary btn-lg\" href = \"https://getbootstrap.com/docs/5.1/examples/\" role = \"button\" > Bootstrap Beispiele &raquo; </ a ></ p > </ div > </ div > </ body > </ html > Wenn Sie Bootstrap richtig eingebunden haben, dann sieht die Seite so aus: In dem obigen Beispiel habe ich einen Link auf Beispiele hinterlegt, in denen Bootstrap verwendet wird. Es lohnt sich, diese Beispiel genauer unter die Lupe zu nehmen, um ein Gef\u00fchl daf\u00fcr zu bekommen, wie die Klassen wirken und was alles so mit Bootstrap geht. Man muss keine dieser Klassen kennen, sondern sucht immer in bereits existierenden Beispielen, wie man ein Problem mithilfe von Bootstrap l\u00f6sen kann. Neben der Bootstrap-Webseite selbst bietet auch w3schools eine gute \u00dcbersicht. Daraus auch noch eine weitere Erg\u00e4nzung, n\u00e4mlich ein Formular, bei dem \u00fcberpr\u00fcft wird, ob eine Eingabe \u00fcberhaupt erfolgte. Der hinzugef\u00fcgte Code ist gelb unterlegt. Erweiterung des Beispiels um ein Formular 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Bootstrap </ title > </ head > < body > < main role = \"main\" > < div class = \"p-5 mb-4 bg-light rounded-3\" > < div class = \"container-fluid py-5\" > < h1 class = \"display-5 fw-bold\" > Jetzt mit Bootstrap! </ h1 > < p class = \"col-md-8 fs-4\" > Wir verwenden jetzt Bootstrap und schauen uns mal die Anwendung ein wenig genauer an. Das Grundprinzip besteht darin, HTML-Elementen Klassen zuzuordnen. </ p > < p >< a class = \"btn btn-primary btn-lg\" href = \"https://getbootstrap.com/docs/5.1/examples/\" role = \"button\" > Bootstrap Beispiele &raquo; </ a ></ p > </ div > </ div > < div class = \"container\" > < h2 > Formular mit Validierung, ob Eingabe erfolgte (nur mit CSS - kein JavaScript!) </ h2 > < p > Hier wird z.B. die Klasse < code > .was-validated </ code > verwendet, um zu \u00fcberpr\u00fcfen, ob in den Textfeldern und der Checkbox eine Eingabe erfolgt ist. </ p > < form class = \"was-validated\" > < div class = \"form-group\" > < label for = \"uname\" > Username: </ label > < input type = \"text\" class = \"form-control\" id = \"uname\" placeholder = \"Enter username\" name = \"uname\" required > < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Feld bitte ausf\u00fcllen! </ div > </ div > < div class = \"form-group\" > < label for = \"pwd\" > Password: </ label > < input type = \"password\" class = \"form-control\" id = \"pwd\" placeholder = \"Enter password\" name = \"pswd\" required > < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Feld bitte ausf\u00fcllen! </ div > </ div > < div class = \"form-group form-check\" > < label class = \"form-check-label\" > < input class = \"form-check-input\" type = \"checkbox\" name = \"remember\" required > Ich habe die Datenschutzerkl\u00e4rung gelesen und stimme ihr zu. < div class = \"valid-feedback\" > Korrekt </ div > < div class = \"invalid-feedback\" > Hier bitte best\u00e4tigen! </ div > </ label > </ div > < button type = \"submit\" class = \"btn btn-primary\" > Login </ button > </ form > </ div > </ main > </ body > </ html > Die Seite sieht dann so aus: Wir wollen gar keine weiteren Beispiele hier auff\u00fchren. Wie gesagt, wenn Sie etwas ben\u00f6tigen, dann gucken Sie unter Bootstrap oder w3schools nach, ob es dort passende Beispiele gibt, die Sie kopieren und anpassen k\u00f6nnen. Uns geht es haupts\u00e4chlich um das Grid-Konzept, das im folgenden vorgestellt wird.","title":"Bootstrap"},{"location":"rwd/#grid-konzept","text":"Alle CSS-Frameworks beruhen zur Gestaltung eines responiven Webdesigns auf einem sogenannten Grid-Konzept . Bei diesem Konzept wird der Viewport in Spalten (columns) aufgeteilt. Bei den meisten CSS-Frameworks, auch bei Bootstrap, in 12 Spalten . Sie k\u00f6nnen einem Blockelement nun \u00fcber die Zuweisung zu einer bestimmten Klasse mitteilen, wieviele solcher Spalten f\u00fcr dieses Element zur Verf\u00fcgung stehen.","title":"Grid-Konzept"},{"location":"rwd/#erstes-beispiel_1","text":"Wir betrachten zun\u00e4chst wieder ein einfaches Beispiel: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Grid </ title > < style > div div { padding : 10 px ; } </ style > </ head > < body > < main class = \"container pt-5 \" > < h2 > Wichtig ist, dass die Spaltenanzahl in einer Zeile 12 ergibt </ h2 > < div class = \"row\" > < div class = \"col-3\" style = \"background-color: lightgrey;\" > < h3 > col-3 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-3 </ code > zugewiesen </ p > </ div > < div class = \"col-4\" style = \"background-color: darkgrey;\" > < h3 > col-4 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-4 </ code > zugewiesen </ p > </ div > < div class = \"col-5\" style = \"background-color: grey;\" > < h3 > col-5 </ h3 > < p > Diesem &lt; div &gt; wurde die Klasse < code > col-5 </ code > zugewiesen </ p > </ div > </ div > </ main > </ body > </ html > Wir haben drei <div> -Elemente in einem <div> , dem die Klasse row zugewiesen ist. Die drei <div> -Elemente innerhalb von row nehmen jeweils eine gewisse Anzahl von Spalten ein. das erste <div> ist 3 Spalten breit ( col-3 ), das zweite <div> 4 Spalten ( col-4 ) und das dritte <div> ist 5 Spalten breit ( col-5 ). Dadurch, dass die drei Container in einem Container mit der Klasse row und den drei Containern jeweils mit col-* eine Anzahl von Spalten zugewiesen wurden, erscheinen die drei Container nebeneinander und haben die Breite entsprechend der ihnen zugewiesenen Spaltenanzahl. Das erste <div> nimmt also 3/12 der Viewportbreite ein, das zweite <div> 4/12 und das dritte 5/12. Wichtig ist, dass die Summe der Spalten 12 ergibt (3+4+5), damit die drei Elemente auch nebeneinander passen (es darf zumindest nicht mehr sein). Folgende Abbildung zeigt die M\u00f6glichkeiten, wenn die jeweiligen Blockelemente jeweils gleichverteilt \u00fcber die gesamten 12 Spalten w\u00fcrden. Aber wie Sie gesehen haben, k\u00f6nnen die Spaltenbreiten auch beliebig gemischt werden (z.B. col-2 , col-3 , col-1 , col-6 ) - in Summe soll immer 12 herauskommen. Falls Sie mehrere Spalten gleichverteilen wollen (also gleiche Spaltenbreiten), k\u00f6nnen Sie auch einfach die Klasse col verwenden: < div class = \"row\" > < div class = \"col\" ></ div > < div class = \"col\" ></ div > < div class = \"col\" ></ div > < div class = \"col\" ></ div > </ div > Hier nehmen die inneren <div> nun jeweils 25% des Viewports ein und sind nebeneinander.","title":"Erstes Beispiel"},{"location":"rwd/#responsive","text":"Blockelemente nebeneinander anzuordnen, geht nun also schonmal recht leicht. Die eigentlich gute Idee des Grid-Konzeptes ist jedoch, dass man genau so einfach die Anordnung der Elemente responsiv gestalten kann. Neben der Klasse col (automatisch gleichverteilen) gibt es, wie wir bereits gesehen haben, die Klassen col-1 , col-2 , ... , col-12 . Damit k\u00f6nnen wir, wie im ersten Beispiel gezeigt, Blockelementen jeweils eine bestimmte Spaltenanzahl zuordnen. Jetzt kommt noch eine weitere Bedeutung dieser Klassen hinzu: man verwendet sie f\u00fcr extra schmale Ausgabeger\u00e4te (kleiner als 576px ). Daneben gibt es noch weitere Klassen (wir listen col- trotzdem nochmal mit auf): col- (xs-Ger\u00e4te; Bildschirmbreite kleiner als 576px) col-sm- (sm-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 576px) col-md- (md-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 768px) col-lg- (lg-Ger\u00e4te - Bildschirmbreite gleich oder gr\u00f6\u00dfer als 992px) col-xl- (xl-Ger\u00e4te - Bildschirmbreite als 1200px) Hinter dem Strich steht bei allen Klassen eine Zahl 1 bis 12 . Die Klassen skalieren auch nach oben, d.h. wenn man nur die Klassen f\u00fcr xs-Ger\u00e4te angibt und keine weiter (so wie in unserem ersten Beispiel oben), dann gilt diese Angabe f\u00fcr alle weiteren Bildschirmbreiten. M\u00f6chte man z.B., dass die Darstellung in md-Ger\u00e4ten und lg-Ger\u00e4ten genau so sein soll, wie in sm-Ger\u00e4ten, dann l\u00e4sst man die Angabe f\u00fcr die md-Ger\u00e4te und lg-Ger\u00e4te einfach weg. Wir schauen uns das mal an: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1, shrink-to-fit=no\" > < link rel = \"stylesheet\" href = \"./css/bootstrap.min.css\" > < title > Grid </ title > < style > div div { padding : 10 px ; margin-top : 5 px ; margin-bottom : 5 px ; } . row div : nth-child ( odd ) { background-color : lightgrey ; color : black ; } . row div : nth-child ( even ) { background-color : grey ; color : white ; } </ style > </ head > < body > < main class = \"container pt-5 \" > < h2 > Jetzt resonsiv - \u00e4ndern Sie die Monitorbreite </ h2 > < div class = \"row\" > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 1/3 </ li > < li > lg: < code > col-lg-3 </ code > 1/4 </ li > < li > xl: < code > col-xl-2 </ code > 1/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 2/3 </ li > < li > lg: < code > col-lg-3 </ code > 2/4 </ li > < li > xl: < code > col-xl-2 </ code > 2/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 3/3 </ li > < li > lg: < code > col-lg-3 </ code > 3/4 </ li > < li > xl: < code > col-xl-2 </ code > 3/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-3 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 1/3 </ li > < li > lg: < code > col-lg-3 </ code > 4/4 </ li > < li > xl: < code > col-xl-2 </ code > 4/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 1/2 </ li > < li > md: < code > col-md-4 </ code > 2/3 </ li > < li > lg: < code > col-lg-6 </ code > 1/2 </ li > < li > xl: < code > col-xl-2 </ code > 5/6 </ li > </ ul > </ div > < div class = \"col-12 col-sm-6 col-md-4 col-lg-6 col-xl-2\" > < ul > < li > xs: < code > col-12 </ code > 1/1 </ li > < li > sm: < code > col-sm-6 </ code > 2/2 </ li > < li > md: < code > col-md-4 </ code > 3/3 </ li > < li > lg: < code > col-lg-6 </ code > 2/2 </ li > < li > xl: < code > col-xl-2 </ code > 6/6 </ li > </ ul > </ div > </ div > </ main > </ body > </ html > Die <div> -Elemente innerhalb der row sind alle gleich. Ihnen wurden jeweils folgende Klassen zugeordnet: col-12 : bei Bildschirmbreiten unter 576px geht ein div \u00fcber alle 12 Spalten, d.h. alle <div> sind untereinander (6 Zeilen) col-sm-6 : bei Bildschirmbreiten gr\u00f6\u00dfer als 576px und kleiner als 768px geht ein div \u00fcber 6 Spalten, d.h. 2 <div> passen jeweils nebeneinander (3 Zeilen) col-md-4 : bei Bildschirmbreiten gr\u00f6\u00dfer als 768px und kleiner als 992px geht ein div \u00fcber 4 Spalten, d.h. 3 <div> passen jeweils nebeneinander (2 Zeilen) col-xl-2 : bei Bildschirmbreiten \u00fcber 1200px geht ein div \u00fcber 2 Spalten, d.h. alle 6 <div> passen nebeneinander (1 Zeile) Eine Abweichung gibt es f\u00fcr col-lg- . Den ersten 4 <div> -Elementen ist jeweils die Klasse col-lg-3 zugeordnet. Damit passen diese 4 <div> -Elemente nebeneinander. Dann bleiben noch 2 <div> -Elemente \u00fcbrig. Denen wurde die Klasse col-lg-6 zugeordnet, so dass beide Elemente jeweils 6 Spalten breit sind und den Viewport zusammen vollst\u00e4ndig ausf\u00fcllen. Die folgenden Screenshots zeigen die jeweiligen Ansichten: Zusammenfassend l\u00e4sst sich also sagen, dass Sie ein responsives Layout erhalten, wenn Sie einem Container die Klasse row zurodnen und den darin enthaltenen Containern die f\u00fcr Ihr Layout entsprechenden Klassen col-* , col-sm-* , col-md-* , col-lg-* und/oder col-xl-* . Achten Sie darauf, dass die Spaltenbreite in einer Zeile insgesamt (h\u00f6chstens) 12 ergibt und dass die Definitionen nach oben (zum breiteren) skalieren. Das bedeutet, dass wenn Sie beispielsweise keine Definitionen f\u00fcr col-md-* angeben, dann wirken die Definitionen f\u00fcr col-sm-* . Sollten auch diese nicht angegeben sein, dann col-* . Vielleicht noch 2 weitere Beispiele zur Festigung des Verst\u00e4ndnisses. Erstens bestimmt die H\u00f6he des \"h\u00f6chsten\" inneren Containes die H\u00f6he aller Container in einer Reihe: < h2 > Alle Container in einer Reihe gleich hoch </ h2 > < div class = \"row\" > < div class = \"col\" style = \"background-color: blue; color: white;\" > Lorem ipsum dolor sit amet, cibo sensibus interesset no sit. Et dolor possim volutpat qui. No malis tollit iriure eam, et vel tale zril blandit, rebum vidisse nostrum qui eu. No nostrud dolorem legendos mea, ea eum mucius oporteat platonem.Eam an case scribentur, ei clita causae cum, alia debet eu vel. </ div > < div class = \"col\" style = \"background-color: lightblue; color: black;\" > .col </ div > < div class = \"col\" style = \"background-color: dodgerblue; color: black;\" > .col </ div > </ div > Das style -Attribut k\u00f6nnen Sie jeweils ignorieren, ist nur zur besseren Sichtbarkeit. Allen inneren Containern wurde die Klasse col zugeordnet, sie werden also innerhalb der Reihe gleichverteilt. Die H\u00f6he des h\u00f6chsten Containers (der erste mit dem l\u00e4ngeren Text) bestimmt auch die H\u00f6he der anderen Container in der Reihe. Es entsteht folgende Ansicht: Zweitens k\u00f6nnen Sie die Spalten auch verschachteln. Innerhalb eines Elternelementes soll die Spaltensumme wieder 12 sein. < h2 > Verschachtelte Spalten </ h2 > < div class = \"row\" > < div class = \"col-8\" style = \"background-color: yellowgreen; color: black;\" > .col-8 < div class = \"row\" > < div class = \"col-6\" style = \"background-color: grey; color: white;\" > .col-6 </ div > < div class = \"col-6\" style = \"background-color: dimgrey; color: white;\" > .col-6 </ div > </ div > </ div > < div class = \"col-4\" style = \"background-color: green; color: black;\" > .col-4 </ div > </ div > Auch hier k\u00f6nnen Sie die style -Attribute wieder ignorieren. Es gibt eine \"\u00e4u\u00dfere\" Reihe mit 2 inneren <div> -Elementen. Das erste <div> -Element geht \u00fcber 8 Spalten und das zweite <div> -Element \u00fcber 4 Spalten. Das erste <div> -Element ist selbst ein Elternelement f\u00fcr eine weitere Reihe. Diese enth\u00e4lt wiederum zwei <div> -Elemente, beide gehen \u00fcber 12 Spalten. Der Bezug ist hier aber das Elternelement. Es entsteht folgende Ansicht:","title":"Responsive"},{"location":"tools/","text":"Werkzeuge \u00b6 Integrated Development Environment (IDE) \u00b6 F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten. Ich werde in den Vorlesungen und \u00dcbungen Visual Studio Code verwenden. Visual Studio Code ist auch auf den Laborrechnern verf\u00fcgbar. Git \u00b6 Git ist ein Werkzeug zur Versionskontrolle und zum gemeinsamen Entwickeln in Teams. Nach jeder \u00dcbung committen Sie Ihre L\u00f6sung und pushen Sie auf einen zentralen, netzbasierten Dienst, wie z.B. GitHub GitLab Bibucket Gew\u00e4hren Sie mir Zugriff auf Ihr zentrales Repository. Auf GitHub finden Sie mich unter jfreiheit bzw. meiner E-Mail-Adresse joern.freiheit@htw-berlin.de . Repository initial anlegen \u00b6 Wir zeigen das Erstellen eines Repositories exemplarisch f\u00fcr GitHub . Die Beispiele hier sind f\u00fcr das Jahr 2020, funktionieren aber noch genau so. Ersetzen Sie einfach 20 durch 22 . Option A: Repository zun\u00e4chst in Github anlegen, dann clonen \u00b6 Als erstes loggen Sie sich in Github ein. Dort gibt es in der linken oberen Ecke einen Button New , siehe Bild: Klicken Sie darauf und geben Sie die notwendigen Informationen ein (Beschreibung ist optional): Sie k\u00f6nnen w\u00e4hlen, ob das Repository Public (f\u00fcr alle lesbar) oder Private (nur f\u00fcr Eingeladene lesbar) sein soll. Klicken Sie auf den Button Create repository . Kopieren Sie sich nun den Remote-Pfad in Ihre Zwischenablage, hier https://github.com/jfreiheit/Webtech20.git . Wechseln Sie nun lokal in Ihr Terminal und wechseln in Ihren Workspace Ihrer IDE. Ich w\u00e4hle hier den Pfad /Users/jornfreiheit/Sites , da dieser Pfad gleichzeitig mein DocumentRoot ist, d.h., wenn ich localhost im Browser aufrufe, dann wird in diesem Pfad nach den Webseiten \"gesucht\". jornfreiheit@Jorns-MacBook-Pro Sites % pwd /Users/jornfreiheit/Sites Geben Sie dort nun ein: jornfreiheit@Jorns-MacBook-Pro Sites % git clone https://github.com/jfreiheit/Webtech20.git Cloning into 'Webtech20' ... warning: You appear to have cloned an empty repository. also git clone gefolgt von dem Remote-Pfad aus Ihrer Zwischenablage. Wenn Sie in Github weder README.md noch .gitignore ausgew\u00e4hlt hatten, dann erhalten Sie eine Warnung, dass Sie ein leeres Repository clonen. Das ist aber kein Problem. Sie k\u00f6nnen aber auch beide Datein in Ihr Repository integrieren, die .gitignore verwenden wir auf jeden Fall. In dem Ordner, in den Sie geclont haben, wird nun ein Ordner Webtech20 angelegt. Diesen Ordner k\u00f6nnen Sie nun als Workspace Ihrer IDE verwenden. Also z.B. mit IntelliJ IDEA : \u00f6ffnen Sie das Projekt ( Open or import ) Webtech20 . Es erscheint: Hier k\u00f6nnen Sie w\u00e4hlen, dass neue Dateien immer automatisch zum Git-Repoitory hinzugef\u00fcgt werden - das k\u00f6nnen Sie aber auch immer manuell machen ( git add . ). Angenommen, wir erstellen uns jetzt eine Datei index.html ( File --> New --> HTML File ) mit: index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Erster Test </ title > </ head > < body > < h1 > Willkommen </ h1 > < p > Das ist die Datei index.html. Sie liegt bei mir unter /Users/jornfreiheit/Sites/Webtech20. Der Ordner /Users/jornfreiheit/Sites ist mein DocumentRoot, deshalb kann ich diese Datei im Browser unter localhost/Webtech20/index.html aufrufen. Der Ordner Webtech20 wird von Git verwaltet. </ p > </ body > </ html > Da der Ordner Sites bei mir DocumentRoot ist und sich der Webtech20 -Ordner (in dem die neue index.html ist) direkt darunter befindet, kann ich mir die Datei im Browser unter localhost/Webtech20/index.html anzeigen lassen. Das nat nichts mit Git zu tun, sondern mit dem DocumentRoot des lokalen Webservers. Wir f\u00fcgen im Terminal im Webtech20 -Ordner diese Datei dem Git-Repoitory hinzu (falls noch nicht automatisch durch unsere IDE passiert): jornfreiheit@Jorns-MacBook-Pro Webtech20 % git add index.html jornfreiheit@Jorns-MacBook-Pro Webtech20 % git status On branch master No commits yet Changes to be committed: ( use \"git rm --cached <file>...\" to unstage ) new file: .idea/.gitignore new file: .idea/Webtech20.iml new file: .idea/misc.xml new file: .idea/modules.xml new file: .idea/vcs.xml new file: index.html jornfreiheit@Jorns-MacBook-Pro Webtech20 % Au\u00dferdem sollten wir den .idea -Ordner von der Git-Verwaltung ausschlie\u00dfen. Dazu erstellen wir im Webtech20 -Ordner eine Datei .gitignore , falls diese noch nicht existiert und tragen dort .idea ein. F\u00fcgen Sie die Datei .gitignore Ihrem repository hinzu, f\u00fchren Sie Ihr erstes Commit aus und pushen Ihr Repository nach Github: git add .ignore git commit -m \"erstes commit\" git push In Github erkenn Sie, dass commit und push geklappt haben: In Zukunft f\u00fcgen Sie Ihre neu erstellten Dateien und Ordner immer mit git add . hinzu, erstellen neue Commits mit git commit -m \"Commit-Nachricht\" und pushen dann nach Github mit git push . Option B: Repository in Github anlegen und lokal anlegen, dann verbinden \u00b6 Legen Sie sich wie oben beschrieben ein Repository unter GitHub an. Kopieren Sie die Remote-URL (z.B. https://github.com/jfreiheit/Webtech20.git ). Erstellen Sie sich lokal einen Ordner (am besten in Ihrem DocumentRoot ), z.B. Webtech20 ( mkdir Webtech20 ). Wechseln Sie in diesen Ordner ( cd Webtech20 ) und f\u00fchren Sie dort git init aus. Es entsteht ein .git -Ordner. F\u00fcgen Sie diesem lokalen Repository alle Ihre bisher in Webtech20 erstellten Dateien mit git add . hinzu. Erstellen Sie ein Commit, z.B. git commit -m \"initial commit\" . Verbinden Sie Ihr lokales Repository mit dem remote-Repository auf Github durch git remote add origin https://github.com/jfreiheit/Webtech20.git (f\u00fcr https://... setzen Sie Ihre Remote-URL ein). Pushen Sie die Dateien auf Ihr remote-Repository: git push --set-upstream origin master . In Zukunft f\u00fcgen Sie Ihre neu erstellten Dateien und Ordner immer mit git add . hinzu, erstellen neue Commits mit git commit -m \"Commit-Nachricht\" und pushen dann nach Github mit git push . Webserver \u00b6 F\u00fcr das Modul ben\u00f6tigen wir einen Webserver. Wir verwenden den Apache Webserver . Auf dem Mac ist er bereits vorhanden, auf Linux-Systemen meistens auch. F\u00fcr Windows-Systeme wird die Installation von XAMPP empfohlen. Hier finden Sie Anleitungen zur Einrichtung des Webservers: Windows: https://www.ionos.de/digitalguide/server/tools/xampp-tutorial-so-erstellen-sie-ihren-lokalen-testserver/ https://werner-zenk.de/tipps/lokale_webserver_xampp.php Wichtig ist, dass Sie wissen, wo sich Ihr DocumentRoot befindet (zun\u00e4chst xampp\\htdocs - l\u00e4sst sich aber \u00e4ndern ) Mac: der Apache-Webserver ist bereits installiert achten Sie darauf, dass Sie Ihr DocumentRoot kennen (meistens Sites , eventuell \u00e4ndern ) Linux: die meisten Linux-Systeme haben bereits einen Webserver (auch hier wichtig, DocumentRoot zu kennen) wenn nicht, k\u00f6nnen Sie sich auch XAMPP installieren Um zu testen, ob Ihr Webser l\u00e4uft, erstellen Sie im DocumentRoot eine Datei index.php mit folgendem Inhalt: <?php phpinfo(); ?> und rufen in Ihrem Browser http://localhost/index.php auf. Es sollte eine \u00e4hnliche Ausgabe wie folgt erscheinen (nur Ausschnitt: Developer Tools \u00b6 Alle Browser sind mit Werkzeugen ausgestattet, die es Web-Entwicklerinnen erm\u00f6glichen, im Browser Informationen \u00fcber die Webanwendung zu erhalten. F\u00fcr einige Browser ist hier angegeben, wie Sie diese Entwicklerwerkzeuge einschalten. Chrome \u00b6 In Chrome sind die Entwicklerwerkzeuge unter dem Men\u00fc neben der URL-Eingabezeile unter Weitere Tools --> Entwicklertools verf\u00fcgbar (siehe folgendes Bild). Die eingeschalteten Entwicklertools offenbaren Ihnen umfassende Informationen \u00fcber die angezeigte Webseite. Besonders interessant ist der Reiter Console : oder auch der Reiter Elements , der Ihnen sowohl den HTML- als auch den jeweiligen CSS-Code anzeigt: Weiterf\u00fchrende Informationen erhalten Sie unter https://developers.google.com/web/tools/chrome-devtools . Firefox \u00b6 Zu den Entwicklertools von Firefox finden Sie Informationen auf https://developer.mozilla.org/de/docs/Tools Firefox Browser Developer Die Entwicklertools lassen sich in Firefox \u00f6ffnen unter Web-Entwickler --> Inspektor : Sie haben die gleichen M\u00f6glichkeiten der Ananlyse wie bei Chrome, bei Safari und anderen Browsern: Safari \u00b6 In Safari m\u00fcssen Sie zun\u00e4chst den Men\u00fceintrag Entwickler aktivieren. Eine Anleitung dazu finden Sie z.B. hier auf heise . Weitere Informationen zu den Entwicklertools erhalten Sie z.B. auf Werkzeuge im Men\u00fc \u201eEntwickler\u201c Safari Developer Help Web Development Tools Curl \u00b6 Curl ist ein Open-Source-Kommandozeilenprogramm, um Daten mittels URL zu transferieren. Curl kann auf der Kommandozeile genutzt werden, um SMTP, HTTP, FTP usw. zu verwenden. Wir werden Curl insbesondere f\u00fcr die HTTP-Anfragemethoden GET und POST verwenden. Eine ausf\u00fchrliche Beschreibung von Curl ist im Buch Everything curl - the book frei verf\u00fcgbar. Die Installation von Curl erfolgt \u00fcber die Curl Download Seite . Zum Testen, ob Curl korrekt funktioniert, k\u00f6nnen Sie im Terminal z.B. curl freiheit.f4.htw-berlin.de/curl.html eingeben. Es sollte folgende Ausgabe erscheinen: <!DOCTYPE html> <html> <head> <title>Curl-Test</title> </head> <body> <p>Hallo FIW!</p> </body> </html> Mit dem -o -Flag k\u00f6nnen Sie die Datei speichern (Sie k\u00f6nnen einen Dateinamen angeben - hier curl.html ): curl -o curl.html freiheit.f4.htw-berlin.de/curl.html Da oben die lokale Datei genau so hei\u00dft wie die remote-Datei, h\u00e4tte man auch curl -O freiheit.f4.htw-berlin.de/curl.html angeben k\u00f6nnen, also gro\u00dfes -O . Mit dem -d -Flag k\u00f6nnen Parameter \u00fcbergeben und die entsprechende Seite mit einer POST-Anfrage aufgerufen werden. Mit dem zus\u00e4tzlichen -G -Flag erfolgt die Anfrage nicht als POST sondern als GET. Mit dem -I -Flag fragen Sie den Header der Anfrage ab, z.B.: curl -I freiheit.f4.htw-berlin.de/curl.html gibt etwas aus in der Art: HTTP/1.1 200 OK Date: Thu, 04 Jun 2020 13 :59:43 GMT Server: Apache/2.4.38 ( Debian ) Last-Modified: Thu, 04 Jun 2020 13 :01:59 GMT ETag: \"78-5a741c004bdb9\" Accept-Ranges: bytes Content-Length: 120 Vary: Accept-Encoding Content-Type: text/html F\u00fcr eine vollst\u00e4ndige \u00dcbersicht aller Flags von Curl siehe Curl manpage . Postman \u00b6 Postman ist eine Anwendung, um Schnittstellen ( Application Programming Interface - API ), die das Backend bereitstellt, zu entwickeln und zu testen. Sie finden Postman unter postman.com . Wir beschr\u00e4nken uns zun\u00e4chst auf den Postman API Client . Laden Sie das Tool herunter und installieren es. Rufen Sie Postman auf und geben in das Eingabefeld https://postman-echo.com/get ein. Lassen Sie die Auswahl links daneben auf GET und klicken auf den Send -Button. Es erscheint folgendes Bild: Neben der GET -Anfrage sind folgende weitere Anfragen (siehe auch HTML \u2192 HTTP ) m\u00f6glich: POST - sendet Daten zur Verarbeitung an den Webserver PUT - l\u00e4dt existierende Daten (eine Datei) auf den Server PATCH - \u00e4ndert Daten (eine Datei), ohne - wie bei PUT - diese vollst\u00e4ndig zu ersetzen DELETE - l\u00f6scht die angegebenen Daten auf dem Server Node.js \u00b6 Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Callbacks sind Funktionen, die anderen Funktionen als Parameter \u00fcbergeben werden (siehe JavaScript \u2192 Callback-Funktionen ). Angular \u00b6 Um Angular verwenden zu k\u00f6nnen (siehe auch Angular\u2192Getting started ), ben\u00f6tigen Sie das Angular Command Line Interface (CLI) . Zur Installation des Angular CLI geben Sie npm install -g @angular/cli ein. Den Paketmanager npm k\u00f6nnen Sie sich mit node.js installieren. Mithilfe des Angular CLI haben Sie dann die M\u00f6glichkeit, ein neues Projekt anzulegen ( ng new projektName ), eine neue Componente ( ng generate component componentenName ) usw. und das Projekt auszuf\u00fchren ( ng serve ). Sollten Sie bei der Installation der Angular-CLI EACCES errors erhalten ( permission denied ), dann arbeiten Sie an einem Mac ;-). Geben Sie dann im Terminal ein: sudo chown -R ` whoami ` ~/.npm sudo chown -R ` whoami ` /usr/local/lib/node_modules Sollten Sie bei der Installation der Angular-CLI Execution Policy -Errors erhalten (oder danach bei ng version ), dann arbeiten Sie an einem Windows-Rechner ;-). Geben Sie dann im Terminal ein: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned Danach sollte npm install -g @angular/cli funktionieren. Installationen \u00b6 Um den Paketmanager npm zu installieren, laden sie sich node.js hier herunter und installieren Sie es. Nach erfolgreicher Installation sollte sowohl node -v funktionieren und eine Versionsnummer ausgeben (z.B. v14.15.0 ) als auch npm -v (z.B. 6.14.8 ). Au\u00dferdem ben\u00f6tigen Sie das Angular-Command-Line-Interface (CLI) , das Sie mithilfe des Befehls npm install -g @angular/cli installieren. Danach sollte ng version funktionieren und Ihnen etwas in dieser Art ausgeben: _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 15 .0.0 Node: 14 .20.0 Package Manager: npm 9 .1.2 OS: darwin x64 Angular: ... Package Version ------------------------------------------------------ @angular-devkit/architect 0 .1500.0 ( cli-only ) @angular-devkit/core 15 .0.0 ( cli-only ) @angular-devkit/schematics 15 .0.0 ( cli-only ) @schematics/angular 15 .0.0 ( cli-only ) Jetzt k\u00f6nnen wir unser erstes Angular-Projekt erstellen. Update @angular/cli \u00b6 Manchmal gibt es vielleicht Warnungen beim Erstellen eines Projektes - etwas in der Art, wie: npm WARN @angular-devkit/build-angular@0.1100.0 requires a peer of @angular/compiler-cli@^11.0.0 || ^11.0.0-next but none is installed. You must install peer dependencies yourself. npm WARN @angular-devkit/build-angular@0.1100.0 requires a peer of typescript@~4.0.0 but none is installed. You must install peer dependencies yourself. npm WARN @ngtools/webpack@11.0.0 requires a peer of @angular/compiler-cli@^11.0.0 || ^11.0.0-next but none is installed. You must install peer dependencies yourself. npm WARN @ngtools/webpack@11.0.0 requires a peer of typescript@~4.0.0 but none is installed. You must install peer dependencies yourself. npm WARN icss-utils@5.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself. npm WARN postcss-modules-extract-imports@3.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself. npm WARN postcss-modules-local-by-default@4.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself. npm WARN postcss-modules-scope@3.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself. npm WARN postcss-modules-values@4.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself. Das liegt meistens daran, dass das Angular-CLI updated werden m\u00fcsste. F\u00fcr das Update von Angular gibt es eine eigene Seite . Gehen Sie wie dort beschrieben vor. MySQL \u00b6 MySQL ist eine relationale Datenbank und geh\u00f6rt zu den am meisten verwendeten relationalen Datenbanken bei Webanwendungen. Wir h\u00e4tten uns auch f\u00fcr PostgreSQL entscheiden k\u00f6nnen. F\u00fcr einen kurzen Vergleich von MySQL und PostgreSQL siehe hier . Informationen zur Installation von MySQL finden Sie hier . Nach der Installation finden Sie z.B. auf dem Mac unter Systemeinstellungen \u2192 MySQL : Achten Sie bei der Installation von MySQL darauf, dass Sie als Authentifizierungsmethode \"Legacy Password ...\" w\u00e4hlen! Sie m\u00fcssen aber MySQL auch nicht lokal installieren, sondern k\u00f6nnen auch den Studi-Server studi.f4.htw-berlin.de verwenden. phpMyadmin \u00b6 phpMyadmin ist eine graphische Oberfl\u00e4che zur Verwaltung Ihrer MySQL -Datenbanken. Nach erfolgreicher Installation rufen Sie im Browser localhost/phpmyadmin auf und haben Zugriff auf Ihre Datenbanken bzw. k\u00f6nnen diese erstellen, \u00e4ndern und bef\u00fcllen. MongoDB \u00b6 [MongoDB] ist eine NoSQL ( not only SQL ) Datenbank. In einer MongoDB werden nicht Relationen, sondern (JavaScript-)Objekte gespeichert. Die CRUD -Operationen auf einer MongoDB sind z.B. hier erkl\u00e4rt. Die MongoDB kann lokal als MongoDB (Community Edition) installiert werden. Zur Installationsseite geht es hier . Nach der Installation muss MongoDB gestartet werden. Unter Mac (f\u00fcr MongoDB-Version 4.4) geht es z.B. so: brew services start mongodb-community@4.4 Um MongoDB zu stoppen, muss beim Mac brew services stop mongodb-community@4.4 eingegeben werden. Wenn Sie dann mongo ins Terminal eingeben, sollte etwas in dieser Art erscheinen: MongoDB shell version v4.4.5 connecting to: mongodb://127.0.0.1:27017/?compressors = disabled & gssapiServiceName = mongodb Implicit session: session { \"id\" : UUID ( \"0b972fa5-fad9-48bb-8a7f-c81cc0778620\" ) } MongoDB server version: 4 .4.5 Welcome to the MongoDB shell. For interactive help, type \"help\" . For more comprehensive documentation, see https://docs.mongodb.com/ Questions? Try the MongoDB Developer Community Forums https://community.mongodb.com --- The server generated these startup warnings when booting: 2021 -07-01T11:40:21.328+02:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted --- --- Enable MongoDB ' s free cloud-based monitoring service, which will then receive and display metrics about your deployment ( disk utilization, CPU, operation statistics, etc ) . The monitoring data will be available on a MongoDB website with a unique URL accessible to you and anyone you share the URL with. MongoDB may use this information to make product improvements and to suggest MongoDB products and deployment options to you. To enable free monitoring, run the following command: db.enableFreeMonitoring () To permanently disable this reminder, run the following command: db.disableFreeMonitoring () --- > Weitere Hilfen \u00b6 Prozesse und Ports \u00b6 Wenn Sie herausbekommen wollen, welche Ports bereits belegt sind und durch welchen Prozess, dann geben Sie im Terminal ein: lsof -i -P | grep -i LISTEN Eventuell m\u00fcssen Sie ein sudo voranstellen. Sie erhalten eine Ausgabe in der Form (variiert nat\u00fcrlich stark): rapportd 372 jornfreiheit 4u IPv4 0x5cee55fd054bd73 0t0 TCP *:57124 (LISTEN) rapportd 372 jornfreiheit 5u IPv6 0x5cee55fab8990c3 0t0 TCP *:57124 (LISTEN) phpstorm 456 jornfreiheit 55u IPv4 0x5cee55faabf19b3 0t0 TCP localhost:6942 (LISTEN) phpstorm 456 jornfreiheit 355u IPv4 0x5cee55fb7f034f3 0t0 TCP localhost:63342 (LISTEN) Dropbox 2638 jornfreiheit 129u IPv6 0x5cee55fb262a223 0t0 TCP *:17500 (LISTEN) Dropbox 2638 jornfreiheit 130u IPv4 0x5cee55fb25ea393 0t0 TCP *:17500 (LISTEN) Dropbox 2638 jornfreiheit 185u IPv4 0x5cee55fb7f00393 0t0 TCP localhost:17600 (LISTEN) Dropbox 2638 jornfreiheit 194u IPv4 0x5cee55fb9e31753 0t0 TCP localhost:17603 (LISTEN) node 9070 jornfreiheit 21u IPv6 0x5cee55fb5913843 0t0 TCP *:8080 (LISTEN) Python 9138 jornfreiheit 5u IPv4 0x5cee55fcfdf7753 0t0 TCP localhost:8000 (LISTEN) Wenn Sie nun z.B. einen bestimmten Prozess killen wollen, z.B. den Python-Prozess, der in localhost auf Port 8000 l\u00e4uft, dann geben Sie kill -9 9138 im Terminal ein. 9138 ist die PID des entsprechenden Prozesses.","title":"Werkzeuge"},{"location":"tools/#werkzeuge","text":"","title":"Werkzeuge"},{"location":"tools/#integrated-development-environment-ide","text":"F\u00fcr die Webentwicklung stehen Ihnen viele gute Entwicklungswerkzeuge zur Verf\u00fcgung. F\u00fcr welches Sie sich entscheiden, bleibt Ihnen \u00fcberlassen. Hier eine Auswahl der aus meiner Sicht besten Entwicklungswerkzeuge: IntelliJ IDEA PhpStorm WebStorm Sublime Text Atom Visual Studio Code F\u00fcr die Tools von Jetbrains ben\u00f6tigen Sie einen Account. Mit Ihrer HTW-E-Mail-Adresse bekommen Sie aber eine kostenlose Hochschullizenz und k\u00f6nnen so die Enterprise-Versionen kostenlos nutzen. Sublime Text ist Shareware und fragt regelm\u00e4\u00dfig, ob Sie spenden m\u00f6chten. Ich werde in den Vorlesungen und \u00dcbungen Visual Studio Code verwenden. Visual Studio Code ist auch auf den Laborrechnern verf\u00fcgbar.","title":"Integrated Development Environment (IDE)"},{"location":"tools/#git","text":"Git ist ein Werkzeug zur Versionskontrolle und zum gemeinsamen Entwickeln in Teams. Nach jeder \u00dcbung committen Sie Ihre L\u00f6sung und pushen Sie auf einen zentralen, netzbasierten Dienst, wie z.B. GitHub GitLab Bibucket Gew\u00e4hren Sie mir Zugriff auf Ihr zentrales Repository. Auf GitHub finden Sie mich unter jfreiheit bzw. meiner E-Mail-Adresse joern.freiheit@htw-berlin.de .","title":"Git"},{"location":"tools/#repository-initial-anlegen","text":"Wir zeigen das Erstellen eines Repositories exemplarisch f\u00fcr GitHub . Die Beispiele hier sind f\u00fcr das Jahr 2020, funktionieren aber noch genau so. Ersetzen Sie einfach 20 durch 22 .","title":"Repository initial anlegen"},{"location":"tools/#option-a-repository-zunachst-in-github-anlegen-dann-clonen","text":"Als erstes loggen Sie sich in Github ein. Dort gibt es in der linken oberen Ecke einen Button New , siehe Bild: Klicken Sie darauf und geben Sie die notwendigen Informationen ein (Beschreibung ist optional): Sie k\u00f6nnen w\u00e4hlen, ob das Repository Public (f\u00fcr alle lesbar) oder Private (nur f\u00fcr Eingeladene lesbar) sein soll. Klicken Sie auf den Button Create repository . Kopieren Sie sich nun den Remote-Pfad in Ihre Zwischenablage, hier https://github.com/jfreiheit/Webtech20.git . Wechseln Sie nun lokal in Ihr Terminal und wechseln in Ihren Workspace Ihrer IDE. Ich w\u00e4hle hier den Pfad /Users/jornfreiheit/Sites , da dieser Pfad gleichzeitig mein DocumentRoot ist, d.h., wenn ich localhost im Browser aufrufe, dann wird in diesem Pfad nach den Webseiten \"gesucht\". jornfreiheit@Jorns-MacBook-Pro Sites % pwd /Users/jornfreiheit/Sites Geben Sie dort nun ein: jornfreiheit@Jorns-MacBook-Pro Sites % git clone https://github.com/jfreiheit/Webtech20.git Cloning into 'Webtech20' ... warning: You appear to have cloned an empty repository. also git clone gefolgt von dem Remote-Pfad aus Ihrer Zwischenablage. Wenn Sie in Github weder README.md noch .gitignore ausgew\u00e4hlt hatten, dann erhalten Sie eine Warnung, dass Sie ein leeres Repository clonen. Das ist aber kein Problem. Sie k\u00f6nnen aber auch beide Datein in Ihr Repository integrieren, die .gitignore verwenden wir auf jeden Fall. In dem Ordner, in den Sie geclont haben, wird nun ein Ordner Webtech20 angelegt. Diesen Ordner k\u00f6nnen Sie nun als Workspace Ihrer IDE verwenden. Also z.B. mit IntelliJ IDEA : \u00f6ffnen Sie das Projekt ( Open or import ) Webtech20 . Es erscheint: Hier k\u00f6nnen Sie w\u00e4hlen, dass neue Dateien immer automatisch zum Git-Repoitory hinzugef\u00fcgt werden - das k\u00f6nnen Sie aber auch immer manuell machen ( git add . ). Angenommen, wir erstellen uns jetzt eine Datei index.html ( File --> New --> HTML File ) mit: index.html <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < title > Erster Test </ title > </ head > < body > < h1 > Willkommen </ h1 > < p > Das ist die Datei index.html. Sie liegt bei mir unter /Users/jornfreiheit/Sites/Webtech20. Der Ordner /Users/jornfreiheit/Sites ist mein DocumentRoot, deshalb kann ich diese Datei im Browser unter localhost/Webtech20/index.html aufrufen. Der Ordner Webtech20 wird von Git verwaltet. </ p > </ body > </ html > Da der Ordner Sites bei mir DocumentRoot ist und sich der Webtech20 -Ordner (in dem die neue index.html ist) direkt darunter befindet, kann ich mir die Datei im Browser unter localhost/Webtech20/index.html anzeigen lassen. Das nat nichts mit Git zu tun, sondern mit dem DocumentRoot des lokalen Webservers. Wir f\u00fcgen im Terminal im Webtech20 -Ordner diese Datei dem Git-Repoitory hinzu (falls noch nicht automatisch durch unsere IDE passiert): jornfreiheit@Jorns-MacBook-Pro Webtech20 % git add index.html jornfreiheit@Jorns-MacBook-Pro Webtech20 % git status On branch master No commits yet Changes to be committed: ( use \"git rm --cached <file>...\" to unstage ) new file: .idea/.gitignore new file: .idea/Webtech20.iml new file: .idea/misc.xml new file: .idea/modules.xml new file: .idea/vcs.xml new file: index.html jornfreiheit@Jorns-MacBook-Pro Webtech20 % Au\u00dferdem sollten wir den .idea -Ordner von der Git-Verwaltung ausschlie\u00dfen. Dazu erstellen wir im Webtech20 -Ordner eine Datei .gitignore , falls diese noch nicht existiert und tragen dort .idea ein. F\u00fcgen Sie die Datei .gitignore Ihrem repository hinzu, f\u00fchren Sie Ihr erstes Commit aus und pushen Ihr Repository nach Github: git add .ignore git commit -m \"erstes commit\" git push In Github erkenn Sie, dass commit und push geklappt haben: In Zukunft f\u00fcgen Sie Ihre neu erstellten Dateien und Ordner immer mit git add . hinzu, erstellen neue Commits mit git commit -m \"Commit-Nachricht\" und pushen dann nach Github mit git push .","title":"Option A: Repository zun\u00e4chst in Github anlegen, dann clonen"},{"location":"tools/#option-b-repository-in-github-anlegen-und-lokal-anlegen-dann-verbinden","text":"Legen Sie sich wie oben beschrieben ein Repository unter GitHub an. Kopieren Sie die Remote-URL (z.B. https://github.com/jfreiheit/Webtech20.git ). Erstellen Sie sich lokal einen Ordner (am besten in Ihrem DocumentRoot ), z.B. Webtech20 ( mkdir Webtech20 ). Wechseln Sie in diesen Ordner ( cd Webtech20 ) und f\u00fchren Sie dort git init aus. Es entsteht ein .git -Ordner. F\u00fcgen Sie diesem lokalen Repository alle Ihre bisher in Webtech20 erstellten Dateien mit git add . hinzu. Erstellen Sie ein Commit, z.B. git commit -m \"initial commit\" . Verbinden Sie Ihr lokales Repository mit dem remote-Repository auf Github durch git remote add origin https://github.com/jfreiheit/Webtech20.git (f\u00fcr https://... setzen Sie Ihre Remote-URL ein). Pushen Sie die Dateien auf Ihr remote-Repository: git push --set-upstream origin master . In Zukunft f\u00fcgen Sie Ihre neu erstellten Dateien und Ordner immer mit git add . hinzu, erstellen neue Commits mit git commit -m \"Commit-Nachricht\" und pushen dann nach Github mit git push .","title":"Option B: Repository in Github anlegen und lokal anlegen, dann verbinden"},{"location":"tools/#webserver","text":"F\u00fcr das Modul ben\u00f6tigen wir einen Webserver. Wir verwenden den Apache Webserver . Auf dem Mac ist er bereits vorhanden, auf Linux-Systemen meistens auch. F\u00fcr Windows-Systeme wird die Installation von XAMPP empfohlen. Hier finden Sie Anleitungen zur Einrichtung des Webservers: Windows: https://www.ionos.de/digitalguide/server/tools/xampp-tutorial-so-erstellen-sie-ihren-lokalen-testserver/ https://werner-zenk.de/tipps/lokale_webserver_xampp.php Wichtig ist, dass Sie wissen, wo sich Ihr DocumentRoot befindet (zun\u00e4chst xampp\\htdocs - l\u00e4sst sich aber \u00e4ndern ) Mac: der Apache-Webserver ist bereits installiert achten Sie darauf, dass Sie Ihr DocumentRoot kennen (meistens Sites , eventuell \u00e4ndern ) Linux: die meisten Linux-Systeme haben bereits einen Webserver (auch hier wichtig, DocumentRoot zu kennen) wenn nicht, k\u00f6nnen Sie sich auch XAMPP installieren Um zu testen, ob Ihr Webser l\u00e4uft, erstellen Sie im DocumentRoot eine Datei index.php mit folgendem Inhalt: <?php phpinfo(); ?> und rufen in Ihrem Browser http://localhost/index.php auf. Es sollte eine \u00e4hnliche Ausgabe wie folgt erscheinen (nur Ausschnitt:","title":"Webserver"},{"location":"tools/#developer-tools","text":"Alle Browser sind mit Werkzeugen ausgestattet, die es Web-Entwicklerinnen erm\u00f6glichen, im Browser Informationen \u00fcber die Webanwendung zu erhalten. F\u00fcr einige Browser ist hier angegeben, wie Sie diese Entwicklerwerkzeuge einschalten.","title":"Developer Tools"},{"location":"tools/#chrome","text":"In Chrome sind die Entwicklerwerkzeuge unter dem Men\u00fc neben der URL-Eingabezeile unter Weitere Tools --> Entwicklertools verf\u00fcgbar (siehe folgendes Bild). Die eingeschalteten Entwicklertools offenbaren Ihnen umfassende Informationen \u00fcber die angezeigte Webseite. Besonders interessant ist der Reiter Console : oder auch der Reiter Elements , der Ihnen sowohl den HTML- als auch den jeweiligen CSS-Code anzeigt: Weiterf\u00fchrende Informationen erhalten Sie unter https://developers.google.com/web/tools/chrome-devtools .","title":"Chrome"},{"location":"tools/#firefox","text":"Zu den Entwicklertools von Firefox finden Sie Informationen auf https://developer.mozilla.org/de/docs/Tools Firefox Browser Developer Die Entwicklertools lassen sich in Firefox \u00f6ffnen unter Web-Entwickler --> Inspektor : Sie haben die gleichen M\u00f6glichkeiten der Ananlyse wie bei Chrome, bei Safari und anderen Browsern:","title":"Firefox"},{"location":"tools/#safari","text":"In Safari m\u00fcssen Sie zun\u00e4chst den Men\u00fceintrag Entwickler aktivieren. Eine Anleitung dazu finden Sie z.B. hier auf heise . Weitere Informationen zu den Entwicklertools erhalten Sie z.B. auf Werkzeuge im Men\u00fc \u201eEntwickler\u201c Safari Developer Help Web Development Tools","title":"Safari"},{"location":"tools/#curl","text":"Curl ist ein Open-Source-Kommandozeilenprogramm, um Daten mittels URL zu transferieren. Curl kann auf der Kommandozeile genutzt werden, um SMTP, HTTP, FTP usw. zu verwenden. Wir werden Curl insbesondere f\u00fcr die HTTP-Anfragemethoden GET und POST verwenden. Eine ausf\u00fchrliche Beschreibung von Curl ist im Buch Everything curl - the book frei verf\u00fcgbar. Die Installation von Curl erfolgt \u00fcber die Curl Download Seite . Zum Testen, ob Curl korrekt funktioniert, k\u00f6nnen Sie im Terminal z.B. curl freiheit.f4.htw-berlin.de/curl.html eingeben. Es sollte folgende Ausgabe erscheinen: <!DOCTYPE html> <html> <head> <title>Curl-Test</title> </head> <body> <p>Hallo FIW!</p> </body> </html> Mit dem -o -Flag k\u00f6nnen Sie die Datei speichern (Sie k\u00f6nnen einen Dateinamen angeben - hier curl.html ): curl -o curl.html freiheit.f4.htw-berlin.de/curl.html Da oben die lokale Datei genau so hei\u00dft wie die remote-Datei, h\u00e4tte man auch curl -O freiheit.f4.htw-berlin.de/curl.html angeben k\u00f6nnen, also gro\u00dfes -O . Mit dem -d -Flag k\u00f6nnen Parameter \u00fcbergeben und die entsprechende Seite mit einer POST-Anfrage aufgerufen werden. Mit dem zus\u00e4tzlichen -G -Flag erfolgt die Anfrage nicht als POST sondern als GET. Mit dem -I -Flag fragen Sie den Header der Anfrage ab, z.B.: curl -I freiheit.f4.htw-berlin.de/curl.html gibt etwas aus in der Art: HTTP/1.1 200 OK Date: Thu, 04 Jun 2020 13 :59:43 GMT Server: Apache/2.4.38 ( Debian ) Last-Modified: Thu, 04 Jun 2020 13 :01:59 GMT ETag: \"78-5a741c004bdb9\" Accept-Ranges: bytes Content-Length: 120 Vary: Accept-Encoding Content-Type: text/html F\u00fcr eine vollst\u00e4ndige \u00dcbersicht aller Flags von Curl siehe Curl manpage .","title":"Curl"},{"location":"tools/#postman","text":"Postman ist eine Anwendung, um Schnittstellen ( Application Programming Interface - API ), die das Backend bereitstellt, zu entwickeln und zu testen. Sie finden Postman unter postman.com . Wir beschr\u00e4nken uns zun\u00e4chst auf den Postman API Client . Laden Sie das Tool herunter und installieren es. Rufen Sie Postman auf und geben in das Eingabefeld https://postman-echo.com/get ein. Lassen Sie die Auswahl links daneben auf GET und klicken auf den Send -Button. Es erscheint folgendes Bild: Neben der GET -Anfrage sind folgende weitere Anfragen (siehe auch HTML \u2192 HTTP ) m\u00f6glich: POST - sendet Daten zur Verarbeitung an den Webserver PUT - l\u00e4dt existierende Daten (eine Datei) auf den Server PATCH - \u00e4ndert Daten (eine Datei), ohne - wie bei PUT - diese vollst\u00e4ndig zu ersetzen DELETE - l\u00f6scht die angegebenen Daten auf dem Server","title":"Postman"},{"location":"tools/#nodejs","text":"Node.js ist eine JavaScript-Laufzeitumgebung. Node.js reagiert auf Ereignisse und antwortet asynchron. Das bedeutet, dass die Ausf\u00fchrung einer Ereignisbearbeitung nicht zum Blockieren der Laufzeitumgebung f\u00fchrt, sondern nebenl\u00e4ufig weitere Ereignisse eintreffen k\u00f6nnen, die ebenfalls asynchron behandelt werden. Dies geschieht mithilfe des Callback-Patterns . Callbacks sind Funktionen, die anderen Funktionen als Parameter \u00fcbergeben werden (siehe JavaScript \u2192 Callback-Funktionen ).","title":"Node.js"},{"location":"tools/#angular","text":"Um Angular verwenden zu k\u00f6nnen (siehe auch Angular\u2192Getting started ), ben\u00f6tigen Sie das Angular Command Line Interface (CLI) . Zur Installation des Angular CLI geben Sie npm install -g @angular/cli ein. Den Paketmanager npm k\u00f6nnen Sie sich mit node.js installieren. Mithilfe des Angular CLI haben Sie dann die M\u00f6glichkeit, ein neues Projekt anzulegen ( ng new projektName ), eine neue Componente ( ng generate component componentenName ) usw. und das Projekt auszuf\u00fchren ( ng serve ). Sollten Sie bei der Installation der Angular-CLI EACCES errors erhalten ( permission denied ), dann arbeiten Sie an einem Mac ;-). Geben Sie dann im Terminal ein: sudo chown -R ` whoami ` ~/.npm sudo chown -R ` whoami ` /usr/local/lib/node_modules Sollten Sie bei der Installation der Angular-CLI Execution Policy -Errors erhalten (oder danach bei ng version ), dann arbeiten Sie an einem Windows-Rechner ;-). Geben Sie dann im Terminal ein: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned Danach sollte npm install -g @angular/cli funktionieren.","title":"Angular"},{"location":"tools/#installationen","text":"Um den Paketmanager npm zu installieren, laden sie sich node.js hier herunter und installieren Sie es. Nach erfolgreicher Installation sollte sowohl node -v funktionieren und eine Versionsnummer ausgeben (z.B. v14.15.0 ) als auch npm -v (z.B. 6.14.8 ). Au\u00dferdem ben\u00f6tigen Sie das Angular-Command-Line-Interface (CLI) , das Sie mithilfe des Befehls npm install -g @angular/cli installieren. Danach sollte ng version funktionieren und Ihnen etwas in dieser Art ausgeben: _ _ ____ _ ___ / \\ _ __ __ _ _ _ | | __ _ _ __ / ___ | | | _ _ | / \u25b3 \\ | '_ \\ / _` | | | | |/ _` | ' __ | | | | | | | / ___ \\| | | | ( _ | | | _ | | | ( _ | | | | | ___ | | ___ | | /_/ \\_\\_ | | _ | \\_ _, | \\_ _,_ | _ | \\_ _,_ | _ | \\_ ___ | _____ | ___ | | ___/ Angular CLI: 15 .0.0 Node: 14 .20.0 Package Manager: npm 9 .1.2 OS: darwin x64 Angular: ... Package Version ------------------------------------------------------ @angular-devkit/architect 0 .1500.0 ( cli-only ) @angular-devkit/core 15 .0.0 ( cli-only ) @angular-devkit/schematics 15 .0.0 ( cli-only ) @schematics/angular 15 .0.0 ( cli-only ) Jetzt k\u00f6nnen wir unser erstes Angular-Projekt erstellen.","title":"Installationen"},{"location":"tools/#update-angularcli","text":"Manchmal gibt es vielleicht Warnungen beim Erstellen eines Projektes - etwas in der Art, wie: npm WARN @angular-devkit/build-angular@0.1100.0 requires a peer of @angular/compiler-cli@^11.0.0 || ^11.0.0-next but none is installed. You must install peer dependencies yourself. npm WARN @angular-devkit/build-angular@0.1100.0 requires a peer of typescript@~4.0.0 but none is installed. You must install peer dependencies yourself. npm WARN @ngtools/webpack@11.0.0 requires a peer of @angular/compiler-cli@^11.0.0 || ^11.0.0-next but none is installed. You must install peer dependencies yourself. npm WARN @ngtools/webpack@11.0.0 requires a peer of typescript@~4.0.0 but none is installed. You must install peer dependencies yourself. npm WARN icss-utils@5.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself. npm WARN postcss-modules-extract-imports@3.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself. npm WARN postcss-modules-local-by-default@4.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself. npm WARN postcss-modules-scope@3.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself. npm WARN postcss-modules-values@4.0.0 requires a peer of postcss@^8.1.0 but none is installed. You must install peer dependencies yourself. Das liegt meistens daran, dass das Angular-CLI updated werden m\u00fcsste. F\u00fcr das Update von Angular gibt es eine eigene Seite . Gehen Sie wie dort beschrieben vor.","title":"Update @angular/cli"},{"location":"tools/#mysql","text":"MySQL ist eine relationale Datenbank und geh\u00f6rt zu den am meisten verwendeten relationalen Datenbanken bei Webanwendungen. Wir h\u00e4tten uns auch f\u00fcr PostgreSQL entscheiden k\u00f6nnen. F\u00fcr einen kurzen Vergleich von MySQL und PostgreSQL siehe hier . Informationen zur Installation von MySQL finden Sie hier . Nach der Installation finden Sie z.B. auf dem Mac unter Systemeinstellungen \u2192 MySQL : Achten Sie bei der Installation von MySQL darauf, dass Sie als Authentifizierungsmethode \"Legacy Password ...\" w\u00e4hlen! Sie m\u00fcssen aber MySQL auch nicht lokal installieren, sondern k\u00f6nnen auch den Studi-Server studi.f4.htw-berlin.de verwenden.","title":"MySQL"},{"location":"tools/#phpmyadmin","text":"phpMyadmin ist eine graphische Oberfl\u00e4che zur Verwaltung Ihrer MySQL -Datenbanken. Nach erfolgreicher Installation rufen Sie im Browser localhost/phpmyadmin auf und haben Zugriff auf Ihre Datenbanken bzw. k\u00f6nnen diese erstellen, \u00e4ndern und bef\u00fcllen.","title":"phpMyadmin"},{"location":"tools/#mongodb","text":"[MongoDB] ist eine NoSQL ( not only SQL ) Datenbank. In einer MongoDB werden nicht Relationen, sondern (JavaScript-)Objekte gespeichert. Die CRUD -Operationen auf einer MongoDB sind z.B. hier erkl\u00e4rt. Die MongoDB kann lokal als MongoDB (Community Edition) installiert werden. Zur Installationsseite geht es hier . Nach der Installation muss MongoDB gestartet werden. Unter Mac (f\u00fcr MongoDB-Version 4.4) geht es z.B. so: brew services start mongodb-community@4.4 Um MongoDB zu stoppen, muss beim Mac brew services stop mongodb-community@4.4 eingegeben werden. Wenn Sie dann mongo ins Terminal eingeben, sollte etwas in dieser Art erscheinen: MongoDB shell version v4.4.5 connecting to: mongodb://127.0.0.1:27017/?compressors = disabled & gssapiServiceName = mongodb Implicit session: session { \"id\" : UUID ( \"0b972fa5-fad9-48bb-8a7f-c81cc0778620\" ) } MongoDB server version: 4 .4.5 Welcome to the MongoDB shell. For interactive help, type \"help\" . For more comprehensive documentation, see https://docs.mongodb.com/ Questions? Try the MongoDB Developer Community Forums https://community.mongodb.com --- The server generated these startup warnings when booting: 2021 -07-01T11:40:21.328+02:00: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted --- --- Enable MongoDB ' s free cloud-based monitoring service, which will then receive and display metrics about your deployment ( disk utilization, CPU, operation statistics, etc ) . The monitoring data will be available on a MongoDB website with a unique URL accessible to you and anyone you share the URL with. MongoDB may use this information to make product improvements and to suggest MongoDB products and deployment options to you. To enable free monitoring, run the following command: db.enableFreeMonitoring () To permanently disable this reminder, run the following command: db.disableFreeMonitoring () --- >","title":"MongoDB"},{"location":"tools/#weitere-hilfen","text":"","title":"Weitere Hilfen"},{"location":"tools/#prozesse-und-ports","text":"Wenn Sie herausbekommen wollen, welche Ports bereits belegt sind und durch welchen Prozess, dann geben Sie im Terminal ein: lsof -i -P | grep -i LISTEN Eventuell m\u00fcssen Sie ein sudo voranstellen. Sie erhalten eine Ausgabe in der Form (variiert nat\u00fcrlich stark): rapportd 372 jornfreiheit 4u IPv4 0x5cee55fd054bd73 0t0 TCP *:57124 (LISTEN) rapportd 372 jornfreiheit 5u IPv6 0x5cee55fab8990c3 0t0 TCP *:57124 (LISTEN) phpstorm 456 jornfreiheit 55u IPv4 0x5cee55faabf19b3 0t0 TCP localhost:6942 (LISTEN) phpstorm 456 jornfreiheit 355u IPv4 0x5cee55fb7f034f3 0t0 TCP localhost:63342 (LISTEN) Dropbox 2638 jornfreiheit 129u IPv6 0x5cee55fb262a223 0t0 TCP *:17500 (LISTEN) Dropbox 2638 jornfreiheit 130u IPv4 0x5cee55fb25ea393 0t0 TCP *:17500 (LISTEN) Dropbox 2638 jornfreiheit 185u IPv4 0x5cee55fb7f00393 0t0 TCP localhost:17600 (LISTEN) Dropbox 2638 jornfreiheit 194u IPv4 0x5cee55fb9e31753 0t0 TCP localhost:17603 (LISTEN) node 9070 jornfreiheit 21u IPv6 0x5cee55fb5913843 0t0 TCP *:8080 (LISTEN) Python 9138 jornfreiheit 5u IPv4 0x5cee55fcfdf7753 0t0 TCP localhost:8000 (LISTEN) Wenn Sie nun z.B. einen bestimmten Prozess killen wollen, z.B. den Python-Prozess, der in localhost auf Port 8000 l\u00e4uft, dann geben Sie kill -9 9138 im Terminal ein. 9138 ist die PID des entsprechenden Prozesses.","title":"Prozesse und Ports"},{"location":"uebungen/","text":"\u00dcbungen \u00b6 \u00dcbung 0 \u00b6 Infrastruktur einrichten w\u00e4hlen Sie eine IDE aus und installieren Sie diese richten Sie sich ein Git-Repository ein (z.B. WebTech22 ) und pushen Sie es auf einen zentralen Dienst ( siehe ) laden Sie mich zu Ihrem Git-Dienst ein ( siehe ) commiten und pushen Sie Ihr Repository \u00dcbung 1 \u00b6 \u00dcbungsaufgabe 1 (HTML) Erstellen Sie in einem Uebung1 -Ordner eine Datei uebung1.html . Das body -Element soll ein header -Element, ein nav -Element, ein section -Element und ein footer -Element enthalten. Unter dieser \u00dcbungsaufgabe (siehe mockupdata ) ist der HTML-Code einer Tabelle mit allen Teilnehmerinnen einer Veranstaltung. Kopieren Sie den Inhalt der Datei so in Ihren HTML-Code, dass folgende Seite erscheint: Es sollen 4 Unterseiten erstellt werden. Bei Klick auf diese Seiten soll die Tabelle jeweils nur die Teilnehmerinnen enthalten, deren Nachname mit dem entsprechenden Anfangsbuchstaben beginnt (also in ag.html nur alle Nachnamen, die mit A bis G beginnen). Die Seiten ag.html , hl.html , mr.html und sz.html sollen im Ordner NN abgelegt werden, der Unterordner von Uebung1 ist. Achten Sie darauf, dass man von jeder Unterseite auf jede andere Unterseite und auch auf die Hauptseite ( uebung1.html ) wechseln k\u00f6nnen muss. Das einzubindende Logo des Studiengangs liegt hier . Es soll in einen images -Ordner gespeichert werden, der in der Ordner-Hierarchie neben dem Uebung1 -Ordner liegt. Um die Gr\u00f6\u00dfe des Bildes festzulegen, k\u00f6nnen Sie mit Hilfe des style -Attributes die H\u00f6he und die Breite bestimmen: style=\"width:53px; height:48px;\" N\u00e4chste Woche wird Uebung1 um CSS erweitert. mockupdata < table > < thead > < tr > < th > Vorname </ th > < th > Nachname </ th > < th > E-Mail-Adresse </ th > < th > IP-Adresse </ th > </ tr > </ thead > < tbody > < tr > < td > Adam </ td > < td > Anderson </ td > < td > aanderson8@google.fr </ td > < td > 118.93.83.157 </ td > </ tr > < tr > < td > Susan </ td > < td > Andrews </ td > < td > sandrewsn@google.co.jp </ td > < td > 228.214.9.251 </ td > </ tr > < tr > < td > Catherine </ td > < td > Andrews </ td > < td > candrewsp@noaa.gov </ td > < td > 112.111.87.178 </ td > </ tr > < tr > < td > Alan </ td > < td > Bradley </ td > < td > abradley1c@globo.com </ td > < td > 229.152.117.127 </ td > </ tr > < tr > < td > Anne </ td > < td > Brooks </ td > < td > abrooks16@bravesites.com </ td > < td > 243.159.39.234 </ td > </ tr > < tr > < td > Russell </ td > < td > Brown </ td > < td > rbrownq@nifty.com </ td > < td > 215.38.120.242 </ td > </ tr > < tr > < td > Ryan </ td > < td > Burton </ td > < td > rburton18@foxnews.com </ td > < td > 159.60.107.14 </ td > </ tr > < tr > < td > Roy </ td > < td > Campbell </ td > < td > rcampbell1@geocities.com </ td > < td > 237.232.34.20 </ td > </ tr > < tr > < td > Russell </ td > < td > Campbell </ td > < td > rcampbell17@eventbrite.com </ td > < td > 251.2.92.63 </ td > </ tr > < tr > < td > Bonnie </ td > < td > Coleman </ td > < td > bcoleman11@fc2.com </ td > < td > 109.150.122.102 </ td > </ tr > < tr > < td > Ernest </ td > < td > Coleman </ td > < td > ecoleman15@businessweek.com </ td > < td > 213.173.4.7 </ td > </ tr > < tr > < td > Richard </ td > < td > Cruz </ td > < td > rcruz7@unc.edu </ td > < td > 235.124.23.221 </ td > </ tr > < tr > < td > Sean </ td > < td > Cruz </ td > < td > scruz10@answers.com </ td > < td > 92.255.49.227 </ td > </ tr > < tr > < td > Rebecca </ td > < td > Cunningham </ td > < td > rcunninghamd@mac.com </ td > < td > 65.79.191.52 </ td > </ tr > < tr > < td > Margaret </ td > < td > Evans </ td > < td > mevansh@pcworld.com </ td > < td > 162.10.86.196 </ td > </ tr > < tr > < td > Jeffrey </ td > < td > Ford </ td > < td > jford14@cnet.com </ td > < td > 210.216.54.14 </ td > </ tr > < tr > < td > Andrea </ td > < td > Gardner </ td > < td > agardnerv@woothemes.com </ td > < td > 179.91.0.30 </ td > </ tr > < tr > < td > Deborah </ td > < td > George </ td > < td > dgeorge6@furl.net </ td > < td > 201.76.47.162 </ td > </ tr > < tr > < td > Sean </ td > < td > Gibson </ td > < td > sgibsony@alexa.com </ td > < td > 48.114.103.55 </ td > </ tr > < tr > < td > Virginia </ td > < td > Graham </ td > < td > vgrahamk@aol.com </ td > < td > 165.219.171.1 </ td > </ tr > < tr > < td > Steven </ td > < td > Hamilton </ td > < td > shamiltonu@state.tx.us </ td > < td > 38.194.91.201 </ td > </ tr > < tr > < td > Virginia </ td > < td > Hawkins </ td > < td > vhawkinsf@ehow.com </ td > < td > 93.120.46.203 </ td > </ tr > < tr > < td > Edward </ td > < td > Hicks </ td > < td > ehicksc@pcworld.com </ td > < td > 199.153.27.1 </ td > </ tr > < tr > < td > Mark </ td > < td > Johnson </ td > < td > mjohnsonj@hostgator.com </ td > < td > 73.87.135.206 </ td > </ tr > < tr > < td > Ruth </ td > < td > Jordan </ td > < td > rjordan1a@smugmug.com </ td > < td > 193.140.80.64 </ td > </ tr > < tr > < td > Antonio </ td > < td > Kim </ td > < td > akim4@odnoklassniki.ru </ td > < td > 168.244.191.78 </ td > </ tr > < tr > < td > Jennifer </ td > < td > Marshall </ td > < td > jmarshallt@gnu.org </ td > < td > 104.191.49.94 </ td > </ tr > < tr > < td > Eric </ td > < td > Matthews </ td > < td > ematthews5@independent.co.uk </ td > < td > 138.194.30.1 </ td > </ tr > < tr > < td > Raymond </ td > < td > Mcdonald </ td > < td > rmcdonald2@ihg.com </ td > < td > 161.24.42.24 </ td > </ tr > < tr > < td > Eric </ td > < td > Miller </ td > < td > emillere@creativecommons.org </ td > < td > 122.159.17.218 </ td > </ tr > < tr > < td > Jonathan </ td > < td > Morales </ td > < td > jmoralesa@ovh.net </ td > < td > 97.65.110.105 </ td > </ tr > < tr > < td > Marie </ td > < td > Morgan </ td > < td > mmorganb@cloudflare.com </ td > < td > 226.79.152.112 </ td > </ tr > < tr > < td > Amanda </ td > < td > Nelson </ td > < td > anelson13@indiatimes.com </ td > < td > 161.185.121.245 </ td > </ tr > < tr > < td > Lisa </ td > < td > Olson </ td > < td > lolsonr@telegraph.co.uk </ td > < td > 77.245.172.100 </ td > </ tr > < tr > < td > Alice </ td > < td > Ortiz </ td > < td > aortizw@histats.com </ td > < td > 179.52.222.21 </ td > </ tr > < tr > < td > Peter </ td > < td > Phillips </ td > < td > pphillipss@1688.com </ td > < td > 11.158.255.76 </ td > </ tr > < tr > < td > Matthew </ td > < td > Porter </ td > < td > mporter9@europa.eu </ td > < td > 174.81.178.88 </ td > </ tr > < tr > < td > Tammy </ td > < td > Ray </ td > < td > trayx@weather.com </ td > < td > 192.243.38.190 </ td > </ tr > < tr > < td > Mark </ td > < td > Richardson </ td > < td > mrichardson1d@ihg.com </ td > < td > 209.217.14.154 </ td > </ tr > < tr > < td > Joan </ td > < td > Roberts </ td > < td > jroberts12@alibaba.com </ td > < td > 4.91.143.62 </ td > </ tr > < tr > < td > Kathleen </ td > < td > Rose </ td > < td > kroseg@pinterest.com </ td > < td > 222.172.140.56 </ td > </ tr > < tr > < td > Steve </ td > < td > Sanders </ td > < td > ssanders1b@wikispaces.com </ td > < td > 91.61.109.245 </ td > </ tr > < tr > < td > Shirley </ td > < td > Scott </ td > < td > sscottm@macromedia.com </ td > < td > 219.237.108.82 </ td > </ tr > < tr > < td > Lillian </ td > < td > Stephens </ td > < td > lstephens19@hugedomains.com </ td > < td > 89.85.137.204 </ td > </ tr > < tr > < td > Nicole </ td > < td > Thompson </ td > < td > nthompson3@admin.ch </ td > < td > 13.183.208.155 </ td > </ tr > < tr > < td > Marie </ td > < td > Thompson </ td > < td > mthompsonz@yelp.com </ td > < td > 162.164.5.231 </ td > </ tr > < tr > < td > Alan </ td > < td > Vasquez </ td > < td > avasquezo@miibeian.gov.cn </ td > < td > 178.109.86.172 </ td > </ tr > < tr > < td > Mildred </ td > < td > Watkins </ td > < td > mwatkins0@miibeian.gov.cn </ td > < td > 150.67.132.64 </ td > </ tr > < tr > < td > Eugene </ td > < td > Williams </ td > < td > ewilliamsi@deliciousdays.com </ td > < td > 67.208.26.182 </ td > </ tr > < tr > < td > Catherine </ td > < td > Williams </ td > < td > cwilliamsl@360.cn </ td > < td > 154.87.204.51 </ td > </ tr > </ tbody > </ table > \u00dcbung 2 \u00b6 \u00dcbungsaufgabe 2 (CSS) Erstellen Sie (falls noch nicht geschehen) eine index.html -Datei in Ihrem Repository-Ordner (also z.B. DocumentRoot/Webtech22 ) derart, dass diese direkte Links auf Ihre L\u00f6sungen der \u00dcbungen enthalten (z.B. in einer Tabelle oder einer Liste). Kopieren Sie den Ordner Uebung1 in den Ordner Uebung2 (also inkl. Ordner NN ). \u00c4ndern Sie darin die Datei uebung1.html zu uebung2.html (umbenennen). \u00c4ndern Sie entsprechend alle Links innerhalb der Datei, damit Sie z.B. auf den Ordner Uebung2/NN zugreifen und nicht mehr auf Uebung1/NN . Legen Sie sich im Uebung2 -Ordner einen Ordner styles an. Erstellen Sie in dem styles -Ordner eine Datei mystyles.css . F\u00fcgen Sie im <head> -Bereich der uebung2.html eine logische Verkn\u00fcpfung zur mystyles.css -Datei ein ( <link href=\"./styles/mystyles.css\" rel=\"stylesheet\"> ). In mystyles.css definieren Sie (versuchen Sie mind. 6 der genannten 8 Punkte umzusetzen): Verdana als Schriftart f\u00fcr das ganze Dokument der <header> soll das HTW-Grau als Hintergrundfarbe, HTW-Orange als Schriftfarbe und der Text zentriert sein (siehe HTW Corporate Design ). die Tabelle soll ungef\u00e4hr wie dargestellt aussehen: d.h. mit Rahmen, mit einem Schatten, die Spalten\u00fcberschriften in wei\u00df, mit HTW-gr\u00fcnem Hintergrund. Das <nav> -Feld hat einen Abstand nach oben und nach unten von jeweils 50px . <a> -Elemente in einem <nav> -Element haben einen grauen Rand, deren Ecken abgerundet sind. Die Hintergrundfarbe ist HTW-blau. Schriftart ist wei\u00df und bold. <a> -Elemente in einem <nav> -Element sind nicht unterstrichen! F\u00e4hrt man mit der Maus \u00fcber ein <a> -Element in einem <nav> -Element \u00e4ndert sich die Hintergrundfarbe in HTW-grau und die Schriftfarbe in HTW-orange. Die Tabelle hat eine Breite von 80% des <section> -Elements. Der <footer> ist in HTW-Orange, die Schrift ist schwarz, der Text ist mittig und die Schrift ist kleiner. Die H\u00f6he des footers entsteht dadurch, dass die Schrift einen Abstand nach oben und nach unten von jeweils 20px hat. Am Ende soll es ungef\u00e4hr so aussehen: \u00dcbung 3 \u00b6 \u00dcbungsaufgabe 3 (Grid und Box-Model) Erstellen Sie einen Uebung3 -Ordner und darin eine Datei uebung3.html . Laden Sie sich hier die Datei images.zip herunter, entpacken Sie sie und schieben Sie den images -Ordner samt Inhalt in den Uebung3 -Ordner. Implementieren Sie die uebung3.html so, dass ungef\u00e4hr folgendes Aussehen entsteht: Sie k\u00f6nnen die CSS-Eigenschaften innerhalb der uebung3.html im <style> -Element definieren oder wieder in einer externen Datei. Ziele der \u00dcbung sind die Anwendung von CSS-Grid und ein Verst\u00e4ndnis vom Box-Model sowie die Verwendung von Gr\u00f6\u00dfen. Lassen Sie Ihrer Kreativit\u00e4t freien Lauf! \u00dcbung 4 \u00b6 \u00dcbungsaufgabe 4 (Bootstrap und JavaScript) Erstellen Sie einen Uebung4 -Ordner und darin eine Datei uebung4.html . Implementieren Sie die uebung4.html mithilfe von Bootstrap so, dass ungef\u00e4hr folgendes Aussehen entsteht: Sind in das Formular Daten eingegeben und wird der Registrieren -Button gedr\u00fcckt, dann erscheint mithilfe einer JavaScript-Funktion: Wird der Abbrechen -Button gedr\u00fcckt, werden alle bereits eingegebenen Daten wieder aus den Textfeldern entfernt. Ziele der \u00dcbung sind die Anwendung von CSS-Bootstrap und JavaScript .","title":"\u00dcbungen"},{"location":"uebungen/#ubungen","text":"","title":"\u00dcbungen"},{"location":"uebungen/#ubung-0","text":"Infrastruktur einrichten w\u00e4hlen Sie eine IDE aus und installieren Sie diese richten Sie sich ein Git-Repository ein (z.B. WebTech22 ) und pushen Sie es auf einen zentralen Dienst ( siehe ) laden Sie mich zu Ihrem Git-Dienst ein ( siehe ) commiten und pushen Sie Ihr Repository","title":"\u00dcbung 0"},{"location":"uebungen/#ubung-1","text":"\u00dcbungsaufgabe 1 (HTML) Erstellen Sie in einem Uebung1 -Ordner eine Datei uebung1.html . Das body -Element soll ein header -Element, ein nav -Element, ein section -Element und ein footer -Element enthalten. Unter dieser \u00dcbungsaufgabe (siehe mockupdata ) ist der HTML-Code einer Tabelle mit allen Teilnehmerinnen einer Veranstaltung. Kopieren Sie den Inhalt der Datei so in Ihren HTML-Code, dass folgende Seite erscheint: Es sollen 4 Unterseiten erstellt werden. Bei Klick auf diese Seiten soll die Tabelle jeweils nur die Teilnehmerinnen enthalten, deren Nachname mit dem entsprechenden Anfangsbuchstaben beginnt (also in ag.html nur alle Nachnamen, die mit A bis G beginnen). Die Seiten ag.html , hl.html , mr.html und sz.html sollen im Ordner NN abgelegt werden, der Unterordner von Uebung1 ist. Achten Sie darauf, dass man von jeder Unterseite auf jede andere Unterseite und auch auf die Hauptseite ( uebung1.html ) wechseln k\u00f6nnen muss. Das einzubindende Logo des Studiengangs liegt hier . Es soll in einen images -Ordner gespeichert werden, der in der Ordner-Hierarchie neben dem Uebung1 -Ordner liegt. Um die Gr\u00f6\u00dfe des Bildes festzulegen, k\u00f6nnen Sie mit Hilfe des style -Attributes die H\u00f6he und die Breite bestimmen: style=\"width:53px; height:48px;\" N\u00e4chste Woche wird Uebung1 um CSS erweitert. mockupdata < table > < thead > < tr > < th > Vorname </ th > < th > Nachname </ th > < th > E-Mail-Adresse </ th > < th > IP-Adresse </ th > </ tr > </ thead > < tbody > < tr > < td > Adam </ td > < td > Anderson </ td > < td > aanderson8@google.fr </ td > < td > 118.93.83.157 </ td > </ tr > < tr > < td > Susan </ td > < td > Andrews </ td > < td > sandrewsn@google.co.jp </ td > < td > 228.214.9.251 </ td > </ tr > < tr > < td > Catherine </ td > < td > Andrews </ td > < td > candrewsp@noaa.gov </ td > < td > 112.111.87.178 </ td > </ tr > < tr > < td > Alan </ td > < td > Bradley </ td > < td > abradley1c@globo.com </ td > < td > 229.152.117.127 </ td > </ tr > < tr > < td > Anne </ td > < td > Brooks </ td > < td > abrooks16@bravesites.com </ td > < td > 243.159.39.234 </ td > </ tr > < tr > < td > Russell </ td > < td > Brown </ td > < td > rbrownq@nifty.com </ td > < td > 215.38.120.242 </ td > </ tr > < tr > < td > Ryan </ td > < td > Burton </ td > < td > rburton18@foxnews.com </ td > < td > 159.60.107.14 </ td > </ tr > < tr > < td > Roy </ td > < td > Campbell </ td > < td > rcampbell1@geocities.com </ td > < td > 237.232.34.20 </ td > </ tr > < tr > < td > Russell </ td > < td > Campbell </ td > < td > rcampbell17@eventbrite.com </ td > < td > 251.2.92.63 </ td > </ tr > < tr > < td > Bonnie </ td > < td > Coleman </ td > < td > bcoleman11@fc2.com </ td > < td > 109.150.122.102 </ td > </ tr > < tr > < td > Ernest </ td > < td > Coleman </ td > < td > ecoleman15@businessweek.com </ td > < td > 213.173.4.7 </ td > </ tr > < tr > < td > Richard </ td > < td > Cruz </ td > < td > rcruz7@unc.edu </ td > < td > 235.124.23.221 </ td > </ tr > < tr > < td > Sean </ td > < td > Cruz </ td > < td > scruz10@answers.com </ td > < td > 92.255.49.227 </ td > </ tr > < tr > < td > Rebecca </ td > < td > Cunningham </ td > < td > rcunninghamd@mac.com </ td > < td > 65.79.191.52 </ td > </ tr > < tr > < td > Margaret </ td > < td > Evans </ td > < td > mevansh@pcworld.com </ td > < td > 162.10.86.196 </ td > </ tr > < tr > < td > Jeffrey </ td > < td > Ford </ td > < td > jford14@cnet.com </ td > < td > 210.216.54.14 </ td > </ tr > < tr > < td > Andrea </ td > < td > Gardner </ td > < td > agardnerv@woothemes.com </ td > < td > 179.91.0.30 </ td > </ tr > < tr > < td > Deborah </ td > < td > George </ td > < td > dgeorge6@furl.net </ td > < td > 201.76.47.162 </ td > </ tr > < tr > < td > Sean </ td > < td > Gibson </ td > < td > sgibsony@alexa.com </ td > < td > 48.114.103.55 </ td > </ tr > < tr > < td > Virginia </ td > < td > Graham </ td > < td > vgrahamk@aol.com </ td > < td > 165.219.171.1 </ td > </ tr > < tr > < td > Steven </ td > < td > Hamilton </ td > < td > shamiltonu@state.tx.us </ td > < td > 38.194.91.201 </ td > </ tr > < tr > < td > Virginia </ td > < td > Hawkins </ td > < td > vhawkinsf@ehow.com </ td > < td > 93.120.46.203 </ td > </ tr > < tr > < td > Edward </ td > < td > Hicks </ td > < td > ehicksc@pcworld.com </ td > < td > 199.153.27.1 </ td > </ tr > < tr > < td > Mark </ td > < td > Johnson </ td > < td > mjohnsonj@hostgator.com </ td > < td > 73.87.135.206 </ td > </ tr > < tr > < td > Ruth </ td > < td > Jordan </ td > < td > rjordan1a@smugmug.com </ td > < td > 193.140.80.64 </ td > </ tr > < tr > < td > Antonio </ td > < td > Kim </ td > < td > akim4@odnoklassniki.ru </ td > < td > 168.244.191.78 </ td > </ tr > < tr > < td > Jennifer </ td > < td > Marshall </ td > < td > jmarshallt@gnu.org </ td > < td > 104.191.49.94 </ td > </ tr > < tr > < td > Eric </ td > < td > Matthews </ td > < td > ematthews5@independent.co.uk </ td > < td > 138.194.30.1 </ td > </ tr > < tr > < td > Raymond </ td > < td > Mcdonald </ td > < td > rmcdonald2@ihg.com </ td > < td > 161.24.42.24 </ td > </ tr > < tr > < td > Eric </ td > < td > Miller </ td > < td > emillere@creativecommons.org </ td > < td > 122.159.17.218 </ td > </ tr > < tr > < td > Jonathan </ td > < td > Morales </ td > < td > jmoralesa@ovh.net </ td > < td > 97.65.110.105 </ td > </ tr > < tr > < td > Marie </ td > < td > Morgan </ td > < td > mmorganb@cloudflare.com </ td > < td > 226.79.152.112 </ td > </ tr > < tr > < td > Amanda </ td > < td > Nelson </ td > < td > anelson13@indiatimes.com </ td > < td > 161.185.121.245 </ td > </ tr > < tr > < td > Lisa </ td > < td > Olson </ td > < td > lolsonr@telegraph.co.uk </ td > < td > 77.245.172.100 </ td > </ tr > < tr > < td > Alice </ td > < td > Ortiz </ td > < td > aortizw@histats.com </ td > < td > 179.52.222.21 </ td > </ tr > < tr > < td > Peter </ td > < td > Phillips </ td > < td > pphillipss@1688.com </ td > < td > 11.158.255.76 </ td > </ tr > < tr > < td > Matthew </ td > < td > Porter </ td > < td > mporter9@europa.eu </ td > < td > 174.81.178.88 </ td > </ tr > < tr > < td > Tammy </ td > < td > Ray </ td > < td > trayx@weather.com </ td > < td > 192.243.38.190 </ td > </ tr > < tr > < td > Mark </ td > < td > Richardson </ td > < td > mrichardson1d@ihg.com </ td > < td > 209.217.14.154 </ td > </ tr > < tr > < td > Joan </ td > < td > Roberts </ td > < td > jroberts12@alibaba.com </ td > < td > 4.91.143.62 </ td > </ tr > < tr > < td > Kathleen </ td > < td > Rose </ td > < td > kroseg@pinterest.com </ td > < td > 222.172.140.56 </ td > </ tr > < tr > < td > Steve </ td > < td > Sanders </ td > < td > ssanders1b@wikispaces.com </ td > < td > 91.61.109.245 </ td > </ tr > < tr > < td > Shirley </ td > < td > Scott </ td > < td > sscottm@macromedia.com </ td > < td > 219.237.108.82 </ td > </ tr > < tr > < td > Lillian </ td > < td > Stephens </ td > < td > lstephens19@hugedomains.com </ td > < td > 89.85.137.204 </ td > </ tr > < tr > < td > Nicole </ td > < td > Thompson </ td > < td > nthompson3@admin.ch </ td > < td > 13.183.208.155 </ td > </ tr > < tr > < td > Marie </ td > < td > Thompson </ td > < td > mthompsonz@yelp.com </ td > < td > 162.164.5.231 </ td > </ tr > < tr > < td > Alan </ td > < td > Vasquez </ td > < td > avasquezo@miibeian.gov.cn </ td > < td > 178.109.86.172 </ td > </ tr > < tr > < td > Mildred </ td > < td > Watkins </ td > < td > mwatkins0@miibeian.gov.cn </ td > < td > 150.67.132.64 </ td > </ tr > < tr > < td > Eugene </ td > < td > Williams </ td > < td > ewilliamsi@deliciousdays.com </ td > < td > 67.208.26.182 </ td > </ tr > < tr > < td > Catherine </ td > < td > Williams </ td > < td > cwilliamsl@360.cn </ td > < td > 154.87.204.51 </ td > </ tr > </ tbody > </ table >","title":"\u00dcbung 1"},{"location":"uebungen/#ubung-2","text":"\u00dcbungsaufgabe 2 (CSS) Erstellen Sie (falls noch nicht geschehen) eine index.html -Datei in Ihrem Repository-Ordner (also z.B. DocumentRoot/Webtech22 ) derart, dass diese direkte Links auf Ihre L\u00f6sungen der \u00dcbungen enthalten (z.B. in einer Tabelle oder einer Liste). Kopieren Sie den Ordner Uebung1 in den Ordner Uebung2 (also inkl. Ordner NN ). \u00c4ndern Sie darin die Datei uebung1.html zu uebung2.html (umbenennen). \u00c4ndern Sie entsprechend alle Links innerhalb der Datei, damit Sie z.B. auf den Ordner Uebung2/NN zugreifen und nicht mehr auf Uebung1/NN . Legen Sie sich im Uebung2 -Ordner einen Ordner styles an. Erstellen Sie in dem styles -Ordner eine Datei mystyles.css . F\u00fcgen Sie im <head> -Bereich der uebung2.html eine logische Verkn\u00fcpfung zur mystyles.css -Datei ein ( <link href=\"./styles/mystyles.css\" rel=\"stylesheet\"> ). In mystyles.css definieren Sie (versuchen Sie mind. 6 der genannten 8 Punkte umzusetzen): Verdana als Schriftart f\u00fcr das ganze Dokument der <header> soll das HTW-Grau als Hintergrundfarbe, HTW-Orange als Schriftfarbe und der Text zentriert sein (siehe HTW Corporate Design ). die Tabelle soll ungef\u00e4hr wie dargestellt aussehen: d.h. mit Rahmen, mit einem Schatten, die Spalten\u00fcberschriften in wei\u00df, mit HTW-gr\u00fcnem Hintergrund. Das <nav> -Feld hat einen Abstand nach oben und nach unten von jeweils 50px . <a> -Elemente in einem <nav> -Element haben einen grauen Rand, deren Ecken abgerundet sind. Die Hintergrundfarbe ist HTW-blau. Schriftart ist wei\u00df und bold. <a> -Elemente in einem <nav> -Element sind nicht unterstrichen! F\u00e4hrt man mit der Maus \u00fcber ein <a> -Element in einem <nav> -Element \u00e4ndert sich die Hintergrundfarbe in HTW-grau und die Schriftfarbe in HTW-orange. Die Tabelle hat eine Breite von 80% des <section> -Elements. Der <footer> ist in HTW-Orange, die Schrift ist schwarz, der Text ist mittig und die Schrift ist kleiner. Die H\u00f6he des footers entsteht dadurch, dass die Schrift einen Abstand nach oben und nach unten von jeweils 20px hat. Am Ende soll es ungef\u00e4hr so aussehen:","title":"\u00dcbung 2"},{"location":"uebungen/#ubung-3","text":"\u00dcbungsaufgabe 3 (Grid und Box-Model) Erstellen Sie einen Uebung3 -Ordner und darin eine Datei uebung3.html . Laden Sie sich hier die Datei images.zip herunter, entpacken Sie sie und schieben Sie den images -Ordner samt Inhalt in den Uebung3 -Ordner. Implementieren Sie die uebung3.html so, dass ungef\u00e4hr folgendes Aussehen entsteht: Sie k\u00f6nnen die CSS-Eigenschaften innerhalb der uebung3.html im <style> -Element definieren oder wieder in einer externen Datei. Ziele der \u00dcbung sind die Anwendung von CSS-Grid und ein Verst\u00e4ndnis vom Box-Model sowie die Verwendung von Gr\u00f6\u00dfen. Lassen Sie Ihrer Kreativit\u00e4t freien Lauf!","title":"\u00dcbung 3"},{"location":"uebungen/#ubung-4","text":"\u00dcbungsaufgabe 4 (Bootstrap und JavaScript) Erstellen Sie einen Uebung4 -Ordner und darin eine Datei uebung4.html . Implementieren Sie die uebung4.html mithilfe von Bootstrap so, dass ungef\u00e4hr folgendes Aussehen entsteht: Sind in das Formular Daten eingegeben und wird der Registrieren -Button gedr\u00fcckt, dann erscheint mithilfe einer JavaScript-Funktion: Wird der Abbrechen -Button gedr\u00fcckt, werden alle bereits eingegebenen Daten wieder aus den Textfeldern entfernt. Ziele der \u00dcbung sind die Anwendung von CSS-Bootstrap und JavaScript .","title":"\u00dcbung 4"}]}